// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`default schema transform 1`] = `
"type AdminData {
  creationDate: String
  requestButton: Boolean
}

type Cover {
  detail_117: String
  detail_207: String
  detail_42: String
  detail_500: String
  thumbnail: String
  detail: String
}

type Creator {
  functionCode: String!
  functionSingular: String!
  functionPlural: String!
  name: String!
  type: String!
  description: String!
  imageUrl: String
}

type DK5 {
  searchCode: String!
  searchString: String!
  value: String!
}

type Draft_Translation {
  \\"\\"\\"
  Translation in plural form, e.g. forfattere, komponister, instruktører etc.
  \\"\\"\\"
  plural: String!

  \\"\\"\\"Translation in singular form, e.g. forfatter, komponist, instruktør\\"\\"\\"
  singular: String!
}

type Draft_Role {
  \\"\\"\\"
  The code for the type of creator or contributor, e.g. 'aut' for author, 'ill' for illustrator etc
  \\"\\"\\"
  functionCode: String!

  \\"\\"\\"
  The type of creator/contributor as text in singular and plural in Danish, e.g. forfatter/forfattere, komponist/komponister etc
  \\"\\"\\"
  function: Draft_Translation!
}

type Draft_Person implements Draft_Subject & Draft_Creator {
  \\"\\"\\"The person's whole name in normal order\\"\\"\\"
  display: String!

  \\"\\"\\"The person's full name inverted\\"\\"\\"
  nameSort: String!

  \\"\\"\\"First name of the person\\"\\"\\"
  firstName: String

  \\"\\"\\"Last name of the person\\"\\"\\"
  lastName: String

  \\"\\"\\"Birth year of the person\\"\\"\\"
  birthYear: String

  \\"\\"\\"A roman numeral added to the person, like Christian IV\\"\\"\\"
  romanNumeral: String

  \\"\\"\\"Added information about the person, like Henri, konge af Frankrig\\"\\"\\"
  attributeToName: String

  \\"\\"\\"Creator aliases, creators behind used pseudonym\\"\\"\\"
  aliases: [Draft_Person!]!

  \\"\\"\\"
  A list of which kinds of contributions this person made to this creation
  \\"\\"\\"
  roles: [Draft_Role!]!
}

type Draft_Corporation implements Draft_Subject & Draft_Creator {
  \\"\\"\\"The full corporation or conference name\\"\\"\\"
  display: String!

  \\"\\"\\"The full corporation or conference name to sort after\\"\\"\\"
  nameSort: String!

  \\"\\"\\"Main corporation or conference\\"\\"\\"
  main: String

  \\"\\"\\"Sub corporation or conference/meeting\\"\\"\\"
  sub: String

  \\"\\"\\"
  Location or jurisdiction of the corporation or conference, like Københavns Kommune, Statistisk Kontor
  \\"\\"\\"
  location: String

  \\"\\"\\"Year of the conference\\"\\"\\"
  year: String

  \\"\\"\\"Number of the conference\\"\\"\\"
  number: String

  \\"\\"\\"
  Added information about the corporation, like M. Folmer Andersen (firma)
  \\"\\"\\"
  attributeToName: String

  \\"\\"\\"
  A list of which kinds of contributions this corporation made to this creation
  \\"\\"\\"
  roles: [Draft_Role!]!
}

interface Draft_Creator {
  \\"\\"\\"Name of the creator\\"\\"\\"
  display: String!

  \\"\\"\\"Name of the creator which can be used to sort after \\"\\"\\"
  nameSort: String!
}

type Draft_TableOfContent {
  heading: String
  content: String
  listOfContent: [Draft_TableOfContent!]
}

type Draft_Shelfmark {
  \\"\\"\\"A postfix to the shelfmark, eg. 99.4 Christensen, Inger. f. 1935\\"\\"\\"
  postfix: String!

  \\"\\"\\"
  The actual shelfmark - e.g. information about on which shelf in the library this manifestation can be found, e.g. 99.4
  \\"\\"\\"
  shelfmark: String!
}

type Draft_PublicationYear_2 {
  display: String!
  year: Int
  endYear: Int
  frequency: String
}

type Draft_PhysicalDescription {
  \\"\\"\\"
  A summary of the physical description of this manifestation like extent (pages/minutes), illustrations etc.
  \\"\\"\\"
  summary: String!

  \\"\\"\\"Material that comes with the manifestation (bilag)\\"\\"\\"
  accompanyingMaterial: String

  \\"\\"\\"
  Additional physical description of the manifestation (e.g illustrations etc)
  \\"\\"\\"
  additionalDescription: String

  \\"\\"\\"Extent of the manifestation like pages and number of items\\"\\"\\"
  extent: String

  \\"\\"\\"Number of pages of the manifestation as number\\"\\"\\"
  numberOfPages: Int

  \\"\\"\\"Number of units, like 3 cassettes, or 1 score etc.\\"\\"\\"
  numberOfUnits: Int

  \\"\\"\\"The playing time of the manifestation (e.g 2 hours 5 minutes)\\"\\"\\"
  playingTime: String

  \\"\\"\\"The necessary equipment to use the material\\"\\"\\"
  requirements: String

  \\"\\"\\"Size of the manifestation\\"\\"\\"
  size: String

  \\"\\"\\"Technical information about the manifestation (e.g blu-ray disc)\\"\\"\\"
  technicalInformation: String

  \\"\\"\\"
  Ratio of text vs. illustration from 1-5 as a number, where 1 means no illustrations and 5 means illustrations on all pages
  \\"\\"\\"
  textVsIllustrations: Int
}

type Draft_RelatedPublication {
  \\"\\"\\"
  Notes describing the relation of the related periodical/journal/publication
  \\"\\"\\"
  heading: String!

  \\"\\"\\"Title of the related periodical/journal\\"\\"\\"
  title: [String!]!

  \\"\\"\\"ISSN of the related periodical/journal/publication\\"\\"\\"
  issn: String

  \\"\\"\\"ISBN of the related publication\\"\\"\\"
  isbn: String

  \\"\\"\\"Note regarding the URL of the related publication\\"\\"\\"
  urlText: String

  \\"\\"\\"URL of the related publication\\"\\"\\"
  url: String
}

enum Draft_NoteType {
  CONNECTION_TO_OTHER_WORKS
  DESCRIPTION_OF_MATERIAL
  DISSERTATION
  LANGUAGE
  MUSICAL_ENSEMBLE_OR_CAST
  NOT_SPECIFIED
  OCCASION_FOR_PUBLICATION
  ORIGINAL_TITLE
  ORIGINAL_VERSION
  REFERENCES
  RESTRICTIONS_ON_USE
}

enum Draft_ChildOrAdultCode {
  FOR_CHILDREN
  FOR_ADULTS
}

type Draft_ChildOrAdult {
  display: String!
  code: Draft_ChildOrAdultCode!
}

enum Draft_SchoolUseCode {
  FOR_SCHOOL_USE
  FOR_TEACHER
}

type Draft_SchoolUse {
  display: String!
  code: Draft_SchoolUseCode!
}

type Draft_Note {
  \\"\\"\\"
  The type of note - e.g. note about language, genre etc, NOT_SPECIFIED if not known. 
  \\"\\"\\"
  type: Draft_NoteType!

  \\"\\"\\"Heading before note\\"\\"\\"
  heading: String

  \\"\\"\\"The actual notes\\"\\"\\"
  display: [String!]!
}

enum Draft_ManifestationPartType {
  MUSIC_TRACKS
  SHEET_MUSIC_CONTENT
  PARTS_OF_BOOK
  NOT_SPECIFIED
}

type Draft_ManifestationPart {
  \\"\\"\\"The title of the entry (music track or title of a literary analysis)\\"\\"\\"
  title: String!

  \\"\\"\\"The creator of the music track or literary analysis\\"\\"\\"
  creators: [Draft_Creator!]!

  \\"\\"\\"Classification of this entry (music track or literary analysis)\\"\\"\\"
  classifications: [Draft_Classification!]!

  \\"\\"\\"Subjects of this entry (music track or literary analysis)\\"\\"\\"
  subjects: [Draft_Subject!]

  \\"\\"\\"
  Additional creator or contributor to this entry (music track or literary analysis) as described on the publication. E.g. 'arr.: H. Cornell'
  \\"\\"\\"
  creatorsFromDescription: [String!]!
}

type Draft_ManifestationParts {
  \\"\\"\\"Heading for the music content note\\"\\"\\"
  heading: String

  \\"\\"\\"The creator and title etc of the individual parts\\"\\"\\"
  parts: [Draft_ManifestationPart!]!

  \\"\\"\\"The type of manifestation parts, is this music tracks, book parts etc.\\"\\"\\"
  type: Draft_ManifestationPartType!
}

type Draft_Languages {
  \\"\\"\\"Main language of this manifestation\\"\\"\\"
  main: [Draft_Language!]

  \\"\\"\\"Original language of this manifestation\\"\\"\\"
  original: [Draft_Language!]

  \\"\\"\\"
  Parallel languages of this manifestation, if more languages are printed in the same book
  \\"\\"\\"
  parallel: [Draft_Language!]

  \\"\\"\\"
  Spoken language in this manifestation e.g. dubbed/syncronized language in movie
  \\"\\"\\"
  spoken: [Draft_Language!]

  \\"\\"\\"Subtitles in this manifestation\\"\\"\\"
  subtitles: [Draft_Language!]

  \\"\\"\\"
  Summary/abstract languages of this manifestation, if the manifestation contains short summaries of the content in another language
  \\"\\"\\"
  abstract: [Draft_Language!]
}

enum IdentifierType {
  DOI
  ISBN
  ISSN
  ISMN
  MUSIC
  MOVIE
  PUBLIZON
  NOT_SPECIFIED
  ORDER_NUMBER
  BARCODE
}

type Draft_Identifier {
  \\"\\"\\"The type of identifier\\"\\"\\"
  type: IdentifierType!

  \\"\\"\\"The actual identifier\\"\\"\\"
  value: String!
}

type Draft_HostPublication {
  \\"\\"\\"Publication this manifestation can be found in\\"\\"\\"
  title: String!

  \\"\\"\\"Creator of the host publication if host publication is book\\"\\"\\"
  creator: String

  \\"\\"\\"ISSN of the publication this manifestation can be found in\\"\\"\\"
  issn: String

  \\"\\"\\"ISBN of the publication this manifestation can be found in\\"\\"\\"
  isbn: String

  \\"\\"\\"The issue of the publication this manifestation can be found in\\"\\"\\"
  issue: String

  \\"\\"\\"Notes about the publication where this manifestation can be found in\\"\\"\\"
  notes: [String!]

  \\"\\"\\"The pages in the publication where this manifestation can be found in\\"\\"\\"
  pages: String

  \\"\\"\\"
  The publisher of the publication where this manifestation can be found in
  \\"\\"\\"
  publisher: String

  \\"\\"\\"Series of the publication this manifestation can be found in\\"\\"\\"
  series: Draft_GeneralSeries

  \\"\\"\\"
  The publication year of the publication this manifestation can be found in
  \\"\\"\\"
  year: Draft_PublicationYear

  \\"\\"\\"All details about the publication this manifestation can be found in\\"\\"\\"
  summary: String!
}

type Draft_Printing {
  \\"\\"\\"
  Properties 'printing' and 'publicationYear' as one string, e.g.: '11. oplag, 2020'
  \\"\\"\\"
  summary: String!

  \\"\\"\\"The printing number and name\\"\\"\\"
  printing: String!

  \\"\\"\\"A year as displayable text and as number\\"\\"\\"
  publicationYear: Draft_PublicationYear
}

type Draft_PublicationYear {
  display: String!
  year: Int
  endYear: Int
  frequency: String
}

type Draft_Edition {
  \\"\\"\\"
  Properties 'edition', 'contributorsToEdition' and 'publicationYear' as one string, e.g.: '3. udgave, revideret af Hugin Eide, 2005'
  \\"\\"\\"
  summary: String!

  \\"\\"\\"The edition number and name\\"\\"\\"
  edition: String

  \\"\\"\\"Quotation of contributor statements related to the edition\\"\\"\\"
  contributors: [String!]!

  \\"\\"\\"A year as displayable text and as number\\"\\"\\"
  publicationYear: Draft_PublicationYear
}

enum Draft_EntryType {
  MAIN_ENTRY
  NATIONAL_BIBLIOGRAPHY_ENTRY
  ADDITIONAL_ENTRY
}

type Draft_Classification {
  \\"\\"\\"The classification code\\"\\"\\"
  code: String!

  \\"\\"\\"Descriptive text for the classification code (DK5 only)\\"\\"\\"
  display: String!

  \\"\\"\\"
  For DK5 only. The DK5 entry type: main entry, national entry, or additional entry
  \\"\\"\\"
  entryType: Draft_EntryType

  \\"\\"\\"Name of the classification system\\"\\"\\"
  system: String!
}

type Draft_Audience {
  \\"\\"\\"Appropriate audience for this manifestation\\"\\"\\"
  generalAudience: [String!]!

  \\"\\"\\"
  Range of numbers with either beginning of range or end of range or both e.g. 6-10, 1980-1999
  \\"\\"\\"
  ages: [Draft_Range!]!

  \\"\\"\\"Appropriate audience as recommended by the library\\"\\"\\"
  libraryRecommendation: String

  \\"\\"\\"Is this material for children or adults\\"\\"\\"
  childrenOrAdults: [Draft_ChildOrAdult!]!

  \\"\\"\\"
  Is this material for use in schools (folkeskole/ungdomsuddannelse) or is this material for use in schools by the teacher (folkeskole only)
  \\"\\"\\"
  schoolUse: [Draft_SchoolUse!]!

  \\"\\"\\"Primary target audience for this manifestation\\"\\"\\"
  primaryTarget: [String!]!

  \\"\\"\\"
  LET number of this manifestion, defines the reability level, LET stands for læseegnethedstal
  \\"\\"\\"
  let: String

  \\"\\"\\"
  Lix number of this manifestion, defines the reability level, Lix stands for læsbarhedsindex
  \\"\\"\\"
  lix: String
}

enum Draft_AccessTypeCode {
  PHYSICAL
  ONLINE
  NOT_SPECIFIED
}

type Draft_AccessType {
  display: String!
  code: Draft_AccessTypeCode!
}

type Draft_Manifestations {
  first: Draft_Manifestation!
  latest: Draft_Manifestation!
  all: [Draft_Manifestation!]!
}

type Draft_Manifestation {
  \\"\\"\\"Unique identification of the manifestation e.g 870970-basis:54029519\\"\\"\\"
  pid: String!

  \\"\\"\\"Different kinds of titles for this work\\"\\"\\"
  titles: Draft_ManifestationTitles!

  \\"\\"\\"Abstract of the entity\\"\\"\\"
  abstract: [String!]!

  \\"\\"\\"Access type of this manifestation\\"\\"\\"
  accessTypes: [Draft_AccessType!]!

  \\"\\"\\"Different options to access manifestation\\"\\"\\"
  access: [Draft_Access!]!

  \\"\\"\\"
  Different kinds of definitions of appropriate audience for this manifestation
  \\"\\"\\"
  audience: Draft_Audience

  \\"\\"\\"Contributors to the manifestation, actors, illustrators etc\\"\\"\\"
  contributors: [Draft_Creator!]!

  \\"\\"\\"
  Additional contributors of this manifestation as described on the publication. E.g. 'på dansk ved Vivi Berendt'
  \\"\\"\\"
  contributorsFromDescription: [String!]!

  \\"\\"\\"
  Primary creators of the manifestation e.g. authors, directors, musicians etc
  \\"\\"\\"
  creators: [Draft_Creator!]!

  \\"\\"\\"
  Additional creators of this manifestation as described on the publication. E.g. 'tekst af William Warren'
  \\"\\"\\"
  creatorsFromDescription: [String!]!

  \\"\\"\\"
  Classification codes for this manifestation from any classification system
  \\"\\"\\"
  classifications: [Draft_Classification!]!

  \\"\\"\\"Edition details for this manifestation\\"\\"\\"
  edition: Draft_Edition!

  \\"\\"\\"Details about the latest printing of this manifestation\\"\\"\\"
  latestPrinting: Draft_Printing

  \\"\\"\\"
  Overall literary category/genre of this manifestation. e.g. fiction or nonfiction. In Danish skønlitteratur/faglitteratur for literature, fiktion/nonfiktion for other types.
  \\"\\"\\"
  fictionNonfiction: Draft_FictionNonfiction

  \\"\\"\\"The genre, (literary) form, type etc. of this manifestation\\"\\"\\"
  genreAndForm: [String!]!

  \\"\\"\\"Details about the host publications of this manifestation\\"\\"\\"
  hostPublication: Draft_HostPublication

  \\"\\"\\"Identifiers for this manifestation - often used for search indexes\\"\\"\\"
  identifiers: [Draft_Identifier!]!

  \\"\\"\\"Languages in this manifestation\\"\\"\\"
  languages: Draft_Languages

  \\"\\"\\"
  Tracks on music album, sheet music content, or articles/short stories etc. in this manifestation
  \\"\\"\\"
  manifestationParts: Draft_ManifestationParts

  \\"\\"\\"The type of material of the manifestation based on bibliotek.dk types\\"\\"\\"
  materialTypes: Draft_MaterialTypes!

  \\"\\"\\"Notes about the manifestation\\"\\"\\"
  notes: [Draft_Note!]!

  \\"\\"\\"
  Notes about relations to this book/periodical/journal, - like previous names or related journals
  \\"\\"\\"
  relatedPublications: [Draft_RelatedPublication!]!

  \\"\\"\\"
  Physical description of this manifestation like extent (pages/minutes), illustrations etc.
  \\"\\"\\"
  physicalDescriptions: [Draft_PhysicalDescription!]!

  \\"\\"\\"The publication year of the manifestation - OBS! was datePublished\\"\\"\\"
  publicationYear: Draft_PublicationYear_2!

  \\"\\"\\"Publisher of this manifestion\\"\\"\\"
  publisher: [String!]!

  \\"\\"\\"
  The creation date of the record describing this manifestation in the format YYYYMMDD
  \\"\\"\\"
  recordCreationDate: String!

  \\"\\"\\"Series for this work\\"\\"\\"
  series: Draft_SeriesContainer

  \\"\\"\\"
  Information about on which shelf in the library this manifestation can be found
  \\"\\"\\"
  shelfmark: Draft_Shelfmark

  \\"\\"\\"
  The source of the manifestation, e.g. own library catalogue (Bibliotekskatalog) or online source e.g. Filmstriben, Ebook Central, eReolen Global etc.
  \\"\\"\\"
  source: [String!]!

  \\"\\"\\"Subjects for this manifestation\\"\\"\\"
  subjects: Draft_SubjectContainer!

  \\"\\"\\"
  Information about on which volume this manifestation is in multi volume work
  \\"\\"\\"
  volume: String

  \\"\\"\\"
  Quotation of the manifestation's table of contents or a similar content list
  \\"\\"\\"
  tableOfContents: Draft_TableOfContent
}

type Draft_ManifestationTitles {
  \\"\\"\\"The main title(s) of the work\\"\\"\\"
  main: [String!]!

  \\"\\"\\"The full title(s) of the work including subtitles etc\\"\\"\\"
  full: [String!]!

  \\"\\"\\"The sorted title of the entity\\"\\"\\"
  sort: String!

  \\"\\"\\"
  Alternative titles for this manifestation e.g. a title in a different language
  \\"\\"\\"
  alternative: [String!]!

  \\"\\"\\"
  Information that distinguishes this manifestation from a similar manifestation with same title, e.g. 'illustrated by Ted Kirby'
  \\"\\"\\"
  identifyingAddition: String

  \\"\\"\\"
  The title of the work that this expression/manifestation is translated from or based on. The original title(s) of a film which has a different distribution title.
  \\"\\"\\"
  original: [String!]

  \\"\\"\\"Titles (in other languages) parallel to the main 'title' of the work\\"\\"\\"
  parallel: [String!]!

  \\"\\"\\"The standard title of the entity, used for music and movies\\"\\"\\"
  standard: String

  \\"\\"\\"Danish translation of the main title\\"\\"\\"
  translated: [String!]
}

type Draft_Ereol {
  \\"\\"\\"
  The origin, e.g. \\"Ereolen\\" or \\"Ereolen Go\\"
  \\"\\"\\"
  origin: String!

  \\"\\"\\"The url where manifestation is located\\"\\"\\"
  url: String!

  \\"\\"\\"
  Is this a manifestation that always can be loaned on ereolen.dk even if you've run out of loans this month
  \\"\\"\\"
  canAlwaysBeLoaned: Boolean!
}

type Draft_URL {
  \\"\\"\\"
  The origin, e.g. \\"DBC Webarkiv\\"
  \\"\\"\\"
  origin: String!

  \\"\\"\\"The url where manifestation is located\\"\\"\\"
  url: String!
}

type Draft_Ill {
  \\"\\"\\"Is true when manifestation can be borrowed via ill\\"\\"\\"
  ill: Boolean!
}

type Draft_InfomediaService {
  \\"\\"\\"
  Infomedia ID which can be used to fetch article through Infomedia Service
  \\"\\"\\"
  id: String!
}

type Draft_DigitalArticleService {
  \\"\\"\\"
  Issn which can be used to order article through Digital Article Service
  \\"\\"\\"
  issn: String!

  \\"\\"\\"
  Is true when access token belongs to a user whose municipality of residence is subscribed to Digital Article Service  
  \\"\\"\\"
  subscribed: Boolean!
}

union Draft_Access = Draft_URL | Draft_Ereol | Draft_Ill | Draft_InfomediaService | Draft_DigitalArticleService

type Mutation {
  submitPeriodicaArticleOrder(input: PeriodicaArticleOrder!): PeriodicaArticleOrderResponse!
}

type Draft_Query {
  work(id: String, faust: String, pid: String): Draft_Work
  works(id: [String!], faust: [String!], pid: [String!]): [Draft_Work]!
  manifestation(faust: String, pid: String): Draft_Manifestation
  manifestations(faust: [String!], pid: [String!]): [Draft_Manifestation]!
  suggest(
    \\"\\"\\"The query to get suggestions from\\"\\"\\"
    q: String!

    \\"\\"\\"
    work type to include in the result
    Note: Is only supported in the bibdk suggester
    \\"\\"\\"
    workType: WorkType

    \\"\\"\\"suggest type to include in result\\"\\"\\"
    suggestType: Draft_SuggestionType
  ): Draft_SuggestResponse!

  \\"\\"\\"Get recommendations based on a pid\\"\\"\\"
  recommend(pid: String!): Draft_RecommendationResponse!

  \\"\\"\\"Search\\"\\"\\"
  search(q: SearchQuery!): Draft_SearchResponse!
}

type Query {
  draft: Draft_Query!
  manifestation(pid: String!): WorkManifestation!
  work(id: String, faust: String): Work
  works(id: [String!], faust: [String!]): [Work]!
  search(q: SearchQuery!, filters: SearchFilters): SearchResponse!
  suggest(q: String!, worktype: WorkType, suggesttype: String): SuggestResponse!
  infomediaContent(pid: String!): [InfomediaContent]
  refWorks(pid: String!): String!
  ris(pid: String!): String!
}

type Draft_Recommendation {
  \\"\\"\\"The recommended work\\"\\"\\"
  work: Draft_Work!

  \\"\\"\\"The recommended manifestation\\"\\"\\"
  manifestation: Draft_Manifestation!
}

type Draft_RecommendationResponse {
  result: [Draft_Recommendation!]!
}

interface Draft_Review {
  author: String
  date: String
}

type Draft_ExternalReview implements Draft_Review {
  author: String
  date: String
  rating: String
  urls: [Draft_URL!]!
}

type Draft_InfomediaReview implements Draft_Review {
  author: String
  date: String
  origin: String
  rating: String
  id: String!
}

type Draft_LibrariansReview implements Draft_Review {
  author: String
  date: String
  sections: [TextWithWork!]!

  \\"\\"\\" This is a pid \\"\\"\\"
  id: String!
}

type Draft_Work {
  reviews: [Draft_Review!]!

  \\"\\"\\"
  Unique identification of the work based on work-presentation id e.g work-of:870970-basis:54029519
  \\"\\"\\"
  workId: String!
  titles: Draft_WorkTitles!

  \\"\\"\\"Abstract of the entity\\"\\"\\"
  abstract: [String!]

  \\"\\"\\"Creators\\"\\"\\"
  creators: [Draft_Creator!]!

  \\"\\"\\"DK5 main entry for this work\\"\\"\\"
  dk5MainEntry: Draft_DK5MainEntry

  \\"\\"\\"
  Overall literary category/genre of this work. e.g. fiction or nonfiction. In Danish skønlitteratur/faglitteratur for literature, fiktion/nonfiktion for other types.
  \\"\\"\\"
  fictionNonfiction: Draft_FictionNonfiction

  \\"\\"\\"The type of material of the manifestation based on bibliotek.dk types\\"\\"\\"
  materialTypes: Draft_MaterialTypes!

  \\"\\"\\"Series for this work\\"\\"\\"
  series: Draft_SeriesContainer

  \\"\\"\\"
  Literary/movie universe this work is part of, e.g. Wizarding World, Marvel Universe
  \\"\\"\\"
  universe: Draft_Universe

  \\"\\"\\"Subjects for this work\\"\\"\\"
  subjects: Draft_SubjectContainer!

  \\"\\"\\"The genre, (literary) form, type etc. of this work\\"\\"\\"
  genreAndForm: [String!]!

  \\"\\"\\"Worktypes for this work - 'none' replaced by 'other'\\"\\"\\"
  workTypes: [Draft_WorkType!]!

  \\"\\"\\"The year this work was originally published or produced\\"\\"\\"
  workYear: String

  \\"\\"\\"The main language(s) of the work's content\\"\\"\\"
  mainLanguages: [Draft_Language!]!

  \\"\\"\\"Details about the manifestations of this work\\"\\"\\"
  manifestations: Draft_Manifestations!
}

type Draft_FacetTerm {
  term: String!
  count: Int!
  facetCategory: String!
  popular: Boolean!
}

type Draft_FacetResponse {
  categories: [Draft_Facet!]!
  popular: [Draft_FacetTerm!]!
}

type Draft_Facet {
  facetCategory: String!
  values: [Draft_FacetTerm!]!
}

type Draft_SearchResponse {
  facets: Draft_FacetResponse
}

type Draft_Universe {
  \\"\\"\\"
  Literary/movie universe this work is part of e.g. Wizarding World, Marvel Universe
  \\"\\"\\"
  title: String!
}

type Draft_NumberInSeries {
  \\"\\"\\"
  The number in the series as text, quoted form the publication, e.g. 'Vol. IX'
  \\"\\"\\"
  display: String!

  \\"\\"\\"The number in the series as integer\\"\\"\\"
  number: Int!
}

type Draft_GeneralSeries {
  \\"\\"\\"The title of the series\\"\\"\\"
  title: String!

  \\"\\"\\"
  A parallel title to the main 'title' of the series, in a different language
  \\"\\"\\"
  parallelTitles: [String!]!

  \\"\\"\\"The number in the series as text quotation and a number\\"\\"\\"
  numberInSeries: Draft_NumberInSeries

  \\"\\"\\"Works in the series\\"\\"\\"
  works: [Work!]!
}

type Draft_PopularSeries {
  \\"\\"\\"The title of the series\\"\\"\\"
  title: String!

  \\"\\"\\"A alternative title to the main 'title' of the series\\"\\"\\"
  alternativeTitles: [String!]!

  \\"\\"\\"The number in the series as text qoutation and a number\\"\\"\\"
  numberInSeries: Draft_NumberInSeries

  \\"\\"\\"Information about whether this work in the series should be read first\\"\\"\\"
  readThisFirst: Boolean

  \\"\\"\\"
  Information about whether this work in the series can be read without considering the order of the series, it can be read at any time
  \\"\\"\\"
  readThisWhenever: Boolean

  \\"\\"\\"Works in the series\\"\\"\\"
  works: [Work!]!
}

type Draft_SeriesContainer {
  all: [Draft_GeneralSeries!]!
  popular: [Draft_PopularSeries!]!
}

interface Draft_Subject {
  display: String!
}

type Draft_SubjectText implements Draft_Subject {
  type: Draft_SubjectType!
  display: String!
}

type Draft_TimePeriod implements Draft_Subject {
  period: Draft_Range!
  display: String!
}

enum Draft_SubjectType {
  TOPIC
  LOCATION
  FICTIONAL_CHARACTER
  MUSIC_COUNTRY_OF_ORIGIN
  MUSIC_TIME_PERIOD
  MUSICAL_INSTRUMENTATION
  TIME_PERIOD
  FILM_NATIONALITY
  LIBRARY_OF_CONGRESS_SUBJECT_HEADING
}

type Draft_Range {
  begin: Int
  end: Int
  display: String!
}

type Draft_SubjectContainer {
  \\"\\"\\"All subjects\\"\\"\\"
  all: [Draft_Subject!]!

  \\"\\"\\"Only DBC verified subjects\\"\\"\\"
  dbcVerified: [Draft_Subject!]!
}

enum Draft_SuggestionType {
  subject
  title
  creator
}

type Draft_Suggestion {
  \\"\\"\\"The type of suggestion: creator, subject or title\\"\\"\\"
  type: Draft_SuggestionType!

  \\"\\"\\"The suggested term which can be searched for\\"\\"\\"
  term: String!

  \\"\\"\\"A work related to the term\\"\\"\\"
  work: Draft_Work
}

type Draft_SuggestResponse {
  result: [Draft_Suggestion!]!
}

type Draft_Language {
  \\"\\"\\"Language as displayable text\\"\\"\\"
  display: String!

  \\"\\"\\"ISO639-2 language code\\"\\"\\"
  isoCode: String!
}

type Draft_MaterialTypes {
  \\"\\"\\"
  The general type of material of the manifestation based on a grouping of bibliotek.dk material types, e.g. bøger, lydbøger etc. 
  \\"\\"\\"
  general: [String!]!

  \\"\\"\\"The type of material of the manifestation based on bibliotek.dk types\\"\\"\\"
  specific: [String!]!
}

enum Draft_FictionNonfictionCode {
  FICTION
  NONFICTION
  NOT_SPECIFIED
}

type Draft_FictionNonfiction {
  \\"\\"\\"
  Displayable overall category/genre. In Danish skønlitteratur/faglitteratur for literature, fiktion/nonfiktion for other types.
  \\"\\"\\"
  display: String!

  \\"\\"\\"Binary code fiction/nonfiction used for filtering\\"\\"\\"
  code: Draft_FictionNonfictionCode!
}

type Draft_DK5MainEntry {
  \\"\\"\\"Displayable main DK5 classification\\"\\"\\"
  display: String!

  \\"\\"\\"Main DK5 classification code\\"\\"\\"
  code: String!
}

enum Draft_WorkType {
  ANALYSIS
  ARTICLE
  BOOKDESCRIPTION
  GAME
  LITERATURE
  MAP
  MOVIE
  MUSIC
  OTHER
  PERIODICA
  PORTRAIT
  REVIEW
  SHEETMUSIC
  TRACK
}

type Draft_WorkTitles {
  \\"\\"\\"The main title(s) of the work\\"\\"\\"
  main: [String!]!

  \\"\\"\\"The full title(s) of the work including subtitles etc\\"\\"\\"
  full: [String!]!

  \\"\\"\\"Titles (in other languages) parallel to the main 'title' of the work\\"\\"\\"
  parallel: [String!]!

  \\"\\"\\"The sorted title of the entity\\"\\"\\"
  sort: String!

  \\"\\"\\"
  The title of the work that this expression/manifestation is translated from or based on. The original title(s) of a film which has a different distribution title.
  \\"\\"\\"
  original: [String!]

  \\"\\"\\"The standard title of the entity, used for music and movies\\"\\"\\"
  standard: String

  \\"\\"\\"Danish translation of the main title\\"\\"\\"
  translated: [String!]
}

type InfomediaContent {
  id: String!
  headLine: String!
  subHeadLine: String!
  byLine: String!
  dateLine: String!
  paper: String!
  text: String!
  hedLine: String!
  logo: String!
  origin: String!
  html: String!
}

type Localizations {
  count: Int
  agencies: [holdingAgency]
}

type holdingAgency {
  agencyId: String
  holdingItems: [holdingsItem]
}

type holdingsItem {
  localizationPid: String
  codes: String
  localIdentifier: String
}

type UrlReference {
  url: String!
  origin: String!
  note: String!
  accessType: String
}

type InfomediaReference {
  infomediaId: String!
  pid: String!
  error: String
}

type WebArchive {
  type: String!
  url: String!
  pid: String!
}

type DigitalCopy {
  issn: String!
}

union OnlineAccess = UrlReference | InfomediaReference | WebArchive | DigitalCopy

input PeriodicaArticleOrder {
  \\"\\"\\"The pid of an article or periodica\\"\\"\\"
  pid: String!
  pickUpBranch: String!
  userName: String
  userMail: String
  publicationDateOfComponent: String
  volume: String
  authorOfComponent: String
  titleOfComponent: String
  pagination: String
}

enum PeriodicaArticleOrderStatus {
  OK
  ERROR_UNAUTHORIZED_USER
  ERROR_AGENCY_NOT_SUBSCRIBED
  ERROR_INVALID_PICKUP_BRANCH
  ERROR_PID_NOT_RESERVABLE
}

type PeriodicaArticleOrderResponse {
  status: PeriodicaArticleOrderStatus!
}

type Recommendation {
  work: Work!
  manifestation: WorkManifestation!
  reader: String
  value: Float
}

type ReviewInfomedia {
  author: String!
  date: String!
  media: String!
  rating: String!
  reference: [InfomediaReference]
}

type ReviewExternalMedia {
  author: String!
  date: String!
  media: String!
  rating: String!
  url: String!
  alternateUrl: String
}

type ReviewMatVurd {
  author: String!
  date: String!
  all: [TextWithWork!]!
  about: [TextWithWork!]!
  description: [TextWithWork!]!
  evaluation: [TextWithWork!]!
  other: [TextWithWork!]!
}

type TextWithWork {
  name: String! @deprecated(reason: \\"Use heading instead\\")
  heading: String!

  \\"\\"\\"A piece of text mentioning a work at the end.\\"\\"\\"
  text: String!

  \\"\\"\\"
  The work the text is refering to. When work is null, the text does not refer to a work.
  \\"\\"\\"
  work: Work
}

union Review = ReviewInfomedia | ReviewExternalMedia | ReviewMatVurd

\\"\\"\\"An integer in the range from 1 to 100\\"\\"\\"
scalar PaginationLimit

\\"\\"\\"
Using dayjs to format dates and support localization. https://day.js.org/docs/en/display/format
\\"\\"\\"
scalar CustomDateFormat

\\"\\"\\"The supported fields to query\\"\\"\\"
input SearchQuery {
  \\"\\"\\"
  Search for title, creator, subject or a combination.
  This is typically used where a single search box is desired.
  \\"\\"\\"
  all: String

  \\"\\"\\"Search for creator\\"\\"\\"
  creator: String

  \\"\\"\\"Search for specific subject\\"\\"\\"
  subject: String

  \\"\\"\\"Search for specific title\\"\\"\\"
  title: String
}

\\"\\"\\"The supported facet fields\\"\\"\\"
enum FacetField {
  workType
  language
  materialType
  fictiveCharacter
  genre
  audience
  accessType
  fictionNonfiction
  subject
  creator
}

\\"\\"\\"Search Filters\\"\\"\\"
input SearchFilters {
  accessType: [String!]
  audience: [String!]
  creator: [String!]
  fictionNonfiction: [String!]
  fictiveCharacter: [String!]
  genre: [String!]
  language: [String!]
  materialType: [String!]
  subject: [String!]
  workType: [String!]
}

\\"\\"\\"A facet value consists of a term and a count.\\"\\"\\"
type FacetValue {
  \\"\\"\\"Use the key when applying filters\\"\\"\\"
  key: String!

  \\"\\"\\"A value of a facet field\\"\\"\\"
  term: String!

  \\"\\"\\"The count of the term for a facet field\\"\\"\\"
  count: Int
}

\\"\\"\\"The result for a specific facet\\"\\"\\"
type FacetResult {
  \\"\\"\\"The name of the facet.\\"\\"\\"
  name: String!

  \\"\\"\\"The values of thie facet result\\"\\"\\"
  values(limit: Int!): [FacetValue!]!
}

\\"\\"\\"The simple search response\\"\\"\\"
type SearchResponse {
  \\"\\"\\"Total number of works found. May be used for pagination.\\"\\"\\"
  hitcount: Int!

  \\"\\"\\"
  The works matching the given search query. Use offset and limit for pagination.
  \\"\\"\\"
  works(offset: Int!, limit: PaginationLimit!): [Work!]!

  \\"\\"\\"
  Make sure only to fetch this when needed
  This may take seconds to complete
  \\"\\"\\"
  facets(facets: [FacetField!]!): [FacetResult!]!
}

type Series {
  part: String
  title: String
  works: [Work!]!
}

type Subject {
  type: String
  value: String!
}

union SuggestRow = Creator | Subject | Work

type SuggestResponse {
  result: [SuggestRow!]!
}

enum WorkType {
  analysis
  article
  bookdescription
  game
  literature
  map
  movie
  music
  none
  periodica
  portrait
  review
  sheetmusic
  track
}

type MaterialType {
  materialType: String!
  cover: Cover!
  localizations: Localizations
  manifestations: [WorkManifestation!]!
}

type Work {
  title: String
  fullTitle: String
  description: String
  creators: [Creator!]!
  cover: Cover!
  id: String!
  manifestations: [WorkManifestation!]!
  materialTypes: [MaterialType!]!
  path: [String!]!
  reviews: [Review!]!
  series: Series
  subjects: [Subject!]!
  workTypes: [WorkType!]!
}

type Shelf {
  prefix: String
  shelfmark: String
}

type HostPublication {
  title: String!
  details: String!
}

type WorkManifestation {
  content: [String!]
  cover: Cover!
  creators: [Creator!]!
  datePublished(locale: String, format: String): CustomDateFormat!
  description: String!
  dk5: [DK5!]!
  edition: String!
  fullTitle: String!

  \\"\\"\\"
  Where this manifestation is published. For instance, in which magazine an article is published.
  \\"\\"\\"
  hostPublication: HostPublication
  hostPublicationPid: String
  isbn: String
  language: [String!]!
  materialType: String!
  notes: [String!]!
  onlineAccess: [OnlineAccess!]!
  originals: [String!]!
  originalTitle: String
  physicalDescription: String!
  pid: String!
  publisher: [String!]!
  shelf: Shelf
  title: String
  recommendations(limit: Int): [Recommendation]!
  admin: AdminData
  inLanguage: String
  usedLanguage: [String]
  physicalDescriptionArticles: String
  volume: String
}
"
`;

exports[`limited access to root fields 1`] = `
"type Query {
  help(q: String!, language: LanguageCode): HelpResponse
}

type HelpRow {
  nid: Int!
  group: String!
  orgTitle: String!
  title: String!
  body: String!
}

type HelpResponse {
  result: [HelpRow!]!
}

enum LanguageCode {
  da
  en
}
"
`;

exports[`remove all fields by type 1`] = `
"type AdminData {
  creationDate: String
  requestButton: Boolean
}

type Availability {
  willLend: Boolean
  expectedDelivery: String
  orderPossible: Boolean
  orderPossibleReason: String
}

enum OrderPossibleReason {
  OWNED_ACCEPTED
  NOT_OWNED_ILL_LOC
  OWNED_WRONG_MEDIUMTYPE
  NOT_OWNED_WRONG_ILL_MEDIUMTYPE
  NOT_OWNED_NO_ILL_LOC
  OWNED_OWN_CATALOGUE
  NOT_OWNED_ACCEPTED_BY_CONSORTIA
}

type CheckOrderPolicy {
  lookUpUrl: String
  orderPossible: Boolean
  orderPossibleReason: OrderPossibleReason
}

type Creator {
  functionCode: String!
  functionSingular: String!
  functionPlural: String!
  name: String!
  type: String!
  description: String!
  imageUrl: String
}

type DK5 {
  searchCode: String!
  searchString: String!
  value: String!
}

type Query {
  manifestation(pid: String!): WorkManifestation!
}

type Localizations {
  count: Int
  agencies: [holdingAgency]
}

type holdingAgency {
  agencyId: String
  holdingItems: [holdingsItem]
}

type holdingsItem {
  localizationPid: String
  codes: String
  localIdentifier: String
}

type UrlReference {
  url: String!
  origin: String!
  note: String!
  accessType: String
}

type InfomediaReference {
  infomediaId: String!
  pid: String!
  error: String
}

type WebArchive {
  type: String!
  url: String!
  pid: String!
}

type DigitalCopy {
  issn: String!
}

union OnlineAccess = UrlReference | InfomediaReference | WebArchive | DigitalCopy

type Recommendation {
  work: Work!
  manifestation: WorkManifestation!
  reader: String
  value: Float
}

type ReviewInfomedia {
  author: String!
  date: String!
  media: String!
  rating: String!
  reference: [InfomediaReference]
}

type ReviewExternalMedia {
  author: String!
  date: String!
  media: String!
  rating: String!
  url: String!
  alternateUrl: String
}

type ReviewMatVurd {
  author: String!
  date: String!
  all: [TextWithWork!]!
  about: [TextWithWork!]!
  description: [TextWithWork!]!
  evaluation: [TextWithWork!]!
  other: [TextWithWork!]!
}

type TextWithWork {
  name: String! @deprecated(reason: \\"Use heading instead\\")
  heading: String!

  \\"\\"\\"A piece of text mentioning a work at the end.\\"\\"\\"
  text: String!

  \\"\\"\\"
  The work the text is refering to. When work is null, the text does not refer to a work.
  \\"\\"\\"
  work: Work
}

union Review = ReviewInfomedia | ReviewExternalMedia | ReviewMatVurd

\\"\\"\\"
Using dayjs to format dates and support localization. https://day.js.org/docs/en/display/format
\\"\\"\\"
scalar CustomDateFormat

type SEO {
  title: String!
  description: String!
}

type Series {
  part: String
  title: String
  works: [Work!]!
}

type Subject {
  type: String
  value: String!
}

enum WorkType {
  analysis
  article
  bookdescription
  game
  literature
  map
  movie
  music
  none
  periodica
  portrait
  review
  sheetmusic
  track
}

type MaterialType {
  materialType: String!
  localizations: Localizations
  manifestations: [WorkManifestation!]!
}

type Work {
  title: String
  fullTitle: String
  description: String
  creators: [Creator!]!
  id: String!
  manifestations: [WorkManifestation!]!
  materialTypes: [MaterialType!]!
  path: [String!]!
  reviews: [Review!]!
  series: Series
  seo: SEO!
  subjects: [Subject!]!
  workTypes: [WorkType!]!
}

type Shelf {
  prefix: String
  shelfmark: String
}

type HostPublication {
  title: String!
  details: String!
}

type WorkManifestation {
  content: [String!]
  creators: [Creator!]!
  datePublished(locale: String, format: String): CustomDateFormat!
  description: String!
  dk5: [DK5!]!
  edition: String!
  fullTitle: String!

  \\"\\"\\"
  Where this manifestation is published. For instance, in which magazine an article is published.
  \\"\\"\\"
  hostPublication: HostPublication
  hostPublicationPid: String
  isbn: String
  language: [String!]!
  materialType: String!
  notes: [String!]!
  onlineAccess: [OnlineAccess!]!
  originals: [String!]!
  originalTitle: String
  physicalDescription: String!
  pid: String!
  publisher: [String!]!
  shelf: Shelf
  title: String
  recommendations(limit: Int): [Recommendation]!
  availability: Availability
  checkorder(pickupBranch: String!): CheckOrderPolicy
  admin: AdminData
  inLanguage: String
  usedLanguage: [String]
  physicalDescriptionArticles: String
  volume: String
}
"
`;
