// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`complete access to whole schema 1`] = `
"directive @fallback on ENUM_VALUE

\\"\\"\\"Complexity directive to evaluate query complexity \\"\\"\\"
directive @complexity(value: Int!, multipliers: [String!]) on FIELD_DEFINITION

\\"\\"\\"
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
\\"\\"\\"
scalar DateTime

enum AccessTypeCodeEnum {
  PHYSICAL
  ONLINE
  UNKNOWN
}

enum AccessUrlTypeEnum {
  IMAGE
  OTHER
  RESOURCE
  SAMPLE
  TABLE_OF_CONTENTS
  THUMBNAIL
}

enum LinkStatusEnum {
  BROKEN
  GONE
  INVALID
  OK
}

type AccessType {
  display: String!
  code: AccessTypeCodeEnum!
}

type Ereol {
  \\"\\"\\"
  The origin, e.g. \\"Ereolen\\" or \\"Ereolen Go\\"
  \\"\\"\\"
  origin: String!

  \\"\\"\\"The url where manifestation is located\\"\\"\\"
  url: String!

  \\"\\"\\"
  Is this a manifestation that always can be loaned on ereolen.dk even if you've run out of loans this month
  \\"\\"\\"
  canAlwaysBeLoaned: Boolean!

  \\"\\"\\"Notes for the resource\\"\\"\\"
  note: String
}

type AccessUrl {
  \\"\\"\\"
  The origin, e.g. \\"DBC Webarkiv\\"
  \\"\\"\\"
  origin: String!

  \\"\\"\\"Description/type of URL\\"\\"\\"
  urlText: String

  \\"\\"\\"The url where manifestation is located\\"\\"\\"
  url: String!

  \\"\\"\\"Notes for the resource\\"\\"\\"
  note: String

  \\"\\"\\"If the resource requires login\\"\\"\\"
  loginRequired: Boolean!

  \\"\\"\\"The type of content that can be found at this URL\\"\\"\\"
  type: AccessUrlTypeEnum

  \\"\\"\\"Status from linkcheck\\"\\"\\"
  status: LinkStatusEnum!
}

type InterLibraryLoan {
  \\"\\"\\"Is true when manifestation can be borrowed via ill\\"\\"\\"
  loanIsPossible: Boolean!

  \\"\\"\\"Is newly added - nice to know if there are no localizations\\"\\"\\"
  accessNew: Boolean!
}

type InfomediaService {
  \\"\\"\\"
  Infomedia ID which can be used to fetch article through Infomedia Service
  \\"\\"\\"
  id: String!
}

type DigitalArticleService {
  \\"\\"\\"
  Issn which can be used to order article through Digital Article Service
  \\"\\"\\"
  issn: String!
}

union AccessUnion = AccessUrl | Ereol | InterLibraryLoan | InfomediaService | DigitalArticleService

type AdminData {
  creationDate: String
  requestButton: Boolean
}

type Agency {
  id: String!
  name: String
  type: AgencyTypeEnum!
  numberOfBranches: Int!
  url: String!
  user: AgencyUser
  branches: [Branch!]!
  hitcount: Int!
  borrowerStatus: BorrowerStatus
  result: [Branch!]!
  agencyUrl: String
}

type AgencyUser {
  name: String
  mail: String
  address: String
  postalCode: String
  country: String
  blocked: Boolean!
}

type BibdkMutate {
  culr: BibdkCulrMutationFields!
}

type BibdkQuery {
  culr: BibdkCulrQueryFields!
}

type Mutation {
  bibdk: BibdkMutate!
  culr: CulrMutate!
  elba: ElbaServices!
  holdingsItems: HoldingsItems!

  \\"\\"\\"
  Order digital article through Digital Article Service
  Link to article is sent via email
  \\"\\"\\"
  digitalArticleService(
    \\"\\"\\"The pid of an article or periodica\\"\\"\\"
    pid: String!
    publicationDateOfComponent: String
    volume: String
    authorOfComponent: String
    titleOfComponent: String
    pagination: String
  ): DigitalArticleServiceResponse!

  \\"\\"\\"Netpunkt related mutations\\"\\"\\"
  netpunkt: Netpunkt!
  submitOrder(input: SubmitOrderInput!, dryRun: Boolean): SubmitOrder
  submitMultipleOrders(input: SubmitMultipleOrdersInput!, dryRun: Boolean): SubmitMultipleOrders
  data_collect(input: DataCollectInput!): String!
  deleteOrder(
    \\"\\"\\"id of the order to be deleted\\"\\"\\"
    orderId: String!

    \\"\\"\\"The agency where the order is placed.\\"\\"\\"
    agencyId: String!

    \\"\\"\\"
    If this is true, the order is not actually deleted (is useful when generating examples).
    \\"\\"\\"
    dryRun: Boolean
  ): DeleteOrderResponse
  renewLoan(
    \\"\\"\\"id of the loan to be renewed\\"\\"\\"
    loanId: String!

    \\"\\"\\"The agency where the loan is to be renewed.\\"\\"\\"
    agencyId: String!

    \\"\\"\\"
    If this is true, the loan is not actually renewed (is useful when generating examples).
    \\"\\"\\"
    dryRun: Boolean
  ): RenewLoanResponse
  submitSession(input: SessionInput!): String!
  deleteSession: String!
  test: TestMutation
  users: UserMutations!
}

type Query {
  bibdk: BibdkQuery!
  bibevents(input: BibEventsQueryInput): Bibevents!

  \\"\\"\\"All indexes in complex search\\"\\"\\"
  complexSearchIndexes: [ComplexSearchIndex!]
  culr: CulrQuery!
  debug: Debug

  \\"\\"\\"Field for presenting bibliographic records in MARC format\\"\\"\\"
  marc: Marc!
  mood: MoodQueries!
  ors: OrsQuery!

  \\"\\"\\"Access to various types of recommendations.\\"\\"\\"
  recommendations: Recommendations!
  manifestation(pid: String, faust: String): Manifestation
  manifestations(faust: [String!], pid: [String!]): [Manifestation]!
  monitor(name: String!): String!
  work(id: String, faust: String, pid: String, oclc: String, language: LanguageCodeEnum): Work
  works(id: [String!], faust: [String!], pid: [String!], oclc: [String!], language: LanguageCodeEnum): [Work]!
  search(q: SearchQueryInput!, filters: SearchFiltersInput, search_exact: Boolean): SearchResponse!
  complexSearch(cql: String!, filters: ComplexSearchFiltersInput, facets: ComplexSearchFacetsInput): ComplexSearchResponse!
  linkCheck: LinkCheckService!

  \\"\\"\\"
  ComplexFacets is for internal use only - there is no limit on how many facets are allowed to extract
  \\"\\"\\"
  complexFacets(cql: String!, filters: ComplexSearchFiltersInput, facets: ComplexSearchFacetsInput): ComplexFacetResponse!
  localSuggest(
    \\"\\"\\"The query to get suggestions from\\"\\"\\"
    q: String!

    \\"\\"\\"suggest type to include in result\\"\\"\\"
    suggestType: [SuggestionTypeEnum!]

    \\"\\"\\"Number of items to return\\"\\"\\"
    limit: Int

    \\"\\"\\"Id of branch to filter by\\"\\"\\"
    branchId: String
  ): LocalSuggestResponse!
  complexSuggest(
    \\"\\"\\"The query to get suggestions for\\"\\"\\"
    q: String!

    \\"\\"\\"the type of index to get suggestions from\\"\\"\\"
    type: ComplexSuggestionTypeEnum!
  ): ComplexSuggestResponse!
  suggest(
    workType: WorkTypeEnum

    \\"\\"\\"The query to get suggestions from\\"\\"\\"
    q: String!

    \\"\\"\\"suggest type to include in result\\"\\"\\"
    suggestType: SuggestionTypeEnum

    \\"\\"\\"suggest types to include in result\\"\\"\\"
    suggestTypes: [SuggestionTypeEnum!]

    \\"\\"\\"Number of items to return\\"\\"\\"
    limit: Int
  ): SuggestResponse!

  \\"\\"\\"Get recommendations\\"\\"\\"
  recommend(id: String, pid: String, faust: String, limit: Int, branchId: String): RecommendationResponse!
  help(q: String!, language: LanguageCodeEnum): HelpResponse
  branches(agencyid: String, branchId: String, language: LanguageCodeEnum, q: String, offset: Int, limit: PaginationLimitScalar, statuses: [LibraryStatusEnum], bibdkExcludeBranches: Boolean, agencyTypes: [AgencyTypeEnum!]): BranchResult!
  deleteOrder(orderId: String!, orderType: OrderTypeEnum!): SubmitOrder
  infomedia(id: String!): InfomediaResponse!
  session: Session
  howru: String
  localizations(pids: [String!]!): Localizations

  \\"\\"\\"
  localizationsWithHoldings parses ALL localizations and ALL detailedholdings. Returns agencies with holdings on shelf
  \\"\\"\\"
  localizationsWithHoldings(pids: [String!]!, limit: Int, offset: Int, availabilityTypes: [AvailabilityEnum!], language: LanguageCodeEnum, status: LibraryStatusEnum, bibdkExcludeBranches: Boolean): Localizations
  refWorks(pids: [String!]!): String!
  ris(pids: [String!]!): String!
  relatedSubjects(q: [String!]!, limit: Int): [String!] @deprecated(reason: \\"Use 'Recommendations.subjects' instead expires: 01/03-2025\\")
  inspiration(limit: Int): Inspiration!
  orderStatus(orderIds: [String!]!): [OrderStatusResponse]!
  series(seriesId: String!): Series
  stats: Stats
  test: Test
  universe(key: String, universeId: String): Universe
  user: User

  \\"\\"\\"Returns null if authorization fails.\\"\\"\\"
  vip: VipResponse!
}

enum GetAccountsTypeEnum {
  \\"\\"\\"
  Forces a getAccountsByLocalId request, a localId and agencyId is used as credentials
  \\"\\"\\"
  LOCAL

  \\"\\"\\"
  Forces a getAccountsByGlobalId request, a cpr number is used as credentials
  \\"\\"\\"
  GLOBAL
}

enum CreateAccountStatusEnum {
  \\"\\"\\"Account was successfully created\\"\\"\\"
  OK

  \\"\\"\\"Account was not created - Some unknown error occured\\"\\"\\"
  ERROR

  \\"\\"\\"A provided token does not have a valid CPR\\"\\"\\"
  ERROR_INVALID_CPR

  \\"\\"\\"Agency for provided token is not an FFU library\\"\\"\\"
  ERROR_INVALID_AGENCY

  \\"\\"\\"Token is not authenticated\\"\\"\\"
  ERROR_UNAUTHENTICATED_TOKEN

  \\"\\"\\"Credentials for the underlying service could not be authorized\\"\\"\\"
  ERROR_NO_AUTHORISATION

  \\"\\"\\"AgencyId input is out of permission scope\\"\\"\\"
  ERROR_AGENCYID_NOT_PERMITTED

  \\"\\"\\"Account already exist\\"\\"\\"
  ERROR_USER_ALREADY_CREATED

  \\"\\"\\"LocalId is already in use\\"\\"\\"
  ERROR_LOCALID_NOT_UNIQUE

  \\"\\"\\"There is a mismatch between the provided tokens CPR credentials\\"\\"\\"
  ERROR_CPR_MISMATCH

  \\"\\"\\"Some provided token has missing credentials\\"\\"\\"
  ERROR_INVALID_PROVIDED_TOKEN
}

enum DeleteAccountStatusEnum {
  \\"\\"\\"Account was successfully deleted\\"\\"\\"
  OK

  \\"\\"\\"Account was not deleted - Some unknown error occured\\"\\"\\"
  ERROR

  \\"\\"\\"A provided token does not have a valid CPR\\"\\"\\"
  ERROR_INVALID_CPR

  \\"\\"\\"Agency for provided token is not an FFU library\\"\\"\\"
  ERROR_INVALID_AGENCY

  \\"\\"\\"Token is not authenticated\\"\\"\\"
  ERROR_UNAUTHENTICATED_TOKEN

  \\"\\"\\"Credentials for the underlying service could not be authorized\\"\\"\\"
  ERROR_NO_AUTHORISATION

  \\"\\"\\"AgencyId input is out of permission scope\\"\\"\\"
  ERROR_AGENCYID_NOT_PERMITTED

  \\"\\"\\"The account which was requested for deleting does not exist\\"\\"\\"
  ERROR_ACCOUNT_DOES_NOT_EXIST
}

type CreateAccountResponse {
  status: CreateAccountStatusEnum!
}

type DeleteAccountResponse {
  status: DeleteAccountStatusEnum!
}

type CulrAccount {
  agencyId: String!
  userIdType: String!
  userIdValue: String!
}

type BibdkCulrAccountResponse {
  accounts: [CulrAccount!]!
  municipalityNo: String
  guid: String
}

input DeleteAccountInput {
  \\"\\"\\"The agencyId\\"\\"\\"
  agencyId: String!
}

input CreateAccountTokensInput {
  \\"\\"\\"
  FFU accessToken containing credentials for the account which the user will be associated with 
  \\"\\"\\"
  ffu: String!

  \\"\\"\\"
  Authenticated accessToken containing CPR credentials for the users main/public account. Only needed for Auth Bearer header CPR match.
  \\"\\"\\"
  folk: String
}

input CreateAccountInput {
  \\"\\"\\"
  Tokens containing the credentials to create/associate a new user account
  \\"\\"\\"
  tokens: CreateAccountTokensInput!
}

input GetAccountsInput {
  \\"\\"\\"
  Authenticated accessToken containing globalId, If none provided auth token is used
  \\"\\"\\"
  accessToken: String!
}

type BibdkCulrMutationFields {
  \\"\\"\\"Add an agency to a CPR validated user\\"\\"\\"
  createAccount(
    input: CreateAccountInput!

    \\"\\"\\"
    If dryRun is set to true, the actual service is never called
    Used for testing
    \\"\\"\\"
    dryRun: Boolean
  ): CreateAccountResponse!

  \\"\\"\\"Remove an agency from a user\\"\\"\\"
  deleteAccount(
    input: DeleteAccountInput!

    \\"\\"\\"
    If dryRun is set to true, the actual service is never called
    Used for testing
    \\"\\"\\"
    dryRun: Boolean
  ): DeleteAccountResponse!
}

type BibdkCulrQueryFields {
  \\"\\"\\"Get all user accounts within the given agency by a global id\\"\\"\\"
  getAccounts(
    input: GetAccountsInput

    \\"\\"\\"Force a specific dataloader\\"\\"\\"
    type: GetAccountsTypeEnum
  ): BibdkCulrAccountResponse
}

type BibEventFacet {
  value: String
  count: Int
}

type BibEventTicketCategory {
  uuid: String
  title: String
  price: Float
  currency: String
}

type BibEventTickets {
  url: String
  categories: [BibEventTicketCategory!]
}

type BibEventImage {
  url: String
  darkMuted: String
  darkVibrant: String
  lightMuted: String
  lightVibrant: String
  muted: String
  vibrant: String
  blurHash: String
}

type BibeventDateTime {
  start: String
  end: String
}

enum BibEventSortDirectionEnum {
  ASC
  DESC
}

enum BibEventSortFieldEnum {
  TITLE
  CREATED_AT
  UPDATED_AT
  STARTTIME
}

input BibEventSortInput {
  field: BibEventSortFieldEnum!
  direction: BibEventSortDirectionEnum
}

type BibEvent {
  uuid: String
  title: String
  description: String
  url: String
  createdAt: String
  updatedAt: String
  ticketManagerRelevance: Boolean
  state: String
  branches: [String!]
  addressCity: String
  tags: [String!]
  body: String
  branchId: String
  generatedAudience: [String!]
  generatedCategory: [String!]
  generatedSubCategories: [String!]
  occurs: [String!]
  dateTime: BibeventDateTime
  image: BibEventImage
  ticket: BibEventTickets
  price: String
}

type BibeventFacets {
  occurs: [BibEventFacet!]
  state: [BibEventFacet!]
  branches: [BibEventFacet!]
  tags: [BibEventFacet!]
  addressCity: [BibEventFacet!]
  branchId: [BibEventFacet!]
  generatedAudience: [BibEventFacet!]
  generatedCategory: [BibEventFacet!]
  generatedSubCategories: [BibEventFacet!]
  price: [BibEventFacet!]
}

type Bibevents {
  hitcount: Int!
  events: [BibEvent]!
  facets: BibeventFacets!
}

input BibEventsQueryInput {
  offset: Int
  limit: Int
  q: String
  occurs: [String!]
  state: [String!]
  branches: [String!]
  tags: [String!]
  addressCity: [String!]
  branchId: [String!]
  generatedAudience: [String!]
  generatedCategory: [String!]
  generatedSubCategories: [String!]
  sort: BibEventSortInput
  uuids: [String!]
  price: [String!]
}

type Category {
  title: String!
  result(limit: Int): [CategoryResult!]!
}

type CategoryResult {
  work: Work!
  manifestation: Manifestation!
}

type Categories {
  title: String!
  type: CategoryFiltersEnum!
  subCategories: [Category!]!
}

enum OrderPossibleReasonEnum {
  OWNED_ACCEPTED
  NOT_OWNED_ILL_LOC
  OWNED_WRONG_MEDIUM_TYPE
  NOT_OWNED_WRONG_ILL_MEDIUM_TYPE
  NOT_OWNED_NO_ILL_LOC
  OWNED_OWN_CATALOGUE
  NOT_OWNED_ACCEPTED_BY_CONSORTIA
  INTERNAL_ERROR
}

type CheckOrderPolicy {
  lookUpUrls: [String!]!
  lookUpUrl: String
  orderPossible: Boolean
  orderPossibleReason: OrderPossibleReasonEnum
}

type HoldingsResponse {
  \\"\\"\\"
  Represents the overall reservability status across all items according to the Cicero API (booking allowed).
  \\"\\"\\"
  reservable: Boolean
  status: HoldingsResponseStatusEnum!

  \\"\\"\\"
  Expected return date for the material at agency level
  
  Is only set if no branches in agency have the material ON_SHELF
  \\"\\"\\"
  expectedAgencyReturnDate: String

  \\"\\"\\"Expected return date for the material at branch level\\"\\"\\"
  expectedBranchReturnDate: String

  \\"\\"\\"Items on the shelf at the branch (actual copies)\\"\\"\\"
  items: [HoldingsItem!]

  \\"\\"\\"
  A list of items that belong to branches that are not visible or accessible in the system.
  These branches, such as book storage facilities or off-site repositories, are not listed
  for end-users, but their items can still be requested or accessed.
  \\"\\"\\"
  unlistedBranchItems: [HoldingsItem!]

  \\"\\"\\"Url to local site, where holding details may be found\\"\\"\\"
  lookupUrl: String

  \\"\\"\\"Urls to local site - one for each identifier\\"\\"\\"
  lookupUrls: [String!]

  \\"\\"\\"
  The number of items owned by the agency.
  Returns null if it is unknown
  \\"\\"\\"
  ownedByAgency: Int
}

type HoldingsItem {
  \\"\\"\\"
  Indicates whether the item can be reserved according to the Cicero API (booking allowed).
  \\"\\"\\"
  reservable: Boolean

  \\"\\"\\"The manifestation of the holdingsitem\\"\\"\\"
  manifestation: Manifestation
  branchName: String
  status: ItemStatusEnum
  department: String
  location: String
  subLocation: String
  loanRestriction: HoldingsItemLoanRestrictionEnum
}

type ComplexSearchIndex {
  \\"\\"\\"The name of a Complex Search index\\"\\"\\"
  index: String!

  \\"\\"\\"Can be used for searching\\"\\"\\"
  search: Boolean!

  \\"\\"\\"Can be used for faceting\\"\\"\\"
  facet: Boolean!

  \\"\\"\\"Can be used for sorting\\"\\"\\"
  sort: Boolean!

  \\"\\"\\"Aliases for this index\\"\\"\\"
  aliases: [String!]
}

\\"\\"\\"Search Filters\\"\\"\\"
input ComplexSearchFiltersInput {
  \\"\\"\\"BranchId. \\"\\"\\"
  branchId: [String!]

  \\"\\"\\"Overall location in library (eg. Voksne).\\"\\"\\"
  department: [String!]

  \\"\\"\\"Where is the book physically located  (eg. skønlitteratur).\\"\\"\\"
  location: [String!]

  \\"\\"\\"More specific location (eg. Fantasy).\\"\\"\\"
  sublocation: [String!]

  \\"\\"\\"Onloan or OnShelf.\\"\\"\\"
  status: [HoldingsStatusEnum!]

  \\"\\"\\"Id of agency.\\"\\"\\"
  agencyId: [String!]

  \\"\\"\\"Name of the branch.\\"\\"\\"
  branch: [String!]

  \\"\\"\\"Local id of the item.\\"\\"\\"
  itemId: [String!]

  \\"\\"\\"Id of publishing issue.\\"\\"\\"
  issueId: [String!]

  \\"\\"\\"Date of first accession\\"\\"\\"
  firstAccessionDate: String
}

enum SortOrderEnum {
  ASC
  DESC
}

input SortInput {
  index: String!
  order: SortOrderEnum!
}

\\"\\"\\"The supported facet fields\\"\\"\\"
enum ComplexSearchFacetsEnum {
  AGES
  CATALOGUECODE
  CONTRIBUTOR
  CONTRIBUTORFUNCTION
  CREATOR
  CREATORCONTRIBUTOR
  CREATORCONTRIBUTORFUNCTION
  CREATORFUNCTION
  FICTIONALCHARACTER
  FILMNATIONALITY
  GAMEPLATFORM
  GENERALAUDIENCE
  GENERALMATERIALTYPE
  GENREANDFORM
  ISSUE
  LANGUAGE
  LIBRARYRECOMMENDATION
  MAINLANGUAGE
  MUSICALENSEMBLEORCAST
  PLAYERS
  PRIMARYTARGET
  SPECIFICMATERIALTYPE
  SPOKENLANGUAGE
  SUBTITLELANGUAGE
  TYPEOFSCORE
  SUBJECT
  HOSTPUBLICATION
  SERIES
  MEDIACOUNCILAGERESTRICTION
  ACCESSTYPE
  MOOD
  NARRATIVETECHNIQUE
  PEGI
  SETTING
  LIX
  LET
  PUBLICATIONYEAR
  SOURCE
  INSTRUMENT
  CHOIRTYPE
  CHAMBERMUSICTYPE
}

\\"\\"\\"The facets to ask for\\"\\"\\"
input ComplexSearchFacetsInput {
  facetLimit: Int!
  facets: [ComplexSearchFacetsEnum!]
}

\\"\\"\\"A Facet value in response\\"\\"\\"
type ComplexSearchFacetValue {
  key: String!
  score: Int!
  traceId: String
}

\\"\\"\\"The complete facet in response\\"\\"\\"
type ComplexSearchFacetResponse {
  name: String
  values: [ComplexSearchFacetValue!]
}

type ComplexFacetResponse {
  hitcount: Int!
  facets: [ComplexSearchFacetResponse!]
}

\\"\\"\\"The search response\\"\\"\\"
type ComplexSearchResponse {
  \\"\\"\\"Total number of works found. May be used for pagination.\\"\\"\\"
  hitcount: Int!

  \\"\\"\\"Facets for this response\\"\\"\\"
  facets: [ComplexSearchFacetResponse!]

  \\"\\"\\"
  The works matching the given search query. Use offset and limit for pagination.
  \\"\\"\\"
  works(offset: Int!, limit: PaginationLimitScalar!, sort: [SortInput!]): [Work!]!

  \\"\\"\\"Error message, for instance if CQL is invalid\\"\\"\\"
  errorMessage: String
}

type CoverDetails {
  url: String
  width: Int
  height: Int
}

type Cover {
  detail_117: String
  detail_207: String
  detail_42: String
  detail_500: String
  thumbnail: String
  detail: String
  origin: String
  xSmall: CoverDetails
  small: CoverDetails
  medium: CoverDetails
  large: CoverDetails
}

type Translation {
  \\"\\"\\"
  Translation in plural form, e.g. forfattere, komponister, instruktører etc.
  \\"\\"\\"
  plural: String!

  \\"\\"\\"Translation in singular form, e.g. forfatter, komponist, instruktør\\"\\"\\"
  singular: String!
}

type Role {
  \\"\\"\\"
  The code for the type of creator or contributor, e.g. 'aut' for author, 'ill' for illustrator etc
  \\"\\"\\"
  functionCode: String!

  \\"\\"\\"
  The type of creator/contributor as text in singular and plural in Danish, e.g. forfatter/forfattere, komponist/komponister etc
  \\"\\"\\"
  function: Translation!
}

type Person implements SubjectInterface & CreatorInterface {
  \\"\\"\\"The person's whole name in normal order\\"\\"\\"
  display: String!

  \\"\\"\\"The person's full name inverted\\"\\"\\"
  nameSort: String!

  \\"\\"\\"First name of the person\\"\\"\\"
  firstName: String

  \\"\\"\\"Last name of the person\\"\\"\\"
  lastName: String

  \\"\\"\\"Birth year of the person\\"\\"\\"
  birthYear: String

  \\"\\"\\"A roman numeral added to the person, like Christian IV\\"\\"\\"
  romanNumeral: String

  \\"\\"\\"Added information about the person, like Henri, konge af Frankrig\\"\\"\\"
  attributeToName: String

  \\"\\"\\"Creator aliases, creators behind used pseudonym\\"\\"\\"
  aliases: [Person!]!

  \\"\\"\\"
  A list of which kinds of contributions this person made to this creation
  \\"\\"\\"
  roles: [Role!]!
  type: SubjectTypeEnum!
  language: Language
  local: Boolean
}

type Corporation implements SubjectInterface & CreatorInterface {
  \\"\\"\\"The full corporation or conference name\\"\\"\\"
  display: String!

  \\"\\"\\"The full corporation or conference name to sort after\\"\\"\\"
  nameSort: String!

  \\"\\"\\"Main corporation or conference\\"\\"\\"
  main: String

  \\"\\"\\"Sub corporation or conference/meeting\\"\\"\\"
  sub: String

  \\"\\"\\"
  Location or jurisdiction of the corporation or conference, like Københavns Kommune, Statistisk Kontor
  \\"\\"\\"
  location: String

  \\"\\"\\"Year of the conference\\"\\"\\"
  year: String

  \\"\\"\\"Number of the conference\\"\\"\\"
  number: String

  \\"\\"\\"
  Added information about the corporation, like M. Folmer Andersen (firma)
  \\"\\"\\"
  attributeToName: String

  \\"\\"\\"
  A list of which kinds of contributions this corporation made to this creation
  \\"\\"\\"
  roles: [Role!]!
  type: SubjectTypeEnum!
  language: Language
  local: Boolean
}

interface CreatorInterface {
  \\"\\"\\"Name of the creator\\"\\"\\"
  display: String!

  \\"\\"\\"Name of the creator which can be used to sort after \\"\\"\\"
  nameSort: String!

  \\"\\"\\"
  A list of which kinds of contributions this creator made to this creation
  \\"\\"\\"
  roles: [Role!]!
}

enum CulrResponseCodesEnum {
  OK_200
  NO_AUTHORISATION
  ACCOUNT_ALREADY_EXISTS
  TRANSACTION_ERROR
  ILLEGAL_ARGUMENT
  UNKNOWN_ERROR
  ACCOUNT_DOES_NOT_EXIST
  PROGRAM_ERROR
  COULD_NOT_AUTHENTICATE
}

enum GlobalUidTypesEnum {
  CICEROUID
  SYSTEMUID
  CPR
}

enum UserIdTypesEnum {
  LOCAL
  UNILOGIN
  CPR
}

input GlobalUIDInput {
  \\"\\"\\"The specific globally unique type.\\"\\"\\"
  uidType: GlobalUidTypesEnum!

  \\"\\"\\"The value of the globally unique type.\\"\\"\\"
  uidValue: String!
}

input LocalUIDInput {
  \\"\\"\\"Library number in the form of a 6-digit number.\\"\\"\\"
  agencyId: String!

  \\"\\"\\"User's identification at the given library.\\"\\"\\"
  userIdValue: String!
}

input UserIdValueAndTypeInput {
  \\"\\"\\"User's type.\\"\\"\\"
  userIdType: UserIdTypesEnum!

  \\"\\"\\"The value of the user's type.\\"\\"\\"
  userIdValue: String!
}

type Account {
  \\"\\"\\"AgencyId of the provider that created the given account.\\"\\"\\"
  provider: String

  \\"\\"\\"The type of the given account.\\"\\"\\"
  userIdType: UserIdTypesEnum

  \\"\\"\\"The value of the type.\\"\\"\\"
  userIdValue: String
}

type CulrResponseStatus {
  \\"\\"\\"Status code of the response.\\"\\"\\"
  code: CulrResponseCodesEnum

  \\"\\"\\"
  If the response is not OK200, this field may contain an explanation of any errors.
  \\"\\"\\"
  message: String
}

type CulrResponse {
  \\"\\"\\"
  Indicates if the given GUID text string exists in CULR. Only set if responding to a call of hasculraccount.
  \\"\\"\\"
  hasCulrAccount: Boolean

  \\"\\"\\"Status of the executed call.\\"\\"\\"
  responseStatus: CulrResponseStatus!
}

type CulrAccountResponse {
  \\"\\"\\"List of the user's accounts.\\"\\"\\"
  accounts: [Account]!

  \\"\\"\\"Municipality number if set on the user's patron.\\"\\"\\"
  municipalityNo: String

  \\"\\"\\"GUID associated with the user's patron if it exists.\\"\\"\\"
  guid: String

  \\"\\"\\"Status of the executed call.\\"\\"\\"
  responseStatus: CulrResponseStatus!
}

type CulrQuery {
  \\"\\"\\"
  Method to retrieve all accounts under the user's patron based on either CPR, CICEROUID, or SYSTEMUID.
  \\"\\"\\"
  getAccountsByGlobalId(
    \\"\\"\\"Globally unique user ID and type.\\"\\"\\"
    userCredentials: GlobalUIDInput!
  ): CulrAccountResponse!

  \\"\\"\\"
  Method to retrieve all accounts under the user's patron based on localId.
  \\"\\"\\"
  getAccountsByLocalId(
    \\"\\"\\"The user's agencyId and localId.\\"\\"\\"
    userCredentials: LocalUIDInput!
  ): CulrAccountResponse!

  \\"\\"\\"Method to validate whether a UUID GUID exists in CULR.\\"\\"\\"
  hasCulrAccount(
    \\"\\"\\"GUID text string to be checked.\\"\\"\\"
    guid: String!
  ): CulrResponse!

  \\"\\"\\"
  Method to retrieve an account from a provider, either using local ID or CPR number.
  \\"\\"\\"
  getAccountFromProvider(
    \\"\\"\\"The library where the given action is associated.\\"\\"\\"
    agencyId: String!

    \\"\\"\\"
    The user's type and value. For example, CPR and CPR number or LOCALID and LOCALID number.
    \\"\\"\\"
    userCredentials: UserIdValueAndTypeInput!
  ): CulrAccountResponse!
}

type CulrMutate {
  \\"\\"\\"
  Method to create a new account that can either be of local or global type (CPR, CICEROUID, or SYSTEMUID).
  \\"\\"\\"
  createAccount(
    \\"\\"\\"The library where the given action is associated.\\"\\"\\"
    agencyId: String!

    \\"\\"\\"
    The user's type and value. For example, CPR and CPR number or LOCALID and LOCALID number.
    \\"\\"\\"
    userCredentials: UserIdValueAndTypeInput!

    \\"\\"\\"Globally unique user ID and type.\\"\\"\\"
    globalUID: GlobalUIDInput

    \\"\\"\\"The user's 3-digit municipality number.\\"\\"\\"
    municipalityNo: String

    \\"\\"\\"If dryRun is set to true, the service will not be called.\\"\\"\\"
    dryRun: Boolean!
  ): CulrResponse!

  \\"\\"\\"
  Method to update an account, only supports updating the municipality number.
  \\"\\"\\"
  updateAccount(
    \\"\\"\\"The library where the given action is associated.\\"\\"\\"
    agencyId: String!

    \\"\\"\\"
    The user's type and value. For example, CPR and CPR number or LOCALID and LOCALID number.
    \\"\\"\\"
    userCredentials: UserIdValueAndTypeInput!

    \\"\\"\\"The user's 3-digit municipality number.\\"\\"\\"
    municipalityNo: String

    \\"\\"\\"If dryRun is set to true, the service will not be called.\\"\\"\\"
    dryRun: Boolean!
  ): CulrResponse!

  \\"\\"\\"
  Method to delete a user's account. If it is the user's last account, the patron will also be deactivated.
  \\"\\"\\"
  deleteAccount(
    \\"\\"\\"The library where the given action is associated.\\"\\"\\"
    agencyId: String!

    \\"\\"\\"
    The user's type and value. For example, CPR and CPR number or LOCALID and LOCALID number.
    \\"\\"\\"
    userCredentials: UserIdValueAndTypeInput!

    \\"\\"\\"If dryRun is set to true, the service will not be called.\\"\\"\\"
    dryRun: Boolean!
  ): CulrResponse!

  \\"\\"\\"Method to delete all accounts under a specific provider.\\"\\"\\"
  deleteAccountsFromProvider(
    \\"\\"\\"The library where the given action is associated.\\"\\"\\"
    agencyId: String!

    \\"\\"\\"If dryRun is set to true, the service will not be called.\\"\\"\\"
    dryRun: Boolean!
  ): CulrResponse!
}

type Complexity {
  value: Int!
  max: Int!
  class: String!
}

type Depth {
  value: Int!
  max: Int!
}

type Debug {
  complexity: Complexity!
  depth: Depth!
}

enum HoldingsResponseStatusEnum {
  \\"\\"\\"The material is on the shelf at this branch\\"\\"\\"
  ON_SHELF

  \\"\\"\\"
  The material is on the shelf at this branch, but is not for loan (available for in-house use only)
  \\"\\"\\"
  ON_SHELF_NOT_FOR_LOAN

  \\"\\"\\"The material is not on the shelf at this branch\\"\\"\\"
  NOT_ON_SHELF

  \\"\\"\\"The material is not owned by the agency\\"\\"\\"
  NOT_OWNED

  \\"\\"\\"The material is not found\\"\\"\\"
  UNKNOWN_MATERIAL

  \\"\\"\\"
  No status is given by the branch, hence we don't know if the material
  is on the shelf
  \\"\\"\\"
  UNKNOWN_STATUS
}

\\"\\"\\"Represents loan restrictions for an item\\"\\"\\"
enum HoldingsItemLoanRestrictionEnum {
  A
  B
  C
  D
  E
  F

  \\"\\"\\"
  Indicates that the material can only be loaned to the library's own users and is not available for interlibrary loan
  \\"\\"\\"
  G
}

type Branch {
  holdings(pids: [String]): HoldingsResponse

  \\"\\"\\"Whether this branch's agency supports borrowerCheck\\"\\"\\"
  borrowerCheck: Boolean!
  culrDataSync: Boolean!
  agencyName: String
  autoIll: AutomationParams!
  agencyId: String!

  \\"\\"\\"
  Some independent branches is collected under a pseudo agencyId, This agencyId is removed by FBI-API but instead stored in this field
  \\"\\"\\"
  _agencyId: String
  branchId: String!
  agencyType: AgencyTypeEnum!
  name: String!
  openingHours: String
  openingHoursUrl: String
  postalAddress: String
  postalCode: String
  userParameters: [UserParameter!]!
  orderPolicy(pid: String, pids: [String!]!): CheckOrderPolicy
  city: String
  pickupAllowed: Boolean!
  highlights: [Highlight!]!
  debug: MinisearchDebug
  infomediaAccess: Boolean!
  digitalCopyAccess: Boolean!
  userStatusUrl: String
  holdingStatus(pids: [String]): DetailedHoldings
  branchWebsiteUrl: String
  branchCatalogueUrl: String
  lookupUrl: String
  branchPhone: String
  branchEmail: String

  \\"\\"\\"branchType is type of library branch. \\"\\"\\"
  branchType: String!

  \\"\\"\\"Checks if the library temporarilyClosed\\"\\"\\"
  temporarilyClosed: Boolean!

  \\"\\"\\"If the library is temporarilyClosed, a message might be shown here\\"\\"\\"
  temporarilyClosedReason: String

  \\"\\"\\"
  If the branch type is 'bogbus', this field may contain a list of locations that the bus visits
  \\"\\"\\"
  mobileLibraryLocations: [String!]
}

type Lamp {
  color: String
  message: String
}

type DetailedHoldings {
  count: Int!
  branchId: String
  expectedDelivery: String
  agencyHoldings: [AgencyHolding]
  holdingItems: [Status]
  lamp: Lamp
}

type AgencyHolding {
  localisationPid: String
  localIdentifier: String
  agencyId: String
}

type Status {
  branch: String
  branchId: String
  willLend: String
  expectedDelivery: String
  localHoldingsId: String
  circulationRule: String
  department: String
  issueId: String
  issueText: String
  location: String
  note: String
  readyForLoan: String
  status: String
  subLocation: String
}

type DK5 {
  searchCode: String!
  searchString: String!
  value: String!
}

enum CopyRequestStatusEnum {
  OK
  ERROR_UNAUTHENTICATED_USER
  ERROR_AGENCY_NOT_SUBSCRIBED
  ERROR_INVALID_PICKUP_BRANCH
  ERROR_PID_NOT_RESERVABLE
  ERROR_MISSING_CLIENT_CONFIGURATION
  ERROR_MUNICIPALITYAGENCYID_NOT_FOUND
  ERROR_MISSING_MUNICIPALITYAGENCYID
  UNKNOWN_USER
  BORCHK_USER_BLOCKED_BY_AGENCY
  BORCHK_USER_NO_LONGER_EXIST_ON_AGENCY
  BORCHK_USER_NOT_VERIFIED
  INTERNAL_ERROR
}

type CopyRequestResponse {
  status: CopyRequestStatusEnum!
}

type ElbaServices {
  placeCopyRequest(
    input: CopyRequestInput!

    \\"\\"\\"
    If this is true, the copy request will not be send to the elba service
    Use it for testing
    \\"\\"\\"
    dryRun: Boolean
  ): CopyRequestResponse!
}

input CopyRequestInput {
  \\"\\"\\"The pid of an article or periodica\\"\\"\\"
  pid: String!
  userName: String
  userMail: String
  publicationTitle: String
  publicationDateOfComponent: String
  publicationYearOfComponent: String
  volumeOfComponent: String
  authorOfComponent: String
  titleOfComponent: String
  pagesOfComponent: String
  userInterestDate: String
  pickUpAgencySubdivision: String
  issueOfComponent: String
  openURL: String
}

\\"\\"\\"A periodica that contains all its issues and subjects\\"\\"\\"
type Periodical {
  \\"\\"\\"Info about articles in this periodical\\"\\"\\"
  articles: PeriodicalArticlesResponse!

  \\"\\"\\"All issues in this periodical\\"\\"\\"
  issues(filters: PeriodicalIssueFilterInput): PeriodicalEntriesResponse!
}

type PeriodicalFacetResponse {
  \\"\\"\\"Total number of matching items\\"\\"\\"
  hitcount: Int!

  \\"\\"\\"Facet entries\\"\\"\\"
  entries(offset: Int, limit: Int): [FacetValue!]
}

\\"\\"\\"Metadata about articles in a periodical\\"\\"\\"
type PeriodicalArticlesResponse {
  \\"\\"\\"Total number of articles in the periodical\\"\\"\\"
  hitcount: Int!

  \\"\\"\\"First article (e.g. chronologically)\\"\\"\\"
  first: Work

  \\"\\"\\"Last article (e.g. most recent)\\"\\"\\"
  last: Work
}

\\"\\"\\"Response containing all issues of a periodical\\"\\"\\"
type PeriodicalEntriesResponse {
  \\"\\"\\"Total number of issues in periodical\\"\\"\\"
  hitcount: Int!

  \\"\\"\\"List of issues\\"\\"\\"
  entries(offset: Int, limit: Int): [PeriodicalIssue!]!

  \\"\\"\\"Subjects aggregated from articles in the issues\\"\\"\\"
  subjects: PeriodicalFacetResponse!

  \\"\\"\\"Publication years aggregated from articles in the issues\\"\\"\\"
  publicationYears: PeriodicalFacetResponse!

  \\"\\"\\"Publication years aggregated from articles in the issues\\"\\"\\"
  publicationMonths: PeriodicalFacetResponse!
}

\\"\\"\\"A single issue of a periodical\\"\\"\\"
type PeriodicalIssue {
  \\"\\"\\"Display name of the issue (e.g. \\"2023, nr. 2\\")\\"\\"\\"
  display: String!

  \\"\\"\\"Number of works/articles in the issue\\"\\"\\"
  hitcount: Int!

  \\"\\"\\"List of works/articles in this issue\\"\\"\\"
  works(offset: Int, limit: Int): [Work!]!
}

\\"\\"\\"An article similar to another, with shared subjects\\"\\"\\"
type SimilarPeriodicalArticleEntry {
  \\"\\"\\"Subjects shared with the reference article\\"\\"\\"
  sharedSubjects: [String!]!

  \\"\\"\\"The similar article\\"\\"\\"
  work: Work!
}

type PeriodicalArticle {
  \\"\\"\\"Is set when this is work is the actual periodica\\"\\"\\"
  parentPeriodical: Work

  \\"\\"\\"is set when this work is an article in an issue of a periodica\\"\\"\\"
  parentIssue: PeriodicalIssue

  \\"\\"\\"Articles in same periodica that are similar in terms of subjects\\"\\"\\"
  similarArticles: [SimilarPeriodicalArticleEntry!]
}

input PeriodicalIssueFilterInput {
  subjects: [String!]
  publicationYears: [String!]
  publicationMonths: [String!]
}

union WorkExtensionUnion = Periodical | PeriodicalArticle

type Work {
  \\"\\"\\"Contains either a Periodical or a PeriodicalArticle\\"\\"\\"
  extendedWork: WorkExtensionUnion

  \\"\\"\\"Field for presenting bibliographic records in MARC format\\"\\"\\"
  marc: MarcRecord

  \\"\\"\\"Relations to other manifestations\\"\\"\\"
  relations: Relations!

  \\"\\"\\"
  A unique identifier for tracking user interactions with this work.
  It is generated in the response and should be included in subsequent
  API calls when this work is selected.
  \\"\\"\\"
  traceId: String!

  \\"\\"\\"
  Unique identification of the work based on work-presentation id e.g work-of:870970-basis:54029519
  \\"\\"\\"
  workId: String!
  titles: WorkTitles!

  \\"\\"\\"Abstract of the entity\\"\\"\\"
  abstract: [String!]

  \\"\\"\\"Creators\\"\\"\\"
  creators: [CreatorInterface!]!

  \\"\\"\\"DK5 main entry for this work\\"\\"\\"
  dk5MainEntry: DK5MainEntry

  \\"\\"\\"
  Overall literary category/genre of this work. e.g. fiction or nonfiction. In Danish skønlitteratur/faglitteratur for literature, fiktion/nonfiktion for other types.
  \\"\\"\\"
  fictionNonfiction: FictionNonfiction

  \\"\\"\\"Date of latest publication\\"\\"\\"
  latestPublicationDate: String

  \\"\\"\\"The type of material of the manifestation based on bibliotek.dk types\\"\\"\\"
  materialTypes: [MaterialType!]!

  \\"\\"\\"Series for this work\\"\\"\\"
  series: [Series!]!

  \\"\\"\\"
  Literary/movie universes this work is part of, e.g. Wizarding World, Marvel Universe
  \\"\\"\\"
  universes: [Universe!]!

  \\"\\"\\"Subjects for this work\\"\\"\\"
  subjects: SubjectContainer!

  \\"\\"\\"The genre, (literary) form, type etc. of this work\\"\\"\\"
  genreAndForm: [String!]!

  \\"\\"\\"Worktypes for this work - 'none' replaced by 'other'\\"\\"\\"
  workTypes: [WorkTypeEnum!]!

  \\"\\"\\"The year this work was originally published or produced\\"\\"\\"
  workYear: PublicationYear

  \\"\\"\\"The main language(s) of the work's content\\"\\"\\"
  mainLanguages: [Language!]!

  \\"\\"\\"Details about the manifestations of this work\\"\\"\\"
  manifestations: Manifestations!
}

type HelpRow {
  nid: Int!
  group: String!
  orgTitle: String!
  title: String!
  body: String!
}

type HelpResponse {
  result: [HelpRow!]!
}

type HoldingsItems {
  \\"\\"\\"
  Updates all holdings for a given bibliographic record.
  Non-referenced issues/items are removed, and items may be moved between records.
  \\"\\"\\"
  updateAllHoldingsItems(
    \\"\\"\\"Library number identifying the agency.\\"\\"\\"
    agencyId: String

    \\"\\"\\"Bibliographic record ID (faust number).\\"\\"\\"
    bibliographicRecordId: String!

    \\"\\"\\"The payload containing all issues/items for the bibliographic record.\\"\\"\\"
    input: CompleteWithIssuesInput!

    \\"\\"\\"If dryRun is true, the actual service will never get called.\\"\\"\\"
    dryRun: Boolean
  ): HoldingsItemsStatus!

  \\"\\"\\"
  Updates a single holding for a bibliographic record.
  If the record does not exist, a bad request is returned.
  \\"\\"\\"
  updateSingleHoldingsItem(
    \\"\\"\\"Library number identifying the agency.\\"\\"\\"
    agencyId: String

    \\"\\"\\"Bibliographic record ID (faust number).\\"\\"\\"
    bibliographicRecordId: String!

    \\"\\"\\"Identifier for a material, usually a barcode.\\"\\"\\"
    itemId: String!

    \\"\\"\\"The payload containing details for the single item and related issue.\\"\\"\\"
    input: ItemWithIssueInput!

    \\"\\"\\"If dryRun is true, the actual service will never get called.\\"\\"\\"
    dryRun: Boolean
  ): HoldingsItemsStatus!

  \\"\\"\\"
  Removes all issues/items for a bibliographic record.
  This operation will also remove the 'firstAccessionDate' for any items not resurrected.
  \\"\\"\\"
  removeAllHoldingsItems(
    \\"\\"\\"The agency ID identifying the library.\\"\\"\\"
    agencyId: String

    \\"\\"\\"The bibliographic record ID (faust number).\\"\\"\\"
    bibliographicRecordId: String!

    \\"\\"\\"If dryRun is true, the actual service will never get called.\\"\\"\\"
    dryRun: Boolean
  ): HoldingsItemsStatus!
}

\\"\\"\\"The payload for updating all issues/items for a bibliographic record.\\"\\"\\"
input CompleteWithIssuesInput {
  \\"\\"\\"When this structure was exported in ISO-8601 format with timezone Z.\\"\\"\\"
  version: String!

  \\"\\"\\"
  When the first item for this material was acquired, in ISO-8601 format.
  \\"\\"\\"
  firstAccessionDate: String

  \\"\\"\\"Notes about the bibliographic item.\\"\\"\\"
  note: String

  \\"\\"\\"Issues associated with the bibliographic record.\\"\\"\\"
  issues: [IssueWithItemsInput]

  \\"\\"\\"Whether online access for this bibliographic item is available.\\"\\"\\"
  online: Boolean
}

\\"\\"\\"Details of an issue, including its items.\\"\\"\\"
input IssueWithItemsInput {
  \\"\\"\\"Identifier for a material, usually a barcode.\\"\\"\\"
  issueId: String!

  \\"\\"\\"Items associated with this issue.\\"\\"\\"
  items: [ItemInput!]

  \\"\\"\\"The text describing the issue.\\"\\"\\"
  issueText: String!

  \\"\\"\\"When an item is expected to be available for loan, in ISO-8601 format.\\"\\"\\"
  expectedDelivery: String

  \\"\\"\\"
  Number of items ready to be lent out. If 0, expectedDelivery must be set.
  \\"\\"\\"
  readyForLoan: Int
}

\\"\\"\\"Details of an individual item.\\"\\"\\"
input ItemInput {
  \\"\\"\\"Identifier for a material, usually a barcode.\\"\\"\\"
  itemId: String!

  \\"\\"\\"Human-readable text describing the branch.\\"\\"\\"
  branch: String!

  \\"\\"\\"Identifying number of the branch.\\"\\"\\"
  branchId: Int!

  \\"\\"\\"Human-readable text describing the department within the branch.\\"\\"\\"
  department: String!

  \\"\\"\\"Human-readable text describing the location within the department.\\"\\"\\"
  location: String!

  \\"\\"\\"Human-readable text describing the sub-location within the location.\\"\\"\\"
  subLocation: String!

  \\"\\"\\"Human-readable text describing the rules for lending.\\"\\"\\"
  circulationRule: String!

  \\"\\"\\"When the item was acquired, in ISO-8601 format.\\"\\"\\"
  accessionDate: String!

  \\"\\"\\"Rule for lending according to DanMarc 096r.\\"\\"\\"
  loanRestriction: LoanRestrictionEnum

  \\"\\"\\"The status of the item (e.g., OnShelf, OnLoan, etc.).\\"\\"\\"
  status: ItemStatusEnum

  \\"\\"\\"When this item was last lent, in ISO-8601 format.\\"\\"\\"
  lastLoanDate: String

  \\"\\"\\"
  Identifying the agencyId that owns this, if temporarily part of the library (ILL loan).
  \\"\\"\\"
  ownerAgencyId: Int
}

\\"\\"\\"Represents the status of an item.\\"\\"\\"
enum ItemStatusEnum {
  \\"\\"\\"The item has been discarded and is no longer available.\\"\\"\\"
  DISCARDED

  \\"\\"\\"The item is marked as lost.\\"\\"\\"
  LOST

  \\"\\"\\"The item is not available for loan.\\"\\"\\"
  NOTFORLOAN

  \\"\\"\\"The item is currently on loan.\\"\\"\\"
  ONLOAN

  \\"\\"\\"The item is on order but not yet available.\\"\\"\\"
  ONORDER

  \\"\\"\\"The item is available on the shelf.\\"\\"\\"
  ONSHELF
}

enum LoanRestrictionEnum {
  A
  B
  C
  D
  E
  F
  G
}

\\"\\"\\"Payload for updating an item, including related issue details.\\"\\"\\"
input ItemWithIssueInput {
  \\"\\"\\"Human-readable text describing the branch.\\"\\"\\"
  branch: String!

  \\"\\"\\"Identifying number of the branch.\\"\\"\\"
  branchId: Int!

  \\"\\"\\"Human-readable text describing the department within the branch.\\"\\"\\"
  department: String!

  \\"\\"\\"Human-readable text describing the location within the department.\\"\\"\\"
  location: String!

  \\"\\"\\"Human-readable text describing the sub-location within the location.\\"\\"\\"
  subLocation: String!

  \\"\\"\\"Human-readable text describing the rules for lending.\\"\\"\\"
  circulationRule: String!

  \\"\\"\\"When the item was acquired, in ISO-8601 format.\\"\\"\\"
  accessionDate: String!

  \\"\\"\\"Rule for lending according to DanMarc 096r.\\"\\"\\"
  loanRestriction: LoanRestrictionEnum

  \\"\\"\\"The status of the item (e.g., OnShelf, OnLoan, etc.).\\"\\"\\"
  status: ItemStatusEnum

  \\"\\"\\"When this item was last lent, in ISO-8601 format.\\"\\"\\"
  lastLoanDate: String

  \\"\\"\\"
  Identifying the agencyId that owns this, if temporarily part of the library (ILL loan).
  \\"\\"\\"
  ownerAgencyId: Int

  \\"\\"\\"When this structure was exported in ISO-8601 format with timezone Z.\\"\\"\\"
  version: String!

  \\"\\"\\"Details of the issue, including its ID.\\"\\"\\"
  issue: IssueInputWithIdInput!
}

\\"\\"\\"Details of an issue, including its ID.\\"\\"\\"
input IssueInputWithIdInput {
  \\"\\"\\"The ID of the issue.\\"\\"\\"
  issueId: String!

  \\"\\"\\"The text describing the issue.\\"\\"\\"
  issueText: String!

  \\"\\"\\"When an item is expected to be available for loan, in ISO-8601 format.\\"\\"\\"
  expectedDelivery: String

  \\"\\"\\"
  Number of items ready to be lent out. If 0, expectedDelivery must be set.
  \\"\\"\\"
  readyForLoan: Int
}

\\"\\"\\"Represents the status of an operation.\\"\\"\\"
type HoldingsItemsStatus {
  \\"\\"\\"Indicates if the operation was successful.\\"\\"\\"
  ok: Boolean!

  \\"\\"\\"Status code, represented as an ENUM value\\"\\"\\"
  status: HoldingsItemsStatusEnum!

  \\"\\"\\"Human-readable message about the reason for the status.\\"\\"\\"
  message: String!

  \\"\\"\\"Optional tracking ID for debugging or log tracking.\\"\\"\\"
  trackingId: String
}

\\"\\"\\"Represents the status of an operation related to holdings items.\\"\\"\\"
enum HoldingsItemsStatusEnum {
  \\"\\"\\"The operation completed successfully.\\"\\"\\"
  OK

  \\"\\"\\"A generic error occurred during the operation.\\"\\"\\"
  ERROR

  \\"\\"\\"The operation failed due to an unauthenticated or invalid token.\\"\\"\\"
  ERROR_UNAUTHENTICATED_TOKEN

  \\"\\"\\"The operation failed because the token specified agency is invalid.\\"\\"\\"
  ERROR_INVALID_AGENCY

  \\"\\"\\"The operation failed due to lack of authorisation.\\"\\"\\"
  ERROR_NO_AUTHORISATION
}

enum InfomediaErrorEnum {
  SERVICE_NOT_LICENSED
  SERVICE_UNAVAILABLE
  LIBRARY_NOT_FOUND
  ERROR_IN_REQUEST
  BORROWER_NOT_LOGGED_IN
  BORROWER_NOT_FOUND
  BORROWERCHECK_NOT_ALLOWED
  INTERNAL_SERVER_ERROR
  BORROWER_NOT_IN_MUNICIPALITY
  NO_AGENCYID
}

type InfomediaResponse {
  \\"\\"\\"Infomedia error\\"\\"\\"
  error: InfomediaErrorEnum
  article: InfomediaArticle
}

type InfomediaArticle {
  id: String!
  headLine: String
  subHeadLine: String
  byLine: String
  dateLine: String
  paper: String
  text: String
  hedLine: String
  logo: String
  html: String
}

input DataCollectSearchRequestInput {
  q: SearchQueryInput!
  filters: SearchFiltersInput
}

input DataCollectSearchWorkInput {
  search_query_hit: Int!
  search_query_work: String!
  search_request: DataCollectSearchRequestInput!
  session_id: String!
}

input DataCollectSearchInput {
  search_request: DataCollectSearchRequestInput!
  search_response_works: [String!]!
  search_offset: Int!
  session_id: String!
}

input DataCollectExampleInput {
  example: String!
  session_id: String!
}

input DataCollectRecommenderClickInput {
  recommender_based_on: String!
  recommender_click_hit: Int!
  recommender_click_work: String!
  recommender_click_reader: String!
  recommender_shown_recommendations: [String!]!
  session_id: String!
}

input DataCollectSuggestionInput {
  type: String!
  value: String!
}

input DataCollectSuggestClickInput {
  suggest_query: String!
  suggest_query_hit: Int!
  suggest_query_request_types: [String!]!
  suggest_query_result: DataCollectSuggestionInput!
  session_id: String!
}

input DataCollectSuggestPresentedInput {
  suggest_query: String!
  suggest_query_request_types: [String!]!
  suggest_query_results: [DataCollectSuggestionInput!]!
  session_id: String!
}

enum FeedbackThumbEnum {
  UP
  DOWN
}

input DataCollectSearchFeedbackInput {
  thumbs: FeedbackThumbEnum!
  query: String!
  reason: String!
}

input DataCollectInput {
  recommender_click: DataCollectRecommenderClickInput
  search: DataCollectSearchInput
  search_work: DataCollectSearchWorkInput
  suggest_presented: DataCollectSuggestPresentedInput
  suggest_click: DataCollectSuggestClickInput
  search_feedback: DataCollectSearchFeedbackInput
  example: DataCollectExampleInput
}

input CategoryFilterInput {
  category: CategoryFiltersEnum!
  subCategories: [String!]
}

enum CategoryFiltersEnum {
  CHILDRENBOOKSNONFICTION
  CHILDRENBOOKSFICTION
  FICTION
  NONFICTION
  EBOOKS
  ARTICLES
  MOVIES
  GAMES
  MUSIC
  SHEETMUSIC
}

type Inspiration {
  categories(filter: [CategoryFilterInput!]): [Categories]!
}

enum LanguageCodeEnum {
  DA
  EN
}

enum LibraryStatusEnum {
  SLETTET
  AKTIVE
  ALLE
  USYNLIG
}

enum VipUserParameterEnum {
  CPR
  USERID
  BARCODE
  CARDNO
  CUSTOMID
  USERDATEOFBIRTH
  USERNAME
  USERADDRESS
  USERMAIL
  USERTELEPHONE
}

enum AgencyTypeEnum {
  ALLE
  SKOLEBIBLIOTEK
  FOLKEBIBLIOTEK
  FORSKNINGSBIBLIOTEK
  ANDRE
}

type UserParameter {
  userParameterType: VipUserParameterEnum!
  userParameterName: String!
  parameterRequired: Boolean!
  description: String
}

type BranchResult {
  hitcount: Int!
  borrowerStatus: BorrowerStatus
  result: [Branch!]!
  agencyUrl: String
}

\\"\\"\\"
Indicates if user is blocked for a given agency or 
if user does no longer exist on agency - relevant for FFU biblioteker since they dont update CULR
\\"\\"\\"
type BorrowerStatus {
  allowed: Boolean!
  statusCode: String!
}

type Highlight {
  key: String!
  value: String!
}

type MinisearchDebug {
  score: String
  terms: [String!]
  match: [Match!]
}

type Match {
  term: String
  fields: [String!]
}

enum LinkCheckStatusEnum {
  OK
  BROKEN
  INVALID
  GONE
}

type LinkCheckResponse {
  url: String!
  status: LinkCheckStatusEnum!
  lastCheckedAt: DateTime
  brokenSince: DateTime
}

type LinkCheckService {
  checks(urls: [String!]): [LinkCheckResponse!]!
}

type RenewLoanResponse {
  \\"\\"\\"Whether the loan was renewed or not.\\"\\"\\"
  renewed: Boolean!

  \\"\\"\\"Returns error message, if the renewal failed.\\"\\"\\"
  error: String

  \\"\\"\\"Returns due date of the loan, if renewal was successful.\\"\\"\\"
  dueDate: String
}

type Localizations {
  count: Int
  agencies: [HoldingAgency]
}

type HoldingAgency {
  agencyId: String
  holdingItems: [LocalizationsHoldingsItem]
}

type LocalizationsHoldingsItem {
  localizationPid: String
  codes: String
  localIdentifier: String
}

enum AvailabilityEnum {
  NOW
  LATER
  UNKNOWN
}

type CatalogueCodes {
  \\"\\"\\"CatalogueCodes from the national registers\\"\\"\\"
  nationalBibliography: [String!]!

  \\"\\"\\"
  CatalogueCodes from local bibliographies or catalogues that the manifestation belongs to
  \\"\\"\\"
  otherCatalogues: [String!]!
}

type TableOfContent {
  heading: String
  content: String
  listOfContent: [TableOfContent!]
}

type Shelfmark {
  \\"\\"\\"A postfix to the shelfmark, eg. 99.4 Christensen, Inger. f. 1935\\"\\"\\"
  postfix: String

  \\"\\"\\"
  The actual shelfmark - e.g. information about on which shelf in the library this manifestation can be found, e.g. 99.4
  \\"\\"\\"
  shelfmark: String!
}

type UnitDescription {
  \\"\\"\\"
  Assemblance of the data from all the other properties, separated by a comma
  \\"\\"\\"
  summary: String!

  \\"\\"\\"Technical formats, e.g. Playstation 4, blu-ray\\"\\"\\"
  numberAndType: String

  \\"\\"\\"
  Number of pages, tab (books, articles etc.) or playingtime (cd, dvd etc.)
  \\"\\"\\"
  extent: String

  \\"\\"\\"
  Other physical description, eg. illustrations, color or b/w, mono/stereo, rpm
  \\"\\"\\"
  additionalDescription: String

  \\"\\"\\"Size of the material unit\\"\\"\\"
  size: String

  \\"\\"\\"Technical formats, e.g. Playstation 4, blu-ray\\"\\"\\"
  technicalInformation: String
}

type PhysicalUnitDescription {
  \\"\\"\\"
  A summary of the physical description of this manifestation like extent (pages/minutes), illustrations etc.
  \\"\\"\\"
  summaryFull: String

  \\"\\"\\"List of units contained within the material\\"\\"\\"
  materialUnits: [UnitDescription!]

  \\"\\"\\"Number of pages of the manifestation as number\\"\\"\\"
  numberOfPages: Int

  \\"\\"\\"Material that comes with the manifestation (bilag)\\"\\"\\"
  accompanyingMaterial: String
}

type RelatedPublication {
  \\"\\"\\"
  Notes describing the relation of the related periodical/journal/publication
  \\"\\"\\"
  heading: String!

  \\"\\"\\"Title of the related periodical/journal\\"\\"\\"
  title: [String!]!

  \\"\\"\\"Faust of the related publication\\"\\"\\"
  faust: String

  \\"\\"\\"ISSN of the related periodical/journal/publication\\"\\"\\"
  issn: String

  \\"\\"\\"ISBN of the related publication\\"\\"\\"
  isbn: String

  \\"\\"\\"Alle urls of the related publication\\"\\"\\"
  urls: [String]!

  \\"\\"\\"Note regarding the URL of the related publication\\"\\"\\"
  urlText: String

  \\"\\"\\"The first URL of the urls in related publications\\"\\"\\"
  url: String
}

enum NoteTypeEnum {
  CONNECTION_TO_OTHER_WORKS
  DESCRIPTION_OF_MATERIAL
  DISSERTATION
  MUSICAL_ENSEMBLE_OR_CAST
  NOT_SPECIFIED
  OCCASION_FOR_PUBLICATION
  ORIGINAL_TITLE
  ORIGINAL_VERSION
  REFERENCES
  RESTRICTIONS_ON_USE
  TYPE_OF_SCORE
  FREQUENCY
  EDITION
  TECHNICAL_REQUIREMENTS
  ESTIMATED_PLAYING_TIME_FOR_GAMES
  EXPECTED_PUBLICATION_DATE
  WITHDRAWN_PUBLICATION
  CONTAINS_AI_GENERATED_CONTENT
}

enum ChildOrAdultCodeEnum {
  FOR_CHILDREN
  FOR_ADULTS
}

type ChildOrAdult {
  display: String!
  code: ChildOrAdultCodeEnum!
}

enum SchoolUseCodeEnum {
  FOR_SCHOOL_USE
  FOR_TEACHER
}

type SchoolUse {
  display: String!
  code: SchoolUseCodeEnum!
}

type Note {
  \\"\\"\\"
  The type of note - e.g. note about language, genre etc, NOT_SPECIFIED if not known. 
  \\"\\"\\"
  type: NoteTypeEnum!

  \\"\\"\\"Heading before note\\"\\"\\"
  heading: String

  \\"\\"\\"The actual notes\\"\\"\\"
  display: [String!]!

  \\"\\"\\"A link and possible link text\\"\\"\\"
  urls: [AccessUrl]
}

enum ManifestationPartTypeEnum {
  MUSIC_TRACKS
  SHEET_MUSIC_CONTENT
  PARTS_OF_BOOK
  NOT_SPECIFIED
}

type ManifestationPart {
  \\"\\"\\"The title of the entry (music track or title of a literary analysis)\\"\\"\\"
  title: String!

  \\"\\"\\"The creator of the music track or literary analysis\\"\\"\\"
  creators: [CreatorInterface!]!

  \\"\\"\\"Classification of this entry (music track or literary analysis)\\"\\"\\"
  classifications: [Classification!]!

  \\"\\"\\"Subjects of this entry (music track or literary analysis)\\"\\"\\"
  subjects: [SubjectInterface!]

  \\"\\"\\"
  Additional creator or contributor to this entry (music track or literary analysis) as described on the publication. E.g. 'arr.: H. Cornell'
  \\"\\"\\"
  creatorsFromDescription: [String!]!

  \\"\\"\\"Contributors from description - additional contributor to this entry\\"\\"\\"
  contributorsFromDescription: [String!]!

  \\"\\"\\"
  The playing time for this specific part (i.e. the duration of a music track) 
  \\"\\"\\"
  playingTime: String
}

type ManifestationParts {
  \\"\\"\\"Heading for the music content note\\"\\"\\"
  heading: String

  \\"\\"\\"The creator and title etc of the individual parts\\"\\"\\"
  parts: [ManifestationPart!]!

  \\"\\"\\"The type of manifestation parts, is this music tracks, book parts etc.\\"\\"\\"
  type: ManifestationPartTypeEnum!
}

type Languages {
  \\"\\"\\"
  Notes of the languages that describe subtitles, spoken/written (original, dubbed/synchonized), visual interpretation, parallel (notes are written in Danish)
  \\"\\"\\"
  notes: [String!]

  \\"\\"\\"Main language of this manifestation\\"\\"\\"
  main: [Language!]

  \\"\\"\\"Original language of this manifestation\\"\\"\\"
  original: [Language!]

  \\"\\"\\"
  Parallel languages of this manifestation, if more languages are printed in the same book
  \\"\\"\\"
  parallel: [Language!]

  \\"\\"\\"
  Spoken language in this manifestation e.g. dubbed/syncronized language in movie
  \\"\\"\\"
  spoken: [Language!]

  \\"\\"\\"Subtitles in this manifestation\\"\\"\\"
  subtitles: [Language!]

  \\"\\"\\"
  Summary/abstract languages of this manifestation, if the manifestation contains short summaries of the content in another language
  \\"\\"\\"
  abstract: [Language!]
}

enum IdentifierTypeEnum {
  UPC
  URI
  DOI
  ISBN
  ISSN
  ISMN
  MUSIC
  MOVIE
  PUBLIZON
  NOT_SPECIFIED
  ORDER_NUMBER
  BARCODE
}

type Identifier {
  \\"\\"\\"The type of identifier\\"\\"\\"
  type: IdentifierTypeEnum!

  \\"\\"\\"The actual identifier\\"\\"\\"
  value: String!
}

type HostPublication {
  \\"\\"\\"Publication this manifestation can be found in\\"\\"\\"
  title: String!

  \\"\\"\\"Creator of the host publication if host publication is book\\"\\"\\"
  creator: String

  \\"\\"\\"Edition statement for the host publication\\"\\"\\"
  edition: String

  \\"\\"\\"ISSN of the publication this manifestation can be found in\\"\\"\\"
  issn: String

  \\"\\"\\"ISBN of the publication this manifestation can be found in\\"\\"\\"
  isbn: String

  \\"\\"\\"The issue of the publication this manifestation can be found in\\"\\"\\"
  issue: String

  \\"\\"\\"Notes about the publication where this manifestation can be found in\\"\\"\\"
  notes: [String!]

  \\"\\"\\"The pages in the publication where this manifestation can be found in\\"\\"\\"
  pages: String

  \\"\\"\\"
  The publisher of the publication where this manifestation can be found in
  \\"\\"\\"
  publisher: String

  \\"\\"\\"Series of the publication this manifestation can be found in\\"\\"\\"
  series: Series

  \\"\\"\\"
  The publication year of the publication this manifestation can be found in
  \\"\\"\\"
  year: PublicationYear

  \\"\\"\\"All details about the publication this manifestation can be found in\\"\\"\\"
  summary: String!
}

type Printing {
  \\"\\"\\"
  Properties 'printing' and 'publicationYear' as one string, e.g.: '11. oplag, 2020'
  \\"\\"\\"
  summary: String!

  \\"\\"\\"The printing number and name\\"\\"\\"
  printing: String!

  \\"\\"\\"
  Publisher of printing when other than the original publisher of the edition (260*b)
  \\"\\"\\"
  publisher: String

  \\"\\"\\"A year as displayable text and as number\\"\\"\\"
  publicationYear: PublicationYear
}

type PublicationYear {
  display: String!
  year: Int
  endYear: Int
  frequency: String
}

type Edition {
  \\"\\"\\"
  Properties 'edition', 'contributorsToEdition' and 'publicationYear' as one string, e.g.: '3. udgave, revideret af Hugin Eide, 2005'
  \\"\\"\\"
  summary: String!

  \\"\\"\\"A note about this specific edition\\"\\"\\"
  note: String

  \\"\\"\\"The edition number and name\\"\\"\\"
  edition: String

  \\"\\"\\"Quotation of contributor statements related to the edition\\"\\"\\"
  contributors: [String!]!

  \\"\\"\\"A year as displayable text and as number\\"\\"\\"
  publicationYear: PublicationYear
}

enum EntryTypeEnum {
  ADDITIONAL_ENTRY
  MAIN_ENTRY
  NATIONAL_BIBLIOGRAPHY_ENTRY
  NATIONAL_BIBLIOGRAPHY_ADDITIONAL_ENTRY
}

type Classification {
  \\"\\"\\"The classification code\\"\\"\\"
  code: String!

  \\"\\"\\"The dk5Heading for the classification (DK5 only)\\"\\"\\"
  dk5Heading: String

  \\"\\"\\"Descriptive text for the classification code (DK5 only)\\"\\"\\"
  display: String!

  \\"\\"\\"
  For DK5 only. The DK5 entry type: main entry, national entry, or additional entry
  \\"\\"\\"
  entryType: EntryTypeEnum

  \\"\\"\\"Name of the classification system\\"\\"\\"
  system: String!
}

type Players {
  \\"\\"\\"Number of players interval begin.\\"\\"\\"
  begin: Int

  \\"\\"\\"Number of players interval end.\\"\\"\\"
  end: Int

  \\"\\"\\"Display name for the number of players.\\"\\"\\"
  display: String
}

type PEGI {
  \\"\\"\\"Minimum age to play the game. PEGI rating\\"\\"\\"
  minimumAge: Int

  \\"\\"\\"Display string for PEGI minimum age\\"\\"\\"
  display: String
}

type MediaCouncilAgeRestriction {
  \\"\\"\\"Minimum age\\"\\"\\"
  minimumAge: Int

  \\"\\"\\"Display string for minimum age\\"\\"\\"
  display: String
}

type Audience {
  \\"\\"\\"Appropriate audience for this manifestation\\"\\"\\"
  generalAudience: [String!]!

  \\"\\"\\"
  Range of numbers with either beginning of range or end of range or both e.g. 6-10, 1980-1999
  \\"\\"\\"
  ages: [Range!]!

  \\"\\"\\"Appropriate audience as recommended by the library\\"\\"\\"
  libraryRecommendation: String

  \\"\\"\\"
  Level of difficulty, illustrations, length, and realism in children's literature
  \\"\\"\\"
  levelForChildren8to12: LevelForAudience

  \\"\\"\\"Is this material for children or adults\\"\\"\\"
  childrenOrAdults: [ChildOrAdult!]!

  \\"\\"\\"
  Is this material for use in schools (folkeskole/ungdomsuddannelse) or is this material for use in schools by the teacher (folkeskole only)
  \\"\\"\\"
  schoolUse: [SchoolUse!]!

  \\"\\"\\"Primary target audience for this manifestation\\"\\"\\"
  primaryTarget: [String!]!

  \\"\\"\\"
  LET number of this manifestion, defines the reability level, LET stands for læseegnethedstal
  \\"\\"\\"
  let: String

  \\"\\"\\"
  Lix number of this manifestion, defines the reability level, Lix stands for læsbarhedsindex
  \\"\\"\\"
  lix: String

  \\"\\"\\"Number of players in the game.\\"\\"\\"
  players: Players

  \\"\\"\\"PEGI age rating for games \\"\\"\\"
  PEGI: PEGI @deprecated(reason: \\"Use 'Audience.pegi' instead expires: 01/06-2025\\")

  \\"\\"\\"PEGI age rating for games \\"\\"\\"
  pegi: PEGI

  \\"\\"\\"Media council age recommendation\\"\\"\\"
  mediaCouncilAgeRestriction: MediaCouncilAgeRestriction
}

type LevelForAudience {
  \\"\\"\\"Level expressed as integer on a scale from 1 to 5\\"\\"\\"
  difficulty: Int

  \\"\\"\\"Level expressed as integer on a scale from 1 to 5\\"\\"\\"
  illustrationsLevel: Int

  \\"\\"\\"Level expressed as integer on a scale from 1 to 5\\"\\"\\"
  length: Int

  \\"\\"\\"Level expressed as integer on a scale from 1 to 5\\"\\"\\"
  realisticVsFictional: Int
}

\\"\\"\\"
A search hit that encapsulates a matched manifestation from a search query.
\\"\\"\\"
type SearchHit {
  \\"\\"\\"The manifestation that was matched during the search.\\"\\"\\"
  match: Manifestation
}

type Manifestations {
  first: Manifestation!
  latest: Manifestation!
  all: [Manifestation!]!
  bestRepresentation: Manifestation!
  bestRepresentations: [Manifestation!]!
  mostRelevant: [Manifestation!]!

  \\"\\"\\"
  A list of manifestations that matched the search query.
  
  This field is populated only when a work is retrieved within a search context.
  Each entry is a SearchHit object representing a manifestation that matched the search criteria.
  Only one manifestation per unit is returned.
  \\"\\"\\"
  searchHits: [SearchHit!]
}

type Manifestation {
  \\"\\"\\"
  A unique identifier for tracking user interactions with this manifestation. 
  It is generated in the response and should be included in subsequent
  API calls when this manifestation is selected.
  \\"\\"\\"
  traceId: String!

  \\"\\"\\"Unique identification of the manifestation e.g 870970-basis:54029519\\"\\"\\"
  pid: String!

  \\"\\"\\"Different kinds of titles for this work\\"\\"\\"
  titles: ManifestationTitles!

  \\"\\"\\"Abstract of the entity\\"\\"\\"
  abstract: [String!]!

  \\"\\"\\"Access type of this manifestation\\"\\"\\"
  accessTypes: [AccessType!]!

  \\"\\"\\"Different options to access manifestation\\"\\"\\"
  access: [AccessUnion!]!

  \\"\\"\\"
  Different kinds of definitions of appropriate audience for this manifestation
  \\"\\"\\"
  audience: Audience

  \\"\\"\\"
  CatalogueCodes divided in codes from the national bibliography and other codes
  \\"\\"\\"
  catalogueCodes: CatalogueCodes!

  \\"\\"\\"
  Classification codes for this manifestation from any classification system
  \\"\\"\\"
  classifications: [Classification!]!

  \\"\\"\\"Contributors to the manifestation, actors, illustrators etc\\"\\"\\"
  contributors: [CreatorInterface!]!

  \\"\\"\\"
  Additional contributors of this manifestation as described on the publication. E.g. 'på dansk ved Vivi Berendt'
  \\"\\"\\"
  contributorsFromDescription: [String!]!

  \\"\\"\\"Cover for this manifestation\\"\\"\\"
  cover: Cover!

  \\"\\"\\"
  Primary creators of the manifestation e.g. authors, directors, musicians etc
  \\"\\"\\"
  creators: [CreatorInterface!]!

  \\"\\"\\"
  Additional creators of this manifestation as described on the publication. E.g. 'tekst af William Warren'
  \\"\\"\\"
  creatorsFromDescription: [String!]!

  \\"\\"\\"The year for the publication of the first edition for this work \\"\\"\\"
  dateFirstEdition: PublicationYear

  \\"\\"\\"Edition details for this manifestation\\"\\"\\"
  edition: Edition

  \\"\\"\\"Details about the latest printing of this manifestation\\"\\"\\"
  latestPrinting: Printing

  \\"\\"\\"
  Overall literary category/genre of this manifestation. e.g. fiction or nonfiction. In Danish skønlitteratur/faglitteratur for literature, fiktion/nonfiktion for other types.
  \\"\\"\\"
  fictionNonfiction: FictionNonfiction

  \\"\\"\\"The genre, (literary) form, type etc. of this manifestation\\"\\"\\"
  genreAndForm: [String!]!

  \\"\\"\\"Details about the host publications of this manifestation\\"\\"\\"
  hostPublication: HostPublication

  \\"\\"\\"Identifiers for this manifestation - often used for search indexes\\"\\"\\"
  identifiers: [Identifier!]!

  \\"\\"\\"Languages in this manifestation\\"\\"\\"
  languages: Languages

  \\"\\"\\"
  Tracks on music album, sheet music content, or articles/short stories etc. in this manifestation
  \\"\\"\\"
  manifestationParts: ManifestationParts @deprecated(reason: \\"Use 'Manifestation.contents' instead expires: 01/11-2025\\")

  \\"\\"\\"
  Content title entries with possible creators, contributors and playing time for music tracks, sheet music titles, articles, poems, short stories etc.
  \\"\\"\\"
  contents: [ContentsEntity!]

  \\"\\"\\"The type of material of the manifestation based on bibliotek.dk types\\"\\"\\"
  materialTypes: [MaterialType!]!

  \\"\\"\\"Notes about the manifestation\\"\\"\\"
  notes: [Note!]!

  \\"\\"\\"The work that this manifestation is part of\\"\\"\\"
  ownerWork: Work!

  \\"\\"\\"
  Notes about relations to this book/periodical/journal, - like previous names or related journals
  \\"\\"\\"
  relatedPublications: [RelatedPublication!]!

  \\"\\"\\"
  Physical description  of this manifestation like extent (pages/minutes), illustrations etc.
  \\"\\"\\"
  physicalDescription: PhysicalUnitDescription

  \\"\\"\\"Publisher of this manifestion\\"\\"\\"
  publisher: [String!]!

  \\"\\"\\"
  The creation date of the record describing this manifestation in the format YYYYMMDD
  \\"\\"\\"
  recordCreationDate: String!

  \\"\\"\\"Series for this manifestation\\"\\"\\"
  series: [Series!]!

  \\"\\"\\"Universes for this manifestation\\"\\"\\"
  universes: [Universe!]!

  \\"\\"\\"
  Information about on which shelf in the library this manifestation can be found
  \\"\\"\\"
  shelfmark: Shelfmark

  \\"\\"\\"
  The source of the manifestation, e.g. own library catalogue (Bibliotekskatalog) or online source e.g. Filmstriben, Ebook Central, eReolen Global etc.
  \\"\\"\\"
  source: [String!]!

  \\"\\"\\"Subjects for this manifestation\\"\\"\\"
  subjects: SubjectContainer!

  \\"\\"\\"
  Information about on which volume this manifestation is in multi volume work
  \\"\\"\\"
  volume: String

  \\"\\"\\"
  Quotation of the manifestation's table of contents or a similar content list
  \\"\\"\\"
  tableOfContents: TableOfContent @deprecated(reason: \\"Use 'Manifestation.contents' instead expires: 01/11-2025\\")

  \\"\\"\\"Worktypes for this manifestations work\\"\\"\\"
  workTypes: [WorkTypeEnum!]!

  \\"\\"\\"The year this manifestation was originally published or produced\\"\\"\\"
  workYear: PublicationYear

  \\"\\"\\"id of the manifestaion unit\\"\\"\\"
  unit: Unit

  \\"\\"\\"Identification of the local id of this manifestation\\"\\"\\"
  localId: String

  \\"\\"\\"Material that can be identified as sheet music\\"\\"\\"
  sheetMusicCategories: SheetMusicCategory

  \\"\\"\\"The publication status of a catalogued manifestation.\\"\\"\\"
  cataloguedPublicationStatus: CataloguedPublicationStatus

  \\"\\"\\"Field for presenting bibliographic records in MARC format\\"\\"\\"
  marc: MarcRecord

  \\"\\"\\"Relations to other manifestations\\"\\"\\"
  relations: Relations!

  \\"\\"\\"Some review data, if this manifestation is a review\\"\\"\\"
  review: ManifestationReview
}

\\"\\"\\"Represents the publication status of a catalogued manifestation.\\"\\"\\"
enum CataloguedPublicationStatusEnum {
  \\"\\"\\"New title\\"\\"\\"
  NT

  \\"\\"\\"New edition\\"\\"\\"
  NU

  \\"\\"\\"New print run\\"\\"\\"
  OP
}

type CataloguedPublicationStatus {
  \\"\\"\\"The code representing the catalogued publication status.\\"\\"\\"
  code: CataloguedPublicationStatusEnum!

  \\"\\"\\"The display text corresponding to the publication status code.\\"\\"\\"
  display: String!
}

type SheetMusicCategory {
  \\"\\"\\"The types of instruments material covers\\"\\"\\"
  instruments: [String!]!

  \\"\\"\\"I this node for exercises\\"\\"\\"
  forMusicalExercise: Boolean

  \\"\\"\\"The types of choir material covers\\"\\"\\"
  choirTypes: [String!]!

  \\"\\"\\"The types of chamber music material covers\\"\\"\\"
  chamberMusicTypes: [String!]!

  \\"\\"\\"The types of orchestra material covers\\"\\"\\"
  orchestraTypes: [String!]!
}

type Unit {
  id: String!
  manifestations: [Manifestation!]!
}

type ManifestationTitles {
  \\"\\"\\"The main title(s) of the work\\"\\"\\"
  main: [String!]!

  \\"\\"\\"The full title(s) of the manifestation including subtitles etc\\"\\"\\"
  full: [String!]!

  \\"\\"\\"The sorted title of the entity\\"\\"\\"
  sort: String!

  \\"\\"\\"
  Alternative titles for this manifestation e.g. a title in a different language
  \\"\\"\\"
  alternative: [String!]!

  \\"\\"\\"
  Information that distinguishes this manifestation from a similar manifestation with same title, e.g. 'illustrated by Ted Kirby'
  \\"\\"\\"
  identifyingAddition: String

  \\"\\"\\"
  The title of the work that this expression/manifestation is translated from or based on. The original title(s) of a film which has a different distribution title.
  \\"\\"\\"
  original: [String!]

  \\"\\"\\"
  Titles (in other languages) parallel to the main 'title' of the manifestation
  \\"\\"\\"
  parallel: [String!]!

  \\"\\"\\"The standard title of the entity, used for music and movies\\"\\"\\"
  standard: String

  \\"\\"\\"
  The title of the entity with the language of the entity in parenthesis after. This field is only generated for non-danish titles.
  \\"\\"\\"
  titlePlusLanguage: String

  \\"\\"\\"Danish translation of the main title\\"\\"\\"
  translated: [String!]

  \\"\\"\\"detailed title for tv series \\"\\"\\"
  tvSeries: TvSeries
}

enum ContentsEntityEnum {
  ARTICLES
  CHAPTERS
  FICTION
  MUSIC_TRACKS
  SHEET_MUSIC
  NOT_SPECIFIED
}

type ContentEntryTitle {
  \\"\\"\\"Title of the content entry\\"\\"\\"
  display: String!
}

type ContentEntryCreators {
  \\"\\"\\"Details about a person, name, role etc.\\"\\"\\"
  persons: [Person!]

  \\"\\"\\"Details about a corporation or conference, name, role, etc.\\"\\"\\"
  corporations: [Corporation!]
}

type ContentEntry {
  \\"\\"\\"Top level title of the entry\\"\\"\\"
  title: ContentEntryTitle!

  \\"\\"\\"
  Main creator(s) of the entry i.e. composer (classical music), artist/band (rhythmic music), author (fiction, articles). For music and sheet music always only 1 creator, for articles and fiction possibly more than 1
  \\"\\"\\"
  creators: ContentEntryCreators

  \\"\\"\\"
  Additional 'authors' (lyricists, arrangers, performers/soloists etc.), quoted as strings (including possible author's statement) from the record
  \\"\\"\\"
  contributors: [String!]

  \\"\\"\\"Playing time for music tracks, quoted from the record\\"\\"\\"
  playingTime: String

  \\"\\"\\"
  Possible entry data (title, creators, contributors, playingtime) subordinate to the entry's top level
  \\"\\"\\"
  sublevel: [ContentSublevel!]
}

type ContentsEntity {
  \\"\\"\\"Heading for the contents of this entity\\"\\"\\"
  heading: String!

  \\"\\"\\"
  ENUM for type of content entries (music tracks, articles, fiction etc.) in this entity
  \\"\\"\\"
  type: ContentsEntityEnum!

  \\"\\"\\"
  Contents text note quoted as it is from the marc field. Used for non-machine-decipherable content notes (un)formatted in only 1 subfield)
  \\"\\"\\"
  raw: String

  \\"\\"\\"
  Content entry with title and possible creator(s), contributors and (for some music and movies) playing time
  \\"\\"\\"
  entries: [ContentEntry!]
}

type ContentSublevelLast {
  \\"\\"\\"Title subordinate to the title in the entry's top level\\"\\"\\"
  title: ContentEntryTitle!

  \\"\\"\\"
  Additional 'authors' (lyricists, arrangers, performers/soloists etc.) related to the title on sublevel 1, quoted as strings (including possible author's statement) from the record
  \\"\\"\\"
  contributors: [String!]

  \\"\\"\\"Playing time for music tracks\\"\\"\\"
  playingTime: String
}

type ContentSublevel {
  \\"\\"\\"Title subordinate to the title in the entry's top level\\"\\"\\"
  title: ContentEntryTitle!

  \\"\\"\\"
  Additional 'authors' (lyricists, arrangers, performers/soloists etc.) related to the title on sublevel 1, quoted as strings (including possible author's statement) from the record
  \\"\\"\\"
  contributors: [String!]

  \\"\\"\\"Playing time for music tracks\\"\\"\\"
  playingTime: String

  \\"\\"\\"
  Possible entry data (title, contributors, playingtime) subordinate to the entry's sublevel 1
  \\"\\"\\"
  sublevel: [ContentSublevelLast!]
}

type MarcRecord {
  \\"\\"\\"The marc record identifier\\"\\"\\"
  id: String!

  \\"\\"\\"The library agency\\"\\"\\"
  agencyId: String!

  \\"\\"\\"The bibliographic record identifier\\"\\"\\"
  bibliographicRecordId: String!

  \\"\\"\\"The MARC record collection content as marcXchange XML string\\"\\"\\"
  content: String!

  \\"\\"\\"
  The serialization format of the MARC record content. Defaults to 'marcXchange'
  \\"\\"\\"
  contentSerializationFormat: String!

  \\"\\"\\"Flag indicating whether or not the record is deleted\\"\\"\\"
  deleted: Boolean!
}

type Marc {
  \\"\\"\\"
  Gets the MARC record collection for the given record identifier, containing either standalone or head and/or section and volume records.
  \\"\\"\\"
  getMarcByRecordId(
    \\"\\"\\"The marc record identifier\\"\\"\\"
    recordId: String!
  ): MarcRecord
}

enum GeneralMaterialTypeCodeEnum {
  ARTICLES
  AUDIO_BOOKS
  BOARD_GAMES
  BOOKS
  COMICS
  COMPUTER_GAMES
  EBOOKS
  FILMS
  IMAGE_MATERIALS
  MUSIC
  NEWSPAPER_JOURNALS
  OTHER
  PODCASTS
  SHEET_MUSIC
  TV_SERIES
}

\\"\\"\\"Type of moodSuggest response\\"\\"\\"
enum MoodSuggestEnum {
  TITLE
  CREATOR
  TAG
}

\\"\\"\\"MoodSuggest item\\"\\"\\"
type MoodSuggestItem {
  \\"\\"\\"
  A unique identifier for tracking user interactions with this suggestion. 
  It is generated in the response and should be included in subsequent
  API calls when this manifestation is selected.
  \\"\\"\\"
  traceId: String!

  \\"\\"\\"Suggestion\\"\\"\\"
  term: String!

  \\"\\"\\"The type of suggestion title/creator/tag\\"\\"\\"
  type: MoodSuggestEnum!

  \\"\\"\\"A work associated with the suggestion\\"\\"\\"
  work: Work
}

\\"\\"\\"Response type for moodTagRecommend\\"\\"\\"
type MoodTagRecommendResponse {
  work: Work!
  similarity: Float
}

\\"\\"\\"The response type for moodSuggest\\"\\"\\"
type MoodSuggestResponse {
  \\"\\"\\"Response is an array of MoodSuggestResponse\\"\\"\\"
  response: [MoodSuggestItem!]!
}

\\"\\"\\"Supported fields for moodsearch request\\"\\"\\"
enum MoodSearchFieldValuesEnum {
  ALL
  TITLE
  CREATOR
  MOODTAGS
  ALLTAGS
}

input KidRecommenderTagsInput {
  tag: String
  weight: Int
}

input MoodKidsRecommendFiltersInput {
  difficulty: [Int!]
  illustrationsLevel: [Int!]
  length: [Int!]
  realisticVsFictional: [Int!]
  fictionNonfiction: FictionNonfictionCodeEnum
}

\\"\\"\\"The response from moodsearch\\"\\"\\"
type MoodSearchResponse {
  \\"\\"\\"
  The works matching the given search query. Use offset and limit for pagination.
  \\"\\"\\"
  works(offset: Int!, limit: PaginationLimitScalar!): [Work!]!
}

\\"\\"\\"The reponse from moodsearchkids\\"\\"\\"
type MoodSearchKidsResponse {
  works(offset: Int!, limit: PaginationLimitScalar!): [Work!]!
}

\\"\\"\\"The reponse from moodrecommenkids\\"\\"\\"
type MoodRecommendKidsResponse {
  works(offset: Int!, limit: PaginationLimitScalar!): [Work!]!
}

type MoodQueries {
  moodSearch(q: String!, field: MoodSearchFieldValuesEnum, offset: Int, limit: Int): MoodSearchResponse!
  moodSearchKids(q: String!, field: MoodSearchFieldValuesEnum, offset: Int, limit: Int): MoodSearchKidsResponse!
  moodSuggest(q: String!, limit: Int): MoodSuggestResponse!
  moodTagRecommend(tags: [String!]!, limit: Int, plus: [String!], minus: [String!], hasCover: Boolean): [MoodTagRecommendResponse]!
  moodWorkRecommend(likes: [String!]!, dislikes: [String!], limit: Int, offset: Int, maxAuthorRecommendations: Int, threshold: Float, hasCover: Boolean): [MoodTagRecommendResponse]!
  moodRecommendKids(tags: [KidRecommenderTagsInput!], work: String, filters: MoodKidsRecommendFiltersInput, dislikes: [String!], offset: Int, limit: Int): MoodRecommendKidsResponse!
}

type DigitalArticleServiceResponse {
  msg: String!
}

input NetpunktSubmitOrderInput {
  orderType: OrderTypeEnum
  pids: [String!]!
  pickUpBranch: String!
  key: String
  exactEdition: Boolean

  \\"\\"\\"
  expires is required to be iso 8601 dateTime eg. \\"2024-03-15T12:24:32Z\\"
  \\"\\"\\"
  expires: String
  userParameters: SubmitOrderUserParametersInput!
  author: String
  authorOfComponent: String
  pagination: String
  publicationDate: String
  publicationDateOfComponent: String
  title: String
  titleOfComponent: String
  volume: String
  requesterInitials: String

  \\"\\"\\"
  AgencyId of the desired responder for inter library loans. Kept unset if automation is wanted.
  \\"\\"\\"
  responderId: String

  \\"\\"\\"Indicates whether order is allowed to be put in queue\\"\\"\\"
  placeOnHold: String
}

type Netpunkt {
  \\"\\"\\"Submits an order from Netpunkt to OpenOrder on behalf of an end user\\"\\"\\"
  submitOrder(input: NetpunktSubmitOrderInput!, dryRun: Boolean): SubmitOrder
}

enum SubmitOrderStatusEnum {
  \\"\\"\\"Borchk: User is blocked by agency\\"\\"\\"
  BORCHK_USER_BLOCKED_BY_AGENCY

  \\"\\"\\"Borchk: User is no longer loaner at the provided pickupbranch\\"\\"\\"
  BORCHK_USER_NO_LONGER_EXIST_ON_AGENCY

  \\"\\"\\"Borchk: User could not be verified\\"\\"\\"
  BORCHK_USER_NOT_VERIFIED

  \\"\\"\\"Item available at pickupAgency, order accepted\\"\\"\\"
  OWNED_ACCEPTED

  \\"\\"\\"Item not available at pickupAgency, item localised for ILL\\"\\"\\"
  NOT_OWNED_ILL_LOC

  \\"\\"\\"Item available at pickupAgency, order of mediumType not accepted\\"\\"\\"
  OWNED_WRONG_MEDIUMTYPE

  \\"\\"\\"Item not available at pickupAgency, ILL of mediumType not accepted\\"\\"\\"
  NOT_OWNED_WRONG_ILL_MEDIUMTYPE

  \\"\\"\\"Item not available at pickupAgency, item not localised for ILL\\"\\"\\"
  NOT_OWNED_NO_ILL_LOC

  \\"\\"\\"
  Item available at pickupAgency, item may be ordered through the library's catalogue
  \\"\\"\\"
  OWNED_OWN_CATALOGUE

  \\"\\"\\"Service unavailable\\"\\"\\"
  SERVICE_UNAVAILABLE

  \\"\\"\\"PickupAgency not found\\"\\"\\"
  UNKNOWN_PICKUPAGENCY

  \\"\\"\\"User not found\\"\\"\\"
  UNKNOWN_USER

  \\"\\"\\"Order does not validate\\"\\"\\"
  INVALID_ORDER

  \\"\\"\\"Error sending order to ORS\\"\\"\\"
  ORS_ERROR

  \\"\\"\\"ServiceRequester is obligatory\\"\\"\\"
  NO_SERVICEREQUESTER

  \\"\\"\\"Authentication error\\"\\"\\"
  AUTHENTICATION_ERROR

  \\"\\"\\"Unknown error occured, status is unknown\\"\\"\\"
  UNKNOWN_ERROR

  \\"\\"\\"Pincode was not found in arguments\\"\\"\\"
  ERROR_MISSING_PINCODE
}

type SubmitOrder {
  \\"\\"\\"if order was submitted successfully\\"\\"\\"
  ok: Boolean
  status: SubmitOrderStatusEnum!
  message: String
  orderId: String
  deleted: Boolean
  orsId: String
}

type SubmitMultipleOrders {
  failedAtCreation: [String!]!
  successfullyCreated: [String!]!
  ok: Boolean
  status: String
}

enum OrderTypeEnum {
  ESTIMATE
  HOLD
  LOAN
  NON_RETURNABLE_COPY
  NORMAL
  STACK_RETRIEVAL
}

input SubmitOrderUserParametersInput {
  cpr: String
  userId: String
  barcode: String
  cardno: String
  customId: String
  pincode: String
  userDateOfBirth: String
  userName: String
  userAddress: String
  userMail: String
  userTelephone: String
}

input SubmitOrderInput {
  orderType: OrderTypeEnum
  pids: [String!]!
  pickUpBranch: String!
  key: String
  exactEdition: Boolean

  \\"\\"\\"
  expires is required to be iso 8601 dateTime eg. \\"2024-03-15T12:24:32Z\\"
  \\"\\"\\"
  expires: String
  userParameters: SubmitOrderUserParametersInput!
  author: String
  authorOfComponent: String
  pagination: String
  publicationDate: String
  publicationDateOfComponent: String
  title: String
  titleOfComponent: String
  volume: String
}

input MaterialInput {
  pids: [String!]!
  key: String!
  publicationDate: String
  publicationDateOfComponent: String
  volume: String
  author: String
  authorOfComponent: String
  titleOfComponent: String
  title: String
  exactEdition: Boolean
  expires: String
  orderType: OrderTypeEnum
  periodicaForm: CopyRequestInput
}

input SubmitMultipleOrdersInput {
  materialsToOrder: [MaterialInput!]!
  pickUpBranch: String!
  pickUpBranchSubdivision: String
  userParameters: SubmitOrderUserParametersInput!
  pagination: String
}

type DeleteOrderResponse {
  \\"\\"\\"Whether the order was deleted or not\\"\\"\\"
  deleted: Boolean!

  \\"\\"\\"Error message\\"\\"\\"
  error: String
}

type OrderStatusResponse {
  \\"\\"\\"Unique id for the order\\"\\"\\"
  orderId: String!

  \\"\\"\\"Whether the order is open or closed\\"\\"\\"
  closed: Boolean

  \\"\\"\\"Indicates if the order has been automated\\"\\"\\"
  autoForwardResult: String

  \\"\\"\\"Confirms a reservation has been made \\"\\"\\"
  placeOnHold: String

  \\"\\"\\"The branch where the user should collect the material\\"\\"\\"
  pickupAgencyId: String

  \\"\\"\\"pid associated with the order\\"\\"\\"
  pid: String

  \\"\\"\\"
  Unique identifier of the primary bibliographic object. Useful if a collection consists of multiple objects.
  \\"\\"\\"
  pidOfPrimaryObject: String

  \\"\\"\\"Author of the material\\"\\"\\"
  author: String

  \\"\\"\\"Title of the material\\"\\"\\"
  title: String

  \\"\\"\\"Date and time when the order was created\\"\\"\\"
  creationDate: String

  \\"\\"\\"Error message if ors-maintenance request fails\\"\\"\\"
  errorMessage: String
}

type ItemIdResponse {
  \\"\\"\\"Message field in case of an error.\\"\\"\\"
  message: String

  \\"\\"\\"ItemId response object.\\"\\"\\"
  itemOrderEntity: ItemOrderEntity
}

type ItemOrderEntity {
  \\"\\"\\"
  Key for the row in the database, can be ignored as it's only relevant for ORS.
  \\"\\"\\"
  itemOrderKey: Int!

  \\"\\"\\"Order ID associated with the item ID.\\"\\"\\"
  orderId: String!

  \\"\\"\\"Item ID, the same value that was queried.\\"\\"\\"
  itemId: String!

  \\"\\"\\"Agency ID of the lender of the material.\\"\\"\\"
  responderId: String!

  \\"\\"\\"Agency ID of the borrower of the material.\\"\\"\\"
  requesterId: String!

  \\"\\"\\"
  Timestamp of when the row was created in the database.
  Example: \\"2024-09-09T07:32:24.081+00:00\\"
  \\"\\"\\"
  timestamp: String!
}

type OrsQuery {
  \\"\\"\\"
  Method to retrieve sender and receiver information from ORS based on an itemId.
  \\"\\"\\"
  itemOrder(itemId: String!): ItemIdResponse!
}

type Recommendation {
  \\"\\"\\"The recommended work\\"\\"\\"
  work: Work!

  \\"\\"\\"The recommended manifestation\\"\\"\\"
  manifestation: Manifestation!

  \\"\\"\\"Info on how this recommendation was generated\\"\\"\\"
  reader: [String!]!
}

type RecommendationResponse {
  result: [Recommendation!]!
}

\\"\\"\\"Get different kinds of recommendations\\"\\"\\"
type Recommendations {
  \\"\\"\\"
  Retrieve subject-based recommendations based on a list of query strings and an optional limit.
  - q: An array of strings used to generate subject recommendations.
  - limit: The maximum number of recommendations to return.
  \\"\\"\\"
  subjects(q: [String!]!, limit: Int): [SubjectRecommendation!]
}

\\"\\"\\"Details about a single subject recommendation.\\"\\"\\"
type SubjectRecommendation {
  \\"\\"\\"The recommended subject.\\"\\"\\"
  subject: String!

  \\"\\"\\"
  A unique identifier for tracking user interactions with this subject recommendation. 
  It is generated in the response and should be included in subsequent
  API calls when this suggestion is selected.
  \\"\\"\\"
  traceId: String!
}

type Relations {
  \\"\\"\\"
  The story of this article is continued in this or these other article(s)
  \\"\\"\\"
  continuedIn: [Manifestation!]!

  \\"\\"\\"
  This story of this article actually started in this or these other article(s)
  \\"\\"\\"
  continues: [Manifestation!]!

  \\"\\"\\"The contents of this articles is also discussed in these articles\\"\\"\\"
  discussedIn: [Manifestation!]!

  \\"\\"\\"The article discusses the content of these articles\\"\\"\\"
  discusses: [Manifestation!]!

  \\"\\"\\"This story is adapted in this or these movie(s)\\"\\"\\"
  hasAdaptation: [Manifestation!]!

  \\"\\"\\"The contents of this manifestation is analysed in these manifestations\\"\\"\\"
  hasAnalysis: [Manifestation!]!

  \\"\\"\\"The creator of this manifestation is portrayed in these manifestations\\"\\"\\"
  hasCreatorDescription: [Manifestation!]!

  \\"\\"\\"
  The publisher of this manifestation has made a description of the content
  \\"\\"\\"
  hasDescriptionFromPublisher: [Manifestation!]!

  \\"\\"\\"This movie is based on this manuscript\\"\\"\\"
  hasManuscript: [Manifestation!]!

  \\"\\"\\"
  This manifestation has a 'materialevurdering' that was originally made for another manifestation, but it is still relevant (e.g. book/ebook)
  \\"\\"\\"
  hasReusedReview: [Manifestation!]!

  \\"\\"\\"This manifestation has these reviews\\"\\"\\"
  hasReview: [Manifestation!]!

  \\"\\"\\"This movie or game has this sound track\\"\\"\\"
  hasSoundtrack: [Manifestation!]!

  \\"\\"\\"This movie is based on this or these books\\"\\"\\"
  isAdaptationOf: [Manifestation!]!

  \\"\\"\\"This manifestation is an analysis of these manifestations\\"\\"\\"
  isAnalysisOf: [Manifestation!]!

  \\"\\"\\"
  This is a description from the original publisher of these manifestations
  \\"\\"\\"
  isDescriptionFromPublisherOf: [Manifestation!]!

  \\"\\"\\"This movie is based on this manuscript\\"\\"\\"
  isManuscriptOf: [Manifestation!]!

  \\"\\"\\"
  This 'materialevurdering' can also be used to review these relevant manifestations, even though it was originally made for another publication
  \\"\\"\\"
  isReusedReviewOf: [Manifestation!]!

  \\"\\"\\"This manifestation is a review of these manifestations\\"\\"\\"
  isReviewOf: [Manifestation!]!

  \\"\\"\\"This sound track for a game is related to these games\\"\\"\\"
  isSoundtrackOfGame: [Manifestation!]!

  \\"\\"\\"This sound track for a movie is related to these movies\\"\\"\\"
  isSoundtrackOfMovie: [Manifestation!]!

  \\"\\"\\"This album has these tracks\\"\\"\\"
  hasTrack: [Manifestation!]!

  \\"\\"\\"This music track is part of these albums\\"\\"\\"
  isPartOfAlbum: [Manifestation!]!

  \\"\\"\\"This article or book part can be found in these manifestations\\"\\"\\"
  isPartOfManifestation: [Manifestation!]!
}

enum ReviewElementTypeEnum {
  ABSTRACT
  ACQUISITION_RECOMMENDATIONS
  AUDIENCE
  CONCLUSION
  DESCRIPTION
  EVALUATION
  SIMILAR_MATERIALS
}

type ReviewElement {
  content: String

  \\"\\"\\"
  This is a paragraph containing markup where links to manifestations
  can be inserted. For instance '\\"Axel Steens nye job minder om [870970-basis:20307021] fra ...'.
  Relevant manifestations are located in the manifestations field. 
  \\"\\"\\"
  contentSubstitute: String
  heading: String

  \\"\\"\\"
  Manifestations that can be used to generate and insert links into 'contentSubsitute'.
  \\"\\"\\"
  manifestations: [Manifestation]
  type: ReviewElementTypeEnum
}

type ManifestationReview {
  rating: String
  reviewByLibrarians: [ReviewElement]
}

\\"\\"\\"An integer in the range from 1 to 100\\"\\"\\"
scalar PaginationLimitScalar

\\"\\"\\"The supported fields to query\\"\\"\\"
input SearchQueryInput {
  \\"\\"\\"
  Search for title, creator, subject or a combination.
  This is typically used where a single search box is desired.
  \\"\\"\\"
  all: String

  \\"\\"\\"Search for creator\\"\\"\\"
  creator: String

  \\"\\"\\"Search for specific subject\\"\\"\\"
  subject: String

  \\"\\"\\"Search for specific title\\"\\"\\"
  title: String
}

\\"\\"\\"The supported facet fields\\"\\"\\"
enum FacetFieldEnum {
  WORKTYPES
  MAINLANGUAGES
  MATERIALTYPESGENERAL
  MATERIALTYPESSPECIFIC
  FICTIONALCHARACTERS
  GENREANDFORM
  CHILDRENORADULTS
  ACCESSTYPES
  FICTIONNONFICTION
  SUBJECTS
  CREATORS
  CANALWAYSBELOANED
  YEAR
  DK5
  AGE
  LIX
  LET
  GENERALAUDIENCE
  LIBRARYRECOMMENDATION
  GAMEPLATFORM
}

\\"\\"\\"Search Filters\\"\\"\\"
input SearchFiltersInput {
  accessTypes: [String!]
  childrenOrAdults: [String!]
  creators: [String!]
  fictionNonfiction: [String!]
  fictionalCharacters: [String!]
  genreAndForm: [String!]
  mainLanguages: [String!]
  materialTypesGeneral: [String!]
  materialTypesSpecific: [String!]
  subjects: [String!]
  workTypes: [String!]
  year: [String!]
  dk5: [String!]
  gamePlatform: [String!]
  branchId: [String!]
  department: [String!]
  location: [String!]
  sublocation: [String!]
  status: [HoldingsStatusEnum!]
  canAlwaysBeLoaned: [String!]
  age: [String!]
  ageRange: [String!]
  lixRange: [String!]
  letRange: [String!]
  generalAudience: [String!]
  libraryRecommendation: [String!]
}

enum HoldingsStatusEnum {
  \\"\\"\\"Holding is physically available at the branch\\"\\"\\"
  ONSHELF

  \\"\\"\\"Holding is on loan\\"\\"\\"
  ONLOAN
}

\\"\\"\\"A facet value consists of a term and a count.\\"\\"\\"
type FacetValue {
  \\"\\"\\"Use the key when applying filters\\"\\"\\"
  key: String!

  \\"\\"\\"A value of a facet field\\"\\"\\"
  term: String!

  \\"\\"\\"A score indicating relevance\\"\\"\\"
  score: Int

  \\"\\"\\"
  A unique identifier for tracking user interactions with this facet value. 
  It is generated in the response and should be included in subsequent
  API calls when this manifestation is selected.
  \\"\\"\\"
  traceId: String!
}

\\"\\"\\"The result for a specific facet\\"\\"\\"
type FacetResult {
  \\"\\"\\"The name of the facet.\\"\\"\\"
  name: String!

  \\"\\"\\"The enum type of the facet.\\"\\"\\"
  type: FacetFieldEnum!

  \\"\\"\\"The values of thie facet result\\"\\"\\"
  values(limit: Int!): [FacetValue!]!
}

\\"\\"\\"The simple search response\\"\\"\\"
type SearchResponse {
  \\"\\"\\"Total number of works found. May be used for pagination.\\"\\"\\"
  hitcount: Int!

  \\"\\"\\"
  The works matching the given search query. Use offset and limit for pagination.
  \\"\\"\\"
  works(offset: Int!, limit: PaginationLimitScalar!): [Work!]!

  \\"\\"\\"
  Make sure only to fetch this when needed
  This may take seconds to complete
  \\"\\"\\"
  facets(facets: [FacetFieldEnum!]!): [FacetResult!]!

  \\"\\"\\"Will return the facets that best match the input query and filters\\"\\"\\"
  intelligentFacets(limit: Int): [FacetResult!]!

  \\"\\"\\"A list of alternative search queries\\"\\"\\"
  didYouMean(limit: Int): [DidYouMean!]!
}

type DidYouMean {
  \\"\\"\\"
  A unique identifier for tracking user interactions with this didYouMean value. 
  It is generated in the response and should be included in subsequent
  API calls when this manifestation is selected.
  \\"\\"\\"
  traceId: String!

  \\"\\"\\"An alternative query\\"\\"\\"
  query: String!

  \\"\\"\\"A probability score between 0-1 indicating how relevant the query is\\"\\"\\"
  score: Float!
}

type SEO {
  title: String!
  description: String!
}

type SerieWork {
  \\"\\"\\"The number of work in the series as a number (as text)\\"\\"\\"
  numberInSeries: String

  \\"\\"\\"Work of a serieWork\\"\\"\\"
  work: Work!

  \\"\\"\\"Information about whether this work in the series should be read first\\"\\"\\"
  readThisFirst: Boolean

  \\"\\"\\"
  Information about whether this work in the series can be read without considering the order of the series, it can be read at any time
  \\"\\"\\"
  readThisWhenever: Boolean
}

type Series {
  \\"\\"\\"The number of members in the series\\"\\"\\"
  hitcount: Int!

  \\"\\"\\"The title of the series\\"\\"\\"
  title: String!

  \\"\\"\\"Identifier for the series\\"\\"\\"
  seriesId: String

  \\"\\"\\"Traceid for tracking\\"\\"\\"
  traceId: String!

  \\"\\"\\"Additional information \\"\\"\\"
  identifyingAddition: String

  \\"\\"\\"Description of the series\\"\\"\\"
  description: String

  \\"\\"\\"A alternative title to the main 'title' of the series\\"\\"\\"
  alternativeTitles: [String!]!

  \\"\\"\\"
  A parallel title to the main 'title' of the series, in a different language
  \\"\\"\\"
  parallelTitles: [String!]!

  \\"\\"\\"The number in the series as text qoutation\\"\\"\\"
  numberInSeries: String

  \\"\\"\\"Information about whether this work in the series should be read first\\"\\"\\"
  readThisFirst: Boolean

  \\"\\"\\"
  Information about whether this work in the series can be read without considering the order of the series, it can be read at any time
  \\"\\"\\"
  readThisWhenever: Boolean

  \\"\\"\\"Whether this is a popular series or general series\\"\\"\\"
  isPopular: Boolean

  \\"\\"\\"WorkTypes for the series\\"\\"\\"
  workTypes: [String!]!

  \\"\\"\\"MainLanguages of the series\\"\\"\\"
  mainLanguages: [String!]!

  \\"\\"\\"Members of this serie. \\"\\"\\"
  members(limit: Int, offset: Int): [SerieWork!]!
}

type SessionUserParameters {
  cpr: String
  userId: String
  barcode: String
  cardno: String
  customId: String
  pincode: String
  userDateOfBirth: String
  userName: String
  userAddress: String
  userMail: String
  userTelephone: String
}

input SessionUserParametersInput {
  cpr: String
  userId: String
  barcode: String
  cardno: String
  customId: String
  pincode: String
  userDateOfBirth: String
  userName: String
  userAddress: String
  userMail: String
  userTelephone: String
}

type Session {
  userParameters: SessionUserParameters
  allowSessionStorage: Boolean
  pickupBranch: String
}

input SessionInput {
  userParameters: SessionUserParametersInput
  allowSessionStorage: Boolean
  pickupBranch: String
}

type FieldStat {
  path: String
  typeName: String
  fieldName: String!
  count: Int!
}

type ProfileStat {
  start: String!
  end: String!
  name: String!
  agency: String!
  fields: [FieldStat!]!
}

type Stats {
  weekly: [ProfileStat!]!
}

interface SubjectInterface {
  display: String!

  \\"\\"\\"
  The type of subject - 'location', 'time period' etc., 'topic' if not specific kind of subject term
  \\"\\"\\"
  type: SubjectTypeEnum!

  \\"\\"\\"Language of the subject - contains display and isoCode \\"\\"\\"
  language: Language
  local: Boolean
}

type SubjectText implements SubjectInterface {
  type: SubjectTypeEnum!
  display: String!
  language: Language
  local: Boolean
}

type TimePeriod implements SubjectInterface {
  type: SubjectTypeEnum!
  period: Range!
  display: String!
  language: Language
  local: Boolean
}

type Mood implements SubjectInterface {
  type: SubjectTypeEnum!
  display: String!
  language: Language
  local: Boolean
}

type NarrativeTechnique implements SubjectInterface {
  type: SubjectTypeEnum!
  display: String!
  language: Language
  local: Boolean
}

type Setting implements SubjectInterface {
  type: SubjectTypeEnum!
  display: String!
  language: Language
  local: Boolean
}

type SubjectWithRating implements SubjectInterface {
  type: SubjectTypeEnum!
  display: String!
  language: Language
  local: Boolean

  \\"\\"\\"Expressed as integer on a scale from 1 to 5\\"\\"\\"
  rating: Int
}

enum SubjectTypeEnum {
  TOPIC
  LOCATION
  FICTIONAL_CHARACTER
  LAESEKOMPASSET
  MEDICAL_SUBJECT_HEADING
  MUSIC_COUNTRY_OF_ORIGIN
  MUSIC_TIME_PERIOD
  MUSICAL_INSTRUMENTATION
  NATIONAL_AGRICULTURAL_LIBRARY
  TIME_PERIOD
  TITLE
  FILM_NATIONALITY
  LIBRARY_OF_CONGRESS_SUBJECT_HEADING
  FICTIONAL_LOCATION

  \\"\\"\\"
  added for manifestation.parts.creators/person - they get a type from small-rye
  \\"\\"\\"
  PERSON
  CORPORATION
  MOOD
  MOOD_CHILDREN

  \\"\\"\\"Subject describing selected topics for children, and a rating.\\"\\"\\"
  TOPIC_CHILDREN
  PERSPECTIVE
  STYLE
  TEMPO
  REALITY
  ENVIRONMENT
}

type Range {
  begin: Int
  end: Int
  display: String!
}

type SubjectContainer {
  \\"\\"\\"All subjects\\"\\"\\"
  all: [SubjectInterface!]!

  \\"\\"\\"Only DBC verified subjects\\"\\"\\"
  dbcVerified: [SubjectInterface!]!
}

enum SuggestionTypeEnum {
  SUBJECT
  TITLE
  CREATOR
  COMPOSIT
}

enum ComplexSuggestionTypeEnum {
  HOSTPUBLICATION
  CONTRIBUTORFUNCTION
  CREATOR
  DEFAULT
  CREATORCONTRIBUTORFUNCTION
  CREATORFUNCTION
  SUBJECT
  FICTIONALCHARACTER
  TITLE
  CREATORCONTRIBUTOR
  SERIES
  PUBLISHER
}

type ComplexSearchSuggestion {
  \\"\\"\\"
  A unique identifier for tracking user interactions with this suggestion. 
  It is generated in the response and should be included in subsequent
  API calls when this suggestion is selected.
  \\"\\"\\"
  traceId: String!

  \\"\\"\\"The type of suggestion\\"\\"\\"
  type: String!

  \\"\\"\\"The suggested term which can be searched for\\"\\"\\"
  term: String!

  \\"\\"\\"A work related to the term\\"\\"\\"
  work: Work
}

type Suggestion {
  \\"\\"\\"
  A unique identifier for tracking user interactions with this suggestion. 
  It is generated in the response and should be included in subsequent
  API calls when this suggestion is selected.
  \\"\\"\\"
  traceId: String!

  \\"\\"\\"The type of suggestion: creator, subject or title\\"\\"\\"
  type: SuggestionTypeEnum!

  \\"\\"\\"The suggested term which can be searched for\\"\\"\\"
  term: String!

  \\"\\"\\"A work related to the term\\"\\"\\"
  work: Work
}

type ComplexSuggestResponse {
  result: [ComplexSearchSuggestion!]!
}

type SuggestResponse {
  result: [Suggestion!]!
}

type LocalSuggestResponse {
  result: [Suggestion!]!
}

\\"\\"\\"\\"\\"\\"
type AgencyAccount {
  agency: Branch
  uniqueId: String
  cpr: String
  debt: String
  blocked: Boolean
  isMunicipality: Boolean
}

type TestUser {
  \\"\\"\\"All agencies which the user is registered on\\"\\"\\"
  accounts: [AgencyAccount!]
}

type Test {
  user: TestUser
}

input AgencyAccountInput {
  agency: String
  cpr: String
  debt: String
  blocked: Boolean
  isMunicipality: Boolean
}

input TestUserInput {
  accounts: [AgencyAccountInput!]
}

type TestMutation {
  user(input: TestUserInput): String
}

union UniverseContentUnion = Work | Series

type Universe {
  \\"\\"\\"A key that identifies a universe.\\"\\"\\"
  key: String

  \\"\\"\\"An id that identifies a universe.\\"\\"\\"
  universeId: String

  \\"\\"\\"
  A unique identifier for tracking user interactions with this universe.
  It is generated in the response and should be included in subsequent
  API calls when this work is selected.
  \\"\\"\\"
  traceId: String!

  \\"\\"\\"
  Literary/movie universe this work is part of e.g. Wizarding World, Marvel Cinematic Universe
  \\"\\"\\"
  title: String!

  \\"\\"\\"A alternative title to the main 'title' of the universe\\"\\"\\"
  alternativeTitles: [String!]

  \\"\\"\\"Description of the universe\\"\\"\\"
  description: String

  \\"\\"\\"All series within the universe\\"\\"\\"
  series(limit: Int, offset: Int, workType: WorkTypeEnum): [Series!]!

  \\"\\"\\"All works within the universe but not in any series\\"\\"\\"
  works(limit: Int, offset: Int, workType: WorkTypeEnum): [Work!]!

  \\"\\"\\"work types that are in this universe\\"\\"\\"
  workTypes: [WorkTypeEnum!]!

  \\"\\"\\"both series and works in a list\\"\\"\\"
  content(limit: Int, offset: Int, workType: WorkTypeEnum): UniverseContentResult!
}

type UniverseContentResult {
  hitcount: Int!
  entries: [UniverseContentUnion!]!
}

type User {
  name: String
  favoritePickUpBranch: String

  \\"\\"\\"Last used pickup branch. Updated each time the user makes an order.\\"\\"\\"
  lastUsedPickUpBranch: String

  \\"\\"\\"
  Creation date in userdata service. Returns a timestamp with ISO 8601 format and in Coordinated Universal Time (UTC)
  \\"\\"\\"
  createdAt: DateTime

  \\"\\"\\"We are allowed to store userdata for more than 30 days if set to true.\\"\\"\\"
  persistUserData: Boolean

  \\"\\"\\"Orders made through bibliotek.dk\\"\\"\\"
  bibliotekDkOrders(offset: Int, limit: PaginationLimitScalar): BibliotekDkOrders!

  \\"\\"\\"Saved searches from complex search\\"\\"\\"
  savedSearches(offset: Int, limit: PaginationLimitScalar): SavedSearchResponse!

  \\"\\"\\"Get one saved search by cql. Returns searchobject including id.\\"\\"\\"
  savedSearchByCql(cql: String!): SavedSearch
  agencies(language: LanguageCodeEnum): [Agency!]!
  loggedInBranchId: String
  loggedInAgencyId: String
  municipalityNumber: String
  municipalityAgencyId: String
  address: String
  postalCode: String
  mail: String
  culrMail: String
  country: String
  orders: UserStatusOrders
  loans: UserStatusLoans
  debt: UserStatusDebt
  bookmarks(orderBy: BookMarkOrderByEnum): BookMarkResponse!
  rights: UserSubscriptions!
  isCPRValidated: Boolean
  identityProviderUsed: String
  hasCulrUniqueId: Boolean
  omittedCulrData: OmittedCulrDataResponse
}

type SavedSearchResponse {
  result: [SavedSearch!]
  hitcount: Int!
}

type SavedSearch {
  \\"\\"\\"SearchObject including fieldSearch, facetts, quickfilter etc. \\"\\"\\"
  searchObject: String

  \\"\\"\\"Unique id for the search. Use this id to delete a search.\\"\\"\\"
  id: Int

  \\"\\"\\"Creation timestamps\\"\\"\\"
  createdAt: DateTime

  \\"\\"\\"cql including fieldSearch, facetts, quickfilter etc. \\"\\"\\"
  cql: String
}

type UserSubscriptions {
  infomedia: Boolean!
  digitalArticleService: Boolean!
  demandDrivenAcquisition: Boolean!
}

\\"\\"\\"Response object for bookmark request\\"\\"\\"
type BookMarkResponse {
  result: [BookMark!]!
  hitcount: Int!
}

\\"\\"\\"Orders made through bibliotek.dk\\"\\"\\"
type BibliotekDkOrders {
  result: [BibliotekDkOrder!]
  hitcount: Int!
}

type BibliotekDkOrder {
  \\"\\"\\"Unique id for the order\\"\\"\\"
  orderId: String

  \\"\\"\\"Work data for the given order\\"\\"\\"
  work: Work

  \\"\\"\\"Date and time when the order was created\\"\\"\\"
  creationDate: String
}

\\"\\"\\"Enum holding potential errors from undici fetch\\"\\"\\"
enum RequestStatusEnum {
  UND_ERR_HEADERS_TIMEOUT
  UNKNOWN_ERROR
  OK
}

\\"\\"\\"User orders\\"\\"\\"
type UserStatusOrders {
  status: Boolean!
  statusCode: RequestStatusEnum
  result: [Order!]!
}

\\"\\"\\"User debt\\"\\"\\"
type UserStatusDebt {
  status: Boolean!
  statusCode: RequestStatusEnum
  result: [Debt!]!
}

\\"\\"\\"User loans\\"\\"\\"
type UserStatusLoans {
  status: Boolean!
  statusCode: RequestStatusEnum
  result: [Loan!]!
}

type Loan {
  dueDate: DateTime!
  loanId: String!
  agencyId: String!
  creator: String
  title: String
  edition: String
  pages: String
  publisher: String
  language: String
  manifestation: Manifestation
  materialType: String
}

enum OrderStatusEnum {
  ACTIVE
  IN_PROCESS
  AVAILABLE_FOR_PICKUP
  EXPIRED
  REQUESTED_VIA_ILL
  AT_RESERVATION_SHELF
  UNKNOWN
}

type Order {
  orderId: String!
  orderType: String
  status: OrderStatusEnum!
  pickUpBranch: Branch!
  agencyId: String!
  holdQueuePosition: String
  orderDate: DateTime!
  creator: String
  title: String
  pickUpExpiryDate: DateTime
  manifestation: Manifestation
  edition: String
  language: String
  pages: String
  materialType: String
}

type Debt {
  amount: String!
  agencyId: String!
  creator: String
  currency: String
  date: DateTime
  title: String
}

type UserDataResponse {
  \\"\\"\\"Whether the operation was sucess or not\\"\\"\\"
  success: Boolean!

  \\"\\"\\"Error message if request fails\\"\\"\\"
  errorMessage: String
}

type BookMarkId {
  bookMarkId: Int!
}

enum BookMarkOrderByEnum {
  CREATEDAT
  TITLE
}

type BookMark {
  materialType: String!
  materialId: String!
  bookmarkId: Int
  createdAt: DateTime
  workId: String
  agencyId: String
}

type AddBookMarkResponse {
  bookmarksAdded: [BookMark]
  bookmarksAlreadyExists: [BookMark]
}

input BookMarkInput {
  materialType: String!
  materialId: String!
  title: String!
  workId: String
}

type BookMarkDeleteResponse {
  IdsDeletedCount: Int! @deprecated(reason: \\"Use 'BookMarkDeleteResponse.idsDeletedCount' instead expires: 01/06-2025\\")
  idsDeletedCount: Int!
}

type SavedSearchDeleteResponse {
  idsDeletedCount: Int!
  message: String
}

type SavedSearchUpdateResponse {
  message: String
}

type OmittedCulrDataResponse {
  hasOmittedCulrUniqueId: Boolean!
  hasOmittedCulrMunicipality: Boolean!
  hasOmittedCulrMunicipalityAgencyId: Boolean!
  hasOmittedCulrAccounts: Boolean!
}

type UserMutations {
  \\"\\"\\"Add user to userdata service\\"\\"\\"
  addUserToUserDataService: UserDataResponse

  \\"\\"\\"Delete user from userdata service\\"\\"\\"
  deleteUserFromUserDataService: UserDataResponse

  \\"\\"\\"
  Add an orderId to a user. Will create user in userdata service if they dont exist
  \\"\\"\\"
  addOrderToUserData(orderId: String!): UserDataResponse

  \\"\\"\\"Remove order from userData service\\"\\"\\"
  deleteOrderFromUserData(orderId: String!): UserDataResponse

  \\"\\"\\"
  Set a favorite pickup branch. Will create user in userdata service if they dont exist
  \\"\\"\\"
  setFavoritePickUpBranch(favoritePickUpBranch: String!): UserDataResponse

  \\"\\"\\"Sets favoritePickUpBranch to null\\"\\"\\"
  clearFavoritePickUpBranch: UserDataResponse

  \\"\\"\\"
  Change users consent for storing order history for more than 30 days. If false, order history will be deleted after 30 days.
  \\"\\"\\"
  setPersistUserDataValue(persistUserData: Boolean!): UserDataResponse

  \\"\\"\\"Add a bookmark\\"\\"\\"
  addBookmarks(bookmarks: [BookMarkInput!]!): AddBookMarkResponse

  \\"\\"\\"Delete a bookmark\\"\\"\\"
  deleteBookmarks(bookmarkIds: [Int!]!): BookMarkDeleteResponse

  \\"\\"\\"Add a saved search\\"\\"\\"
  addSavedSearch(searchObject: String!): SavedSearch

  \\"\\"\\"Update one savedSearch\\"\\"\\"
  updateSavedSearch(savedSearchId: Int!, searchObject: String!): SavedSearchUpdateResponse

  \\"\\"\\"Delete one or more saved searches\\"\\"\\"
  deleteSavedSearches(savedSearchIds: [Int!]!): SavedSearchDeleteResponse
}

enum VipLanguageTypeEnum {
  DAN
  ENG
}

type VipLanguageTypeAttribute {
  \\"\\"\\"Language type. Can be either \\"DAN\\" or \\"ENG\\".\\"\\"\\"
  language: VipLanguageTypeEnum

  \\"\\"\\"Value. Example: \\"Hillerød Bibliotek\\" or \\"Hillerød Public Library\\".\\"\\"\\"
  value: String
}

type Geolocation {
  \\"\\"\\"Latitudinal coordinate. Example: \\"55.680887\\".\\"\\"\\"
  latitude: Float

  \\"\\"\\"Longitudinal coordinate. Example: \\"12.573619\\".\\"\\"\\"
  longitude: Float
}

enum VipLibraryTypeEnum {
  ALLE
  FOLKEBIBLIOTEK
  FORSKNINGSBIBLIOTEK
  SKOILEBIBLIOTEK
  OTHER
}

enum VipLibraryStatusEnum {
  ALLE
  AKTIVE
  USYNLIG
  SLETTET
}

type VipProfile {
  \\"\\"\\"Profile name. Example: \\"opac\\".\\"\\"\\"
  profileName: String

  \\"\\"\\"Use present sources. Indicates if this profile uses available sources.\\"\\"\\"
  usePresentSources: Boolean

  \\"\\"\\"List of sources.\\"\\"\\"
  source: [VipSource]
}

type VipRelation {
  \\"\\"\\"RDF label. Example: \\"dbcaddi:continues\\".\\"\\"\\"
  rdfLabel: String

  \\"\\"\\"RDF inverse. The inverse RDF label. Example: \\"dbcaddi:continuedIn\\".\\"\\"\\"
  rdfInverse: String
}

type VipSource {
  \\"\\"\\"Source name. Example: \\"Artikelbasens avisartikler med infomedialink\\".\\"\\"\\"
  sourceName: String

  \\"\\"\\"Source searchable. Indicates whether the source is searchable.\\"\\"\\"
  sourceSearchable: Boolean

  \\"\\"\\"
  Source contained in. ID of the source that contains this source. Example: \\"870971-avis\\".
  \\"\\"\\"
  sourceContainedIn: String

  \\"\\"\\"Source identifier. Example: \\"870971-avisinf\\".\\"\\"\\"
  sourceIdentifier: String

  \\"\\"\\"Source owner. Only filled if not querying for v3. Example: \\"100200\\".\\"\\"\\"
  sourceOwner: String

  \\"\\"\\"Source format. Only filled if not querying for v3. Example: \\"catalog\\".\\"\\"\\"
  sourceFormat: String

  \\"\\"\\"List of the source's relations.\\"\\"\\"
  relation: [VipRelation]
}

enum VipResponseStatusEnum {
  OK_200
  NO_AUTHORISATION
}

type AgencyInfoResponse {
  result: [VipAgencyInfo!]!
  status: VipResponseStatusEnum!
}

type OpensearchProfilesResponse {
  result: [VipProfile!]!
  status: VipResponseStatusEnum!
}

type AutoIllParamsResponse {
  automationParams: [AutomationParams]
}

type AutomationParams {
  \\"\\"\\"AgencyId of given provider\\"\\"\\"
  provider: String

  \\"\\"\\"Ill parameters for given provider\\"\\"\\"
  materials: [Materials]
}

type Materials {
  \\"\\"\\"Material id (1, 2, 3, 4, 5, 6, 7, 9)\\"\\"\\"
  material: Int!

  \\"\\"\\"
  Name of materialtype eg. \\"Bøger på dansk\\", \\"Lydmaterialer på bånd\\", osv.
  \\"\\"\\"
  name: String!

  \\"\\"\\"Does given provider loan this material ?\\"\\"\\"
  willProvide: Boolean!

  \\"\\"\\"Period from acquisition of material to ill loan eg. 60 (days)\\"\\"\\"
  period: Int!
}

type VipResponse {
  agencyInfo(
    \\"\\"\\"
    Agency ID of the library, supports either agency ID or ISIL.
    Example: 721900, DK-721900
    \\"\\"\\"
    branchId: String

    \\"\\"\\"
    Agency name of the library, can be part of the name. Search is case-insensitive.
    Example: \\"hillerød\\" will find \\"Hillerød Bibliotekerne\\"
    \\"\\"\\"
    agencyName: String

    \\"\\"\\"
    Agency ID. Search for all libraries under a single main library. Also supports searching using ISIL.
    Example: 721900 will find 721900, 721902, 721903, and 721904
    Example: DK-721900 will find 721900, 721902, 721903, and 721904
    \\"\\"\\"
    agencyId: String

    \\"\\"\\"
    Agency address. Search using whole or part of the address. Search is case-insensitive.
    Example: \\"christian\\" will match \\"Christiansgade 1\\"
    \\"\\"\\"
    agencyAddress: String

    \\"\\"\\"
    Postal code. Search using a 4-digit Danish postal code.
    Example: 3400 or 9000
    \\"\\"\\"
    postalCode: String

    \\"\\"\\"
    City. Search using the whole or part of the city name. Search is case-insensitive.
    Example: \\"illerø\\" will match \\"Hillerød\\"
    \\"\\"\\"
    city: String

    \\"\\"\\"Last updated date.\\"\\"\\"
    lastUpdated: String

    \\"\\"\\"Library type. Search using the type of library.\\"\\"\\"
    libraryType: VipLibraryTypeEnum

    \\"\\"\\"Library status. Search using the library status.\\"\\"\\"
    libraryStatus: VipLibraryStatusEnum

    \\"\\"\\"
    Pickup allowed. Search for libraries that allow pickup. Can be \\"true\\" or \\"false\\".
    \\"\\"\\"
    pickupAllowed: Boolean
  ): AgencyInfoResponse!
  opensearchProfiles(agencyId: String!, profileName: String): OpensearchProfilesResponse!
  autoIll(agencyId: String): AutoIllParamsResponse!

  \\"\\"\\"
  Returns a prioritized list of library numbers that the given library should order from.
  \\"\\"\\"
  requestOrder(agencyId: String!): RequestOrderResponse!
}

type RequestOrderResponse {
  \\"\\"\\"
  Prioritized list of library numbers that the given library should order from
  \\"\\"\\"
  agencyIds: [String!]!
}

type VipAgencyInfo {
  pickupAgency: VipAgency
}

type VipAgency {
  \\"\\"\\"Agency name. Example: \\"Hillerød Bibliotekerne\\".\\"\\"\\"
  agencyName: String

  \\"\\"\\"
  Agency ID. If this is a branch, this will be the main library's ID. Example: \\"721900\\".
  \\"\\"\\"
  agencyId: String!

  \\"\\"\\"Type of agency. Example: \\"Public Library\\".\\"\\"\\"
  agencyType: String

  \\"\\"\\"Agency email address. Example: \\"bibliotek@hillerod.dk\\".\\"\\"\\"
  agencyEmail: String

  \\"\\"\\"Agency phone number. Example: \\"72 32 58 00\\".\\"\\"\\"
  agencyPhone: String

  \\"\\"\\"Agency fax number. Example: \\"72 32 58 00\\".\\"\\"\\"
  agencyFax: String

  \\"\\"\\"Agency CVR number. Example: \\"29189366\\".\\"\\"\\"
  agencyCvrNumber: String

  \\"\\"\\"Agency P number. Example: \\"1003280670\\".\\"\\"\\"
  agencyPNumber: String

  \\"\\"\\"Agency EAN number. Example: \\"5798008307713\\".\\"\\"\\"
  agencyEanNumber: String

  \\"\\"\\"Agency branch ID. Example: \\"721902\\".\\"\\"\\"
  branchId: String!

  \\"\\"\\"Branch type. Example: \\"f\\".\\"\\"\\"
  branchType: String

  \\"\\"\\"Branch name. Example: \\"Skævinge\\" or \\"Skævinge Library\\".\\"\\"\\"
  branchName: [VipLanguageTypeAttribute]

  \\"\\"\\"
  Branch short name. Example: \\"Hillerød Bibliotekerne\\" or \\"Hillerød Library\\".
  \\"\\"\\"
  branchShortName: [VipLanguageTypeAttribute]

  \\"\\"\\"Branch phone number. Example: \\"72325900\\".\\"\\"\\"
  branchPhone: String

  \\"\\"\\"Branch email address. Example: \\"bibliotek@hillerod.dk\\".\\"\\"\\"
  branchEmail: String

  \\"\\"\\"Branch ILL email address. Example: \\"danbib@hillerod.dk\\".\\"\\"\\"
  branchIllEmail: String

  \\"\\"\\"Branch is an agency.\\"\\"\\"
  branchIsAgency: Boolean

  \\"\\"\\"Agency address. Example: \\"Christiansgade 1\\".\\"\\"\\"
  postalAddress: String

  \\"\\"\\"Agency postal code. Example: \\"3400\\".\\"\\"\\"
  postalCode: String

  \\"\\"\\"City. Example: \\"Hillerød\\".\\"\\"\\"
  city: String

  \\"\\"\\"Agency ISIL number. Example: \\"DK-721900\\".\\"\\"\\"
  isil: String

  \\"\\"\\"Junction. Routing drop-off point. Example: \\"715700\\".\\"\\"\\"
  junction: String

  \\"\\"\\"Branch P number. Example: \\"1003280670\\".\\"\\"\\"
  branchPNumber: String

  \\"\\"\\"Branch catalog URL. Example: \\"https://hilbib.dk\\".\\"\\"\\"
  branchCatalogueUrl: String

  \\"\\"\\"Lookup URL. Example: \\"https://hilbib.dk/work/work-of:870970-basis:\\".\\"\\"\\"
  lookupUrl: String

  \\"\\"\\"Branch website URL. Example: \\"https://hilbib.dk\\".\\"\\"\\"
  branchWebsiteUrl: String

  \\"\\"\\"Service declaration URL. Example: \\"https://www.hvidovrebib.dk\\".\\"\\"\\"
  serviceDeclarationUrl: String

  \\"\\"\\"
  Registration form URL. URL for registering new users. Example: \\"https://hilbib.dk/registration\\".
  \\"\\"\\"
  registrationFormUrl: String

  \\"\\"\\"
  Registration form URL text. Text shown with the URL for registering new users. Example: \\"Create a library user\\".
  \\"\\"\\"
  registrationFormUrlText: String

  \\"\\"\\"Library.dk support email. Example: \\"bibliotek@kff.kk.dk\\".\\"\\"\\"
  librarydkSupportEmail: String

  \\"\\"\\"Library.dk support phone. Example: \\"33 66 30 00\\".\\"\\"\\"
  librarydkSupportPhone: String

  \\"\\"\\"
  Agency subdivisions. List of the library’s subdivisions. Example: \\"Vigersted (Community Hall)\\", \\"Ørslev (Brugsen)\\", \\"Høm (Høm Byvej v. Smedemestervej 1)\\".
  \\"\\"\\"
  agencySubdivision: [String]

  \\"\\"\\"
    Opening hours. Example: \\"Opening hours
  See opening hours on:
  bibliotek.kk.dk/biblioteker\\".
  \\"\\"\\"
  openingHours: [VipLanguageTypeAttribute]

  \\"\\"\\"Temporarily closed. Indicates if the library is temporarily closed.\\"\\"\\"
  temporarilyClosed: Boolean

  \\"\\"\\"
  Temporarily closed reason. Message when the library is temporarily closed.
  \\"\\"\\"
  temporarilyClosedReason: [VipLanguageTypeAttribute]

  \\"\\"\\"
  ILL order receipt text. Example: \\"https://bibliotek.kk.dk/help/general-info/library-regulations\\".
  \\"\\"\\"
  illOrderReceiptText: [VipLanguageTypeAttribute]

  \\"\\"\\"Pickup allowed. Indicates if the library allows material pickup.\\"\\"\\"
  pickupAllowed: Boolean

  \\"\\"\\"NCIP lookup user.\\"\\"\\"
  ncipLookupUser: Boolean

  \\"\\"\\"NCIP renew order.\\"\\"\\"
  ncipRenewOrder: Boolean

  \\"\\"\\"NCIP cancel order.\\"\\"\\"
  ncipCancelOrder: Boolean

  \\"\\"\\"NCIP update order.\\"\\"\\"
  ncipUpdateOrder: Boolean

  \\"\\"\\"NCIP server address. Example: \\"https://cicero-fbs.com/rest/ncip/\\".\\"\\"\\"
  ncipServerAddress: String

  \\"\\"\\"NCIP server password.\\"\\"\\"
  ncipPassword: String

  \\"\\"\\"
  Drop-off branch. Branch used for returning materials. Example: \\"710123\\".
  \\"\\"\\"
  dropOffBranch: String

  \\"\\"\\"
  Drop-off name. Name of the branch used for returns. Example: \\"Copenhagen Library central sorting\\".
  \\"\\"\\"
  dropOffName: String

  \\"\\"\\"
  Last update. The last update of the library’s VIP data. Example: \\"2024-08-11\\".
  \\"\\"\\"
  lastUpdated: String

  \\"\\"\\"Is OCLC library. The library has records in WorldCat.\\"\\"\\"
  isOclcRsLibrary: Boolean

  \\"\\"\\"State and university library copy service.\\"\\"\\"
  stateAndUniversityLibraryCopyService: Boolean

  \\"\\"\\"Geo location. Geographical coordinates.\\"\\"\\"
  geolocation: Geolocation

  \\"\\"\\"Head of institution name. Example: \\"Jakob Heide Petersen\\".\\"\\"\\"
  headOfInstitutionName: String

  \\"\\"\\"Head of institution title. Example: \\"Head of Copenhagen Libraries\\".\\"\\"\\"
  headOfInstitutionTitle: String

  \\"\\"\\"
  Branch service text. Example: \\"We lend books to big and small readers\\".
  \\"\\"\\"
  branchServiceTxt: String

  \\"\\"\\"
  National delivery service. Indicates if the library is part of the national delivery scheme.
  \\"\\"\\"
  nationalDeliveryService: Boolean

  \\"\\"\\"
  Will receive ILL. Indicates if the library accepts interlibrary loan requests.
  \\"\\"\\"
  willReceiveIll: Boolean

  \\"\\"\\"
  Will receive ILL text. Message when the library does not accept interlibrary loan requests. Example: \\"Faaborg Public Library is closed from 24/12 to 1/1. Danbib orders are not processed during this period. From 2/1, orders will be processed again at Faaborg-Midtfyn Libraries.\\".
  \\"\\"\\"
  willReceiveIllTxt: String

  \\"\\"\\"Localisation name. The name used in Netpunkt. Example: \\"KKB\\".\\"\\"\\"
  localisationName: String

  \\"\\"\\"
  Information regarding temporary restrictions or special conditions for interlibrary loans
  \\"\\"\\"
  interLibraryLoanText: String

  \\"\\"\\"Route number.\\"\\"\\"
  routeNumber: String

  \\"\\"\\"
  ILL service text. Example: \\"https://bibliotek.kk.dk/help/general-info/library-regulations\\".
  \\"\\"\\"
  illServiceTxt: String @deprecated(reason: \\"Use correct 'illServiceTekst' instead expires: 01/04-2025\\")

  \\"\\"\\"
  THE REAL ILL service tekst. Example: \\"https://bibliotek.kk.dk/help/general-info/library-regulations\\".
  \\"\\"\\"
  illServiceTekst: String

  \\"\\"\\"
  Opening hours URL. Link to the library’s opening hours. Example: \\"https://www.bibliotek.alleroed.dk/opening-hours\\".
  \\"\\"\\"
  openingHoursUrl: String

  \\"\\"\\"Payment URL. Example: \\"https://www.hilbib.dk\\".\\"\\"\\"
  paymentUrl: String

  \\"\\"\\"
  Head of branch name. Name of the branch manager. Example: \\"Stine Holmstrøm Have\\".
  \\"\\"\\"
  headOfBranchName: String

  \\"\\"\\"Head of branch title. Example: \\"Library Manager\\".\\"\\"\\"
  headOfBranchTitle: String
}

type VipIso18626 {
  \\"\\"\\"
  ISO18626 address. ISO18626 server address. Example: \\"https://iso18626.addi.dk/copa-rs/app/iso18626/\\".
  \\"\\"\\"
  iso18626Address: String

  \\"\\"\\"ISO18626 password.\\"\\"\\"
  iso18626Password: String
}

type Vipz3950Ill {
  \\"\\"\\"
  Z39.50 address. Z39.50 server address. Example: \\"87.48.149.131:2100/default\\".
  \\"\\"\\"
  z3950Address: String

  \\"\\"\\"Z39.50 group ID.\\"\\"\\"
  z3950GroupId: String

  \\"\\"\\"Z39.50 user ID.\\"\\"\\"
  z3950UserId: String

  \\"\\"\\"Z39.50 password.\\"\\"\\"
  z3950Password: String

  \\"\\"\\"ILL request.\\"\\"\\"
  illRequest: Boolean

  \\"\\"\\"ILL answer.\\"\\"\\"
  illAnswer: Boolean

  \\"\\"\\"ILL shipped.\\"\\"\\"
  illShipped: Boolean

  \\"\\"\\"ILL cancel.\\"\\"\\"
  illCancel: Boolean

  \\"\\"\\"ILL cancel reply.\\"\\"\\"
  illCancelReply: Boolean

  \\"\\"\\"ILL cancel reply synchronous.\\"\\"\\"
  illCancelReplySynchronous: Boolean

  \\"\\"\\"ILL renew.\\"\\"\\"
  illRenew: Boolean

  \\"\\"\\"ILL renew answer.\\"\\"\\"
  illRenewAnswer: Boolean

  \\"\\"\\"ILL renew answer synchronous.\\"\\"\\"
  illRenewAnswerSynchronous: Boolean
}

type Language {
  \\"\\"\\"Language as displayable text\\"\\"\\"
  display: String!

  \\"\\"\\"ISO639-2 language code\\"\\"\\"
  isoCode: String!

  \\"\\"\\"ISO639-1 language code (2 letters)\\"\\"\\"
  iso639Set1: String!

  \\"\\"\\"ISO639-2 language code (3 letters)\\"\\"\\"
  iso639Set2: String!
}

type GeneralMaterialType {
  \\"\\"\\"
  code for materialType # @TODO - is this a finite list ?? - and where to get it
  \\"\\"\\"
  code: GeneralMaterialTypeCodeEnum!

  \\"\\"\\"Ths string to display\\"\\"\\"
  display: String!
}

type SpecificMaterialType {
  \\"\\"\\"code for materialType\\"\\"\\"
  code: String!

  \\"\\"\\"Ths string to display\\"\\"\\"
  display: String!
}

type MaterialType {
  \\"\\"\\"jed 1.1 - the general materialtype\\"\\"\\"
  materialTypeGeneral: GeneralMaterialType!

  \\"\\"\\"jed 1.1 - the specific materialtType\\"\\"\\"
  materialTypeSpecific: SpecificMaterialType!
}

enum FictionNonfictionCodeEnum {
  FICTION
  NONFICTION
  NOT_SPECIFIED
}

type FictionNonfiction {
  \\"\\"\\"
  Displayable overall category/genre. In Danish skønlitteratur/faglitteratur for literature, fiktion/nonfiktion for other types.
  \\"\\"\\"
  display: String!

  \\"\\"\\"Binary code fiction/nonfiction used for filtering\\"\\"\\"
  code: FictionNonfictionCodeEnum!
}

type DK5MainEntry {
  \\"\\"\\"Displayable main DK5 classification\\"\\"\\"
  display: String!

  \\"\\"\\"Main DK5 classification code\\"\\"\\"
  code: String!

  \\"\\"\\"The dk5Heading for the classification\\"\\"\\"
  dk5Heading: String!
}

enum WorkTypeEnum {
  ANALYSIS
  ARTICLE
  BOOKDESCRIPTION
  GAME
  LITERATURE
  MAP
  MOVIE
  MUSIC
  OTHER
  PERIODICA
  PORTRAIT
  REVIEW
  SHEETMUSIC
  TRACK
}

type WorkTitles {
  \\"\\"\\"The main title(s) of the work\\"\\"\\"
  main: [String!]!

  \\"\\"\\"The full title(s) of the work including subtitles etc\\"\\"\\"
  full: [String!]!

  \\"\\"\\"Titles (in other languages) parallel to the main 'title' of the work\\"\\"\\"
  parallel: [String!]!

  \\"\\"\\"The sorted title of the entity\\"\\"\\"
  sort: String!

  \\"\\"\\"
  The title of the work that this expression/manifestation is translated from or based on. The original title(s) of a film which has a different distribution title.
  \\"\\"\\"
  original: [String!]

  \\"\\"\\"The standard title of the entity, used for music and movies\\"\\"\\"
  standard: String

  \\"\\"\\"
  The title of the entity with the language of the entity in parenthesis after. This field is only generated for non-danish titles.
  \\"\\"\\"
  titlePlusLanguage: String

  \\"\\"\\"Danish translation of the main title\\"\\"\\"
  translated: [String!]

  \\"\\"\\"detailed title for tv series \\"\\"\\"
  tvSeries: TvSeries
}

type TvSeries {
  \\"\\"\\"Title of the tv serie\\"\\"\\"
  title: String

  \\"\\"\\"Dansih translated title of the tv serie\\"\\"\\"
  danishLaunchTitle: String

  \\"\\"\\"Detailed information about the episode\\"\\"\\"
  episode: TvSeriesDetails

  \\"\\"\\"Episode titles\\"\\"\\"
  episodeTitles: [String!]

  \\"\\"\\"Detailed information about the disc\\"\\"\\"
  disc: TvSeriesDetails

  \\"\\"\\"Detailed information about the season\\"\\"\\"
  season: TvSeriesDetails

  \\"\\"\\"Detailed information about the volume\\"\\"\\"
  volume: TvSeriesDetails
}

type TvSeriesDetails {
  display: String
  numbers: [Int!]
}
"
`;

exports[`default schema transform 1`] = `
"directive @fallback on ENUM_VALUE

\\"\\"\\"Complexity directive to evaluate query complexity \\"\\"\\"
directive @complexity(value: Int!, multipliers: [String!]) on FIELD_DEFINITION

\\"\\"\\"
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
\\"\\"\\"
scalar DateTime

enum AccessTypeCodeEnum {
  PHYSICAL
  ONLINE
  UNKNOWN
}

enum AccessUrlTypeEnum {
  IMAGE
  OTHER
  RESOURCE
  SAMPLE
  TABLE_OF_CONTENTS
  THUMBNAIL
}

enum LinkStatusEnum {
  BROKEN
  GONE
  INVALID
  OK
}

type AccessType {
  display: String!
  code: AccessTypeCodeEnum!
}

type Ereol {
  \\"\\"\\"
  The origin, e.g. \\"Ereolen\\" or \\"Ereolen Go\\"
  \\"\\"\\"
  origin: String!

  \\"\\"\\"The url where manifestation is located\\"\\"\\"
  url: String!

  \\"\\"\\"
  Is this a manifestation that always can be loaned on ereolen.dk even if you've run out of loans this month
  \\"\\"\\"
  canAlwaysBeLoaned: Boolean!

  \\"\\"\\"Notes for the resource\\"\\"\\"
  note: String
}

type AccessUrl {
  \\"\\"\\"
  The origin, e.g. \\"DBC Webarkiv\\"
  \\"\\"\\"
  origin: String!

  \\"\\"\\"Description/type of URL\\"\\"\\"
  urlText: String

  \\"\\"\\"The url where manifestation is located\\"\\"\\"
  url: String!

  \\"\\"\\"Notes for the resource\\"\\"\\"
  note: String

  \\"\\"\\"If the resource requires login\\"\\"\\"
  loginRequired: Boolean!

  \\"\\"\\"The type of content that can be found at this URL\\"\\"\\"
  type: AccessUrlTypeEnum

  \\"\\"\\"Status from linkcheck\\"\\"\\"
  status: LinkStatusEnum!
}

type InterLibraryLoan {
  \\"\\"\\"Is true when manifestation can be borrowed via ill\\"\\"\\"
  loanIsPossible: Boolean!

  \\"\\"\\"Is newly added - nice to know if there are no localizations\\"\\"\\"
  accessNew: Boolean!
}

type InfomediaService {
  \\"\\"\\"
  Infomedia ID which can be used to fetch article through Infomedia Service
  \\"\\"\\"
  id: String!
}

type DigitalArticleService {
  \\"\\"\\"
  Issn which can be used to order article through Digital Article Service
  \\"\\"\\"
  issn: String!
}

union AccessUnion = AccessUrl | Ereol | InterLibraryLoan | InfomediaService | DigitalArticleService

type Mutation {
  elba: ElbaServices!
}

type Query {
  \\"\\"\\"All indexes in complex search\\"\\"\\"
  complexSearchIndexes: [ComplexSearchIndex!]
  debug: Debug
  mood: MoodQueries!

  \\"\\"\\"Access to various types of recommendations.\\"\\"\\"
  recommendations: Recommendations!
  manifestation(pid: String, faust: String): Manifestation
  manifestations(faust: [String!], pid: [String!]): [Manifestation]!
  work(id: String, faust: String, pid: String, oclc: String, language: LanguageCodeEnum): Work
  works(id: [String!], faust: [String!], pid: [String!], oclc: [String!], language: LanguageCodeEnum): [Work]!
  search(q: SearchQueryInput!, filters: SearchFiltersInput, search_exact: Boolean): SearchResponse!
  complexSearch(cql: String!, filters: ComplexSearchFiltersInput, facets: ComplexSearchFacetsInput): ComplexSearchResponse!
  linkCheck: LinkCheckService!
  localSuggest(
    \\"\\"\\"The query to get suggestions from\\"\\"\\"
    q: String!

    \\"\\"\\"suggest type to include in result\\"\\"\\"
    suggestType: [SuggestionTypeEnum!]

    \\"\\"\\"Number of items to return\\"\\"\\"
    limit: Int

    \\"\\"\\"Id of branch to filter by\\"\\"\\"
    branchId: String
  ): LocalSuggestResponse!
  complexSuggest(
    \\"\\"\\"The query to get suggestions for\\"\\"\\"
    q: String!

    \\"\\"\\"the type of index to get suggestions from\\"\\"\\"
    type: ComplexSuggestionTypeEnum!
  ): ComplexSuggestResponse!
  suggest(
    workType: WorkTypeEnum

    \\"\\"\\"The query to get suggestions from\\"\\"\\"
    q: String!

    \\"\\"\\"suggest type to include in result\\"\\"\\"
    suggestType: SuggestionTypeEnum

    \\"\\"\\"suggest types to include in result\\"\\"\\"
    suggestTypes: [SuggestionTypeEnum!]

    \\"\\"\\"Number of items to return\\"\\"\\"
    limit: Int
  ): SuggestResponse!

  \\"\\"\\"Get recommendations\\"\\"\\"
  recommend(id: String, pid: String, faust: String, limit: Int, branchId: String): RecommendationResponse!
  infomedia(id: String!): InfomediaResponse!
  refWorks(pids: [String!]!): String!
  ris(pids: [String!]!): String!
  relatedSubjects(q: [String!]!, limit: Int): [String!] @deprecated(reason: \\"Use 'Recommendations.subjects' instead expires: 01/03-2025\\")
  series(seriesId: String!): Series
  universe(key: String, universeId: String): Universe
}

type ComplexSearchIndex {
  \\"\\"\\"The name of a Complex Search index\\"\\"\\"
  index: String!

  \\"\\"\\"Can be used for searching\\"\\"\\"
  search: Boolean!

  \\"\\"\\"Can be used for faceting\\"\\"\\"
  facet: Boolean!

  \\"\\"\\"Can be used for sorting\\"\\"\\"
  sort: Boolean!

  \\"\\"\\"Aliases for this index\\"\\"\\"
  aliases: [String!]
}

\\"\\"\\"Search Filters\\"\\"\\"
input ComplexSearchFiltersInput {
  \\"\\"\\"BranchId. \\"\\"\\"
  branchId: [String!]

  \\"\\"\\"Overall location in library (eg. Voksne).\\"\\"\\"
  department: [String!]

  \\"\\"\\"Where is the book physically located  (eg. skønlitteratur).\\"\\"\\"
  location: [String!]

  \\"\\"\\"More specific location (eg. Fantasy).\\"\\"\\"
  sublocation: [String!]

  \\"\\"\\"Onloan or OnShelf.\\"\\"\\"
  status: [HoldingsStatusEnum!]

  \\"\\"\\"Id of agency.\\"\\"\\"
  agencyId: [String!]

  \\"\\"\\"Name of the branch.\\"\\"\\"
  branch: [String!]

  \\"\\"\\"Local id of the item.\\"\\"\\"
  itemId: [String!]

  \\"\\"\\"Id of publishing issue.\\"\\"\\"
  issueId: [String!]

  \\"\\"\\"Date of first accession\\"\\"\\"
  firstAccessionDate: String
}

enum SortOrderEnum {
  ASC
  DESC
}

input SortInput {
  index: String!
  order: SortOrderEnum!
}

\\"\\"\\"The supported facet fields\\"\\"\\"
enum ComplexSearchFacetsEnum {
  AGES
  CATALOGUECODE
  CONTRIBUTOR
  CONTRIBUTORFUNCTION
  CREATOR
  CREATORCONTRIBUTOR
  CREATORCONTRIBUTORFUNCTION
  CREATORFUNCTION
  FICTIONALCHARACTER
  FILMNATIONALITY
  GAMEPLATFORM
  GENERALAUDIENCE
  GENERALMATERIALTYPE
  GENREANDFORM
  ISSUE
  LANGUAGE
  LIBRARYRECOMMENDATION
  MAINLANGUAGE
  MUSICALENSEMBLEORCAST
  PLAYERS
  PRIMARYTARGET
  SPECIFICMATERIALTYPE
  SPOKENLANGUAGE
  SUBTITLELANGUAGE
  TYPEOFSCORE
  SUBJECT
  HOSTPUBLICATION
  SERIES
  MEDIACOUNCILAGERESTRICTION
  ACCESSTYPE
  MOOD
  NARRATIVETECHNIQUE
  PEGI
  SETTING
  LIX
  LET
  PUBLICATIONYEAR
  SOURCE
  INSTRUMENT
  CHOIRTYPE
  CHAMBERMUSICTYPE
}

\\"\\"\\"The facets to ask for\\"\\"\\"
input ComplexSearchFacetsInput {
  facetLimit: Int!
  facets: [ComplexSearchFacetsEnum!]
}

\\"\\"\\"A Facet value in response\\"\\"\\"
type ComplexSearchFacetValue {
  key: String!
  score: Int!
  traceId: String
}

\\"\\"\\"The complete facet in response\\"\\"\\"
type ComplexSearchFacetResponse {
  name: String
  values: [ComplexSearchFacetValue!]
}

\\"\\"\\"The search response\\"\\"\\"
type ComplexSearchResponse {
  \\"\\"\\"Total number of works found. May be used for pagination.\\"\\"\\"
  hitcount: Int!

  \\"\\"\\"Facets for this response\\"\\"\\"
  facets: [ComplexSearchFacetResponse!]

  \\"\\"\\"
  The works matching the given search query. Use offset and limit for pagination.
  \\"\\"\\"
  works(offset: Int!, limit: PaginationLimitScalar!, sort: [SortInput!]): [Work!]!

  \\"\\"\\"Error message, for instance if CQL is invalid\\"\\"\\"
  errorMessage: String
}

type CoverDetails {
  url: String
  width: Int
  height: Int
}

type Cover {
  detail_117: String
  detail_207: String
  detail_42: String
  detail_500: String
  thumbnail: String
  detail: String
  origin: String
  xSmall: CoverDetails
  small: CoverDetails
  medium: CoverDetails
  large: CoverDetails
}

type Translation {
  \\"\\"\\"
  Translation in plural form, e.g. forfattere, komponister, instruktører etc.
  \\"\\"\\"
  plural: String!

  \\"\\"\\"Translation in singular form, e.g. forfatter, komponist, instruktør\\"\\"\\"
  singular: String!
}

type Role {
  \\"\\"\\"
  The code for the type of creator or contributor, e.g. 'aut' for author, 'ill' for illustrator etc
  \\"\\"\\"
  functionCode: String!

  \\"\\"\\"
  The type of creator/contributor as text in singular and plural in Danish, e.g. forfatter/forfattere, komponist/komponister etc
  \\"\\"\\"
  function: Translation!
}

type Person implements SubjectInterface & CreatorInterface {
  \\"\\"\\"The person's whole name in normal order\\"\\"\\"
  display: String!

  \\"\\"\\"The person's full name inverted\\"\\"\\"
  nameSort: String!

  \\"\\"\\"First name of the person\\"\\"\\"
  firstName: String

  \\"\\"\\"Last name of the person\\"\\"\\"
  lastName: String

  \\"\\"\\"Birth year of the person\\"\\"\\"
  birthYear: String

  \\"\\"\\"A roman numeral added to the person, like Christian IV\\"\\"\\"
  romanNumeral: String

  \\"\\"\\"Added information about the person, like Henri, konge af Frankrig\\"\\"\\"
  attributeToName: String

  \\"\\"\\"Creator aliases, creators behind used pseudonym\\"\\"\\"
  aliases: [Person!]!

  \\"\\"\\"
  A list of which kinds of contributions this person made to this creation
  \\"\\"\\"
  roles: [Role!]!
  type: SubjectTypeEnum!
  language: Language
  local: Boolean
}

type Corporation implements SubjectInterface & CreatorInterface {
  \\"\\"\\"The full corporation or conference name\\"\\"\\"
  display: String!

  \\"\\"\\"The full corporation or conference name to sort after\\"\\"\\"
  nameSort: String!

  \\"\\"\\"Main corporation or conference\\"\\"\\"
  main: String

  \\"\\"\\"Sub corporation or conference/meeting\\"\\"\\"
  sub: String

  \\"\\"\\"
  Location or jurisdiction of the corporation or conference, like Københavns Kommune, Statistisk Kontor
  \\"\\"\\"
  location: String

  \\"\\"\\"Year of the conference\\"\\"\\"
  year: String

  \\"\\"\\"Number of the conference\\"\\"\\"
  number: String

  \\"\\"\\"
  Added information about the corporation, like M. Folmer Andersen (firma)
  \\"\\"\\"
  attributeToName: String

  \\"\\"\\"
  A list of which kinds of contributions this corporation made to this creation
  \\"\\"\\"
  roles: [Role!]!
  type: SubjectTypeEnum!
  language: Language
  local: Boolean
}

interface CreatorInterface {
  \\"\\"\\"Name of the creator\\"\\"\\"
  display: String!

  \\"\\"\\"Name of the creator which can be used to sort after \\"\\"\\"
  nameSort: String!

  \\"\\"\\"
  A list of which kinds of contributions this creator made to this creation
  \\"\\"\\"
  roles: [Role!]!
}

type Complexity {
  value: Int!
  max: Int!
  class: String!
}

type Depth {
  value: Int!
  max: Int!
}

type Debug {
  complexity: Complexity!
  depth: Depth!
}

enum CopyRequestStatusEnum {
  OK
  ERROR_UNAUTHENTICATED_USER
  ERROR_AGENCY_NOT_SUBSCRIBED
  ERROR_INVALID_PICKUP_BRANCH
  ERROR_PID_NOT_RESERVABLE
  ERROR_MISSING_CLIENT_CONFIGURATION
  ERROR_MUNICIPALITYAGENCYID_NOT_FOUND
  ERROR_MISSING_MUNICIPALITYAGENCYID
  UNKNOWN_USER
  BORCHK_USER_BLOCKED_BY_AGENCY
  BORCHK_USER_NO_LONGER_EXIST_ON_AGENCY
  BORCHK_USER_NOT_VERIFIED
  INTERNAL_ERROR
}

type CopyRequestResponse {
  status: CopyRequestStatusEnum!
}

type ElbaServices {
  placeCopyRequest(
    input: CopyRequestInput!

    \\"\\"\\"
    If this is true, the copy request will not be send to the elba service
    Use it for testing
    \\"\\"\\"
    dryRun: Boolean
  ): CopyRequestResponse!
}

input CopyRequestInput {
  \\"\\"\\"The pid of an article or periodica\\"\\"\\"
  pid: String!
  userName: String
  userMail: String
  publicationTitle: String
  publicationDateOfComponent: String
  publicationYearOfComponent: String
  volumeOfComponent: String
  authorOfComponent: String
  titleOfComponent: String
  pagesOfComponent: String
  userInterestDate: String
  pickUpAgencySubdivision: String
  issueOfComponent: String
  openURL: String
}

type Work {
  \\"\\"\\"Field for presenting bibliographic records in MARC format\\"\\"\\"
  marc: MarcRecord

  \\"\\"\\"Relations to other manifestations\\"\\"\\"
  relations: Relations!

  \\"\\"\\"
  A unique identifier for tracking user interactions with this work.
  It is generated in the response and should be included in subsequent
  API calls when this work is selected.
  \\"\\"\\"
  traceId: String!

  \\"\\"\\"
  Unique identification of the work based on work-presentation id e.g work-of:870970-basis:54029519
  \\"\\"\\"
  workId: String!
  titles: WorkTitles!

  \\"\\"\\"Abstract of the entity\\"\\"\\"
  abstract: [String!]

  \\"\\"\\"Creators\\"\\"\\"
  creators: [CreatorInterface!]!

  \\"\\"\\"DK5 main entry for this work\\"\\"\\"
  dk5MainEntry: DK5MainEntry

  \\"\\"\\"
  Overall literary category/genre of this work. e.g. fiction or nonfiction. In Danish skønlitteratur/faglitteratur for literature, fiktion/nonfiktion for other types.
  \\"\\"\\"
  fictionNonfiction: FictionNonfiction

  \\"\\"\\"Date of latest publication\\"\\"\\"
  latestPublicationDate: String

  \\"\\"\\"The type of material of the manifestation based on bibliotek.dk types\\"\\"\\"
  materialTypes: [MaterialType!]!

  \\"\\"\\"Series for this work\\"\\"\\"
  series: [Series!]!

  \\"\\"\\"
  Literary/movie universes this work is part of, e.g. Wizarding World, Marvel Universe
  \\"\\"\\"
  universes: [Universe!]!

  \\"\\"\\"Subjects for this work\\"\\"\\"
  subjects: SubjectContainer!

  \\"\\"\\"The genre, (literary) form, type etc. of this work\\"\\"\\"
  genreAndForm: [String!]!

  \\"\\"\\"Worktypes for this work - 'none' replaced by 'other'\\"\\"\\"
  workTypes: [WorkTypeEnum!]!

  \\"\\"\\"The year this work was originally published or produced\\"\\"\\"
  workYear: PublicationYear

  \\"\\"\\"The main language(s) of the work's content\\"\\"\\"
  mainLanguages: [Language!]!

  \\"\\"\\"Details about the manifestations of this work\\"\\"\\"
  manifestations: Manifestations!
}

enum InfomediaErrorEnum {
  SERVICE_NOT_LICENSED
  SERVICE_UNAVAILABLE
  LIBRARY_NOT_FOUND
  ERROR_IN_REQUEST
  BORROWER_NOT_LOGGED_IN
  BORROWER_NOT_FOUND
  BORROWERCHECK_NOT_ALLOWED
  INTERNAL_SERVER_ERROR
  BORROWER_NOT_IN_MUNICIPALITY
  NO_AGENCYID
}

type InfomediaResponse {
  \\"\\"\\"Infomedia error\\"\\"\\"
  error: InfomediaErrorEnum
  article: InfomediaArticle
}

type InfomediaArticle {
  id: String!
  headLine: String
  subHeadLine: String
  byLine: String
  dateLine: String
  paper: String
  text: String
  hedLine: String
  logo: String
  html: String
}

enum LanguageCodeEnum {
  DA
  EN
}

enum LinkCheckStatusEnum {
  OK
  BROKEN
  INVALID
  GONE
}

type LinkCheckResponse {
  url: String!
  status: LinkCheckStatusEnum!
  lastCheckedAt: DateTime
  brokenSince: DateTime
}

type LinkCheckService {
  checks(urls: [String!]): [LinkCheckResponse!]!
}

type CatalogueCodes {
  \\"\\"\\"CatalogueCodes from the national registers\\"\\"\\"
  nationalBibliography: [String!]!

  \\"\\"\\"
  CatalogueCodes from local bibliographies or catalogues that the manifestation belongs to
  \\"\\"\\"
  otherCatalogues: [String!]!
}

type TableOfContent {
  heading: String
  content: String
  listOfContent: [TableOfContent!]
}

type Shelfmark {
  \\"\\"\\"A postfix to the shelfmark, eg. 99.4 Christensen, Inger. f. 1935\\"\\"\\"
  postfix: String

  \\"\\"\\"
  The actual shelfmark - e.g. information about on which shelf in the library this manifestation can be found, e.g. 99.4
  \\"\\"\\"
  shelfmark: String!
}

type UnitDescription {
  \\"\\"\\"
  Assemblance of the data from all the other properties, separated by a comma
  \\"\\"\\"
  summary: String!

  \\"\\"\\"Technical formats, e.g. Playstation 4, blu-ray\\"\\"\\"
  numberAndType: String

  \\"\\"\\"
  Number of pages, tab (books, articles etc.) or playingtime (cd, dvd etc.)
  \\"\\"\\"
  extent: String

  \\"\\"\\"
  Other physical description, eg. illustrations, color or b/w, mono/stereo, rpm
  \\"\\"\\"
  additionalDescription: String

  \\"\\"\\"Size of the material unit\\"\\"\\"
  size: String

  \\"\\"\\"Technical formats, e.g. Playstation 4, blu-ray\\"\\"\\"
  technicalInformation: String
}

type PhysicalUnitDescription {
  \\"\\"\\"
  A summary of the physical description of this manifestation like extent (pages/minutes), illustrations etc.
  \\"\\"\\"
  summaryFull: String

  \\"\\"\\"List of units contained within the material\\"\\"\\"
  materialUnits: [UnitDescription!]

  \\"\\"\\"Number of pages of the manifestation as number\\"\\"\\"
  numberOfPages: Int

  \\"\\"\\"Material that comes with the manifestation (bilag)\\"\\"\\"
  accompanyingMaterial: String
}

type RelatedPublication {
  \\"\\"\\"
  Notes describing the relation of the related periodical/journal/publication
  \\"\\"\\"
  heading: String!

  \\"\\"\\"Title of the related periodical/journal\\"\\"\\"
  title: [String!]!

  \\"\\"\\"Faust of the related publication\\"\\"\\"
  faust: String

  \\"\\"\\"ISSN of the related periodical/journal/publication\\"\\"\\"
  issn: String

  \\"\\"\\"ISBN of the related publication\\"\\"\\"
  isbn: String

  \\"\\"\\"Alle urls of the related publication\\"\\"\\"
  urls: [String]!

  \\"\\"\\"Note regarding the URL of the related publication\\"\\"\\"
  urlText: String

  \\"\\"\\"The first URL of the urls in related publications\\"\\"\\"
  url: String
}

enum NoteTypeEnum {
  CONNECTION_TO_OTHER_WORKS
  DESCRIPTION_OF_MATERIAL
  DISSERTATION
  MUSICAL_ENSEMBLE_OR_CAST
  NOT_SPECIFIED
  OCCASION_FOR_PUBLICATION
  ORIGINAL_TITLE
  ORIGINAL_VERSION
  REFERENCES
  RESTRICTIONS_ON_USE
  TYPE_OF_SCORE
  FREQUENCY
  EDITION
  TECHNICAL_REQUIREMENTS
  ESTIMATED_PLAYING_TIME_FOR_GAMES
  EXPECTED_PUBLICATION_DATE
  WITHDRAWN_PUBLICATION
  CONTAINS_AI_GENERATED_CONTENT
}

enum ChildOrAdultCodeEnum {
  FOR_CHILDREN
  FOR_ADULTS
}

type ChildOrAdult {
  display: String!
  code: ChildOrAdultCodeEnum!
}

enum SchoolUseCodeEnum {
  FOR_SCHOOL_USE
  FOR_TEACHER
}

type SchoolUse {
  display: String!
  code: SchoolUseCodeEnum!
}

type Note {
  \\"\\"\\"
  The type of note - e.g. note about language, genre etc, NOT_SPECIFIED if not known. 
  \\"\\"\\"
  type: NoteTypeEnum!

  \\"\\"\\"Heading before note\\"\\"\\"
  heading: String

  \\"\\"\\"The actual notes\\"\\"\\"
  display: [String!]!

  \\"\\"\\"A link and possible link text\\"\\"\\"
  urls: [AccessUrl]
}

enum ManifestationPartTypeEnum {
  MUSIC_TRACKS
  SHEET_MUSIC_CONTENT
  PARTS_OF_BOOK
  NOT_SPECIFIED
}

type ManifestationPart {
  \\"\\"\\"The title of the entry (music track or title of a literary analysis)\\"\\"\\"
  title: String!

  \\"\\"\\"The creator of the music track or literary analysis\\"\\"\\"
  creators: [CreatorInterface!]!

  \\"\\"\\"Classification of this entry (music track or literary analysis)\\"\\"\\"
  classifications: [Classification!]!

  \\"\\"\\"Subjects of this entry (music track or literary analysis)\\"\\"\\"
  subjects: [SubjectInterface!]

  \\"\\"\\"
  Additional creator or contributor to this entry (music track or literary analysis) as described on the publication. E.g. 'arr.: H. Cornell'
  \\"\\"\\"
  creatorsFromDescription: [String!]!

  \\"\\"\\"Contributors from description - additional contributor to this entry\\"\\"\\"
  contributorsFromDescription: [String!]!

  \\"\\"\\"
  The playing time for this specific part (i.e. the duration of a music track) 
  \\"\\"\\"
  playingTime: String
}

type ManifestationParts {
  \\"\\"\\"Heading for the music content note\\"\\"\\"
  heading: String

  \\"\\"\\"The creator and title etc of the individual parts\\"\\"\\"
  parts: [ManifestationPart!]!

  \\"\\"\\"The type of manifestation parts, is this music tracks, book parts etc.\\"\\"\\"
  type: ManifestationPartTypeEnum!
}

type Languages {
  \\"\\"\\"
  Notes of the languages that describe subtitles, spoken/written (original, dubbed/synchonized), visual interpretation, parallel (notes are written in Danish)
  \\"\\"\\"
  notes: [String!]

  \\"\\"\\"Main language of this manifestation\\"\\"\\"
  main: [Language!]

  \\"\\"\\"Original language of this manifestation\\"\\"\\"
  original: [Language!]

  \\"\\"\\"
  Parallel languages of this manifestation, if more languages are printed in the same book
  \\"\\"\\"
  parallel: [Language!]

  \\"\\"\\"
  Spoken language in this manifestation e.g. dubbed/syncronized language in movie
  \\"\\"\\"
  spoken: [Language!]

  \\"\\"\\"Subtitles in this manifestation\\"\\"\\"
  subtitles: [Language!]

  \\"\\"\\"
  Summary/abstract languages of this manifestation, if the manifestation contains short summaries of the content in another language
  \\"\\"\\"
  abstract: [Language!]
}

enum IdentifierTypeEnum {
  UPC
  URI
  DOI
  ISBN
  ISSN
  ISMN
  MUSIC
  MOVIE
  PUBLIZON
  NOT_SPECIFIED
  ORDER_NUMBER
  BARCODE
}

type Identifier {
  \\"\\"\\"The type of identifier\\"\\"\\"
  type: IdentifierTypeEnum!

  \\"\\"\\"The actual identifier\\"\\"\\"
  value: String!
}

type HostPublication {
  \\"\\"\\"Publication this manifestation can be found in\\"\\"\\"
  title: String!

  \\"\\"\\"Creator of the host publication if host publication is book\\"\\"\\"
  creator: String

  \\"\\"\\"Edition statement for the host publication\\"\\"\\"
  edition: String

  \\"\\"\\"ISSN of the publication this manifestation can be found in\\"\\"\\"
  issn: String

  \\"\\"\\"ISBN of the publication this manifestation can be found in\\"\\"\\"
  isbn: String

  \\"\\"\\"The issue of the publication this manifestation can be found in\\"\\"\\"
  issue: String

  \\"\\"\\"Notes about the publication where this manifestation can be found in\\"\\"\\"
  notes: [String!]

  \\"\\"\\"The pages in the publication where this manifestation can be found in\\"\\"\\"
  pages: String

  \\"\\"\\"
  The publisher of the publication where this manifestation can be found in
  \\"\\"\\"
  publisher: String

  \\"\\"\\"Series of the publication this manifestation can be found in\\"\\"\\"
  series: Series

  \\"\\"\\"
  The publication year of the publication this manifestation can be found in
  \\"\\"\\"
  year: PublicationYear

  \\"\\"\\"All details about the publication this manifestation can be found in\\"\\"\\"
  summary: String!
}

type Printing {
  \\"\\"\\"
  Properties 'printing' and 'publicationYear' as one string, e.g.: '11. oplag, 2020'
  \\"\\"\\"
  summary: String!

  \\"\\"\\"The printing number and name\\"\\"\\"
  printing: String!

  \\"\\"\\"
  Publisher of printing when other than the original publisher of the edition (260*b)
  \\"\\"\\"
  publisher: String

  \\"\\"\\"A year as displayable text and as number\\"\\"\\"
  publicationYear: PublicationYear
}

type PublicationYear {
  display: String!
  year: Int
  endYear: Int
  frequency: String
}

type Edition {
  \\"\\"\\"
  Properties 'edition', 'contributorsToEdition' and 'publicationYear' as one string, e.g.: '3. udgave, revideret af Hugin Eide, 2005'
  \\"\\"\\"
  summary: String!

  \\"\\"\\"A note about this specific edition\\"\\"\\"
  note: String

  \\"\\"\\"The edition number and name\\"\\"\\"
  edition: String

  \\"\\"\\"Quotation of contributor statements related to the edition\\"\\"\\"
  contributors: [String!]!

  \\"\\"\\"A year as displayable text and as number\\"\\"\\"
  publicationYear: PublicationYear
}

enum EntryTypeEnum {
  ADDITIONAL_ENTRY
  MAIN_ENTRY
  NATIONAL_BIBLIOGRAPHY_ENTRY
  NATIONAL_BIBLIOGRAPHY_ADDITIONAL_ENTRY
}

type Classification {
  \\"\\"\\"The classification code\\"\\"\\"
  code: String!

  \\"\\"\\"The dk5Heading for the classification (DK5 only)\\"\\"\\"
  dk5Heading: String

  \\"\\"\\"Descriptive text for the classification code (DK5 only)\\"\\"\\"
  display: String!

  \\"\\"\\"
  For DK5 only. The DK5 entry type: main entry, national entry, or additional entry
  \\"\\"\\"
  entryType: EntryTypeEnum

  \\"\\"\\"Name of the classification system\\"\\"\\"
  system: String!
}

type Players {
  \\"\\"\\"Number of players interval begin.\\"\\"\\"
  begin: Int

  \\"\\"\\"Number of players interval end.\\"\\"\\"
  end: Int

  \\"\\"\\"Display name for the number of players.\\"\\"\\"
  display: String
}

type PEGI {
  \\"\\"\\"Minimum age to play the game. PEGI rating\\"\\"\\"
  minimumAge: Int

  \\"\\"\\"Display string for PEGI minimum age\\"\\"\\"
  display: String
}

type MediaCouncilAgeRestriction {
  \\"\\"\\"Minimum age\\"\\"\\"
  minimumAge: Int

  \\"\\"\\"Display string for minimum age\\"\\"\\"
  display: String
}

type Audience {
  \\"\\"\\"Appropriate audience for this manifestation\\"\\"\\"
  generalAudience: [String!]!

  \\"\\"\\"
  Range of numbers with either beginning of range or end of range or both e.g. 6-10, 1980-1999
  \\"\\"\\"
  ages: [Range!]!

  \\"\\"\\"Appropriate audience as recommended by the library\\"\\"\\"
  libraryRecommendation: String

  \\"\\"\\"
  Level of difficulty, illustrations, length, and realism in children's literature
  \\"\\"\\"
  levelForChildren8to12: LevelForAudience

  \\"\\"\\"Is this material for children or adults\\"\\"\\"
  childrenOrAdults: [ChildOrAdult!]!

  \\"\\"\\"
  Is this material for use in schools (folkeskole/ungdomsuddannelse) or is this material for use in schools by the teacher (folkeskole only)
  \\"\\"\\"
  schoolUse: [SchoolUse!]!

  \\"\\"\\"Primary target audience for this manifestation\\"\\"\\"
  primaryTarget: [String!]!

  \\"\\"\\"
  LET number of this manifestion, defines the reability level, LET stands for læseegnethedstal
  \\"\\"\\"
  let: String

  \\"\\"\\"
  Lix number of this manifestion, defines the reability level, Lix stands for læsbarhedsindex
  \\"\\"\\"
  lix: String

  \\"\\"\\"Number of players in the game.\\"\\"\\"
  players: Players

  \\"\\"\\"PEGI age rating for games \\"\\"\\"
  PEGI: PEGI @deprecated(reason: \\"Use 'Audience.pegi' instead expires: 01/06-2025\\")

  \\"\\"\\"PEGI age rating for games \\"\\"\\"
  pegi: PEGI

  \\"\\"\\"Media council age recommendation\\"\\"\\"
  mediaCouncilAgeRestriction: MediaCouncilAgeRestriction
}

type LevelForAudience {
  \\"\\"\\"Level expressed as integer on a scale from 1 to 5\\"\\"\\"
  difficulty: Int

  \\"\\"\\"Level expressed as integer on a scale from 1 to 5\\"\\"\\"
  illustrationsLevel: Int

  \\"\\"\\"Level expressed as integer on a scale from 1 to 5\\"\\"\\"
  length: Int

  \\"\\"\\"Level expressed as integer on a scale from 1 to 5\\"\\"\\"
  realisticVsFictional: Int
}

\\"\\"\\"
A search hit that encapsulates a matched manifestation from a search query.
\\"\\"\\"
type SearchHit {
  \\"\\"\\"The manifestation that was matched during the search.\\"\\"\\"
  match: Manifestation
}

type Manifestations {
  first: Manifestation!
  latest: Manifestation!
  all: [Manifestation!]!
  bestRepresentation: Manifestation!
  bestRepresentations: [Manifestation!]!
  mostRelevant: [Manifestation!]!

  \\"\\"\\"
  A list of manifestations that matched the search query.
  
  This field is populated only when a work is retrieved within a search context.
  Each entry is a SearchHit object representing a manifestation that matched the search criteria.
  Only one manifestation per unit is returned.
  \\"\\"\\"
  searchHits: [SearchHit!]
}

type Manifestation {
  \\"\\"\\"
  A unique identifier for tracking user interactions with this manifestation. 
  It is generated in the response and should be included in subsequent
  API calls when this manifestation is selected.
  \\"\\"\\"
  traceId: String!

  \\"\\"\\"Unique identification of the manifestation e.g 870970-basis:54029519\\"\\"\\"
  pid: String!

  \\"\\"\\"Different kinds of titles for this work\\"\\"\\"
  titles: ManifestationTitles!

  \\"\\"\\"Abstract of the entity\\"\\"\\"
  abstract: [String!]!

  \\"\\"\\"Access type of this manifestation\\"\\"\\"
  accessTypes: [AccessType!]!

  \\"\\"\\"Different options to access manifestation\\"\\"\\"
  access: [AccessUnion!]!

  \\"\\"\\"
  Different kinds of definitions of appropriate audience for this manifestation
  \\"\\"\\"
  audience: Audience

  \\"\\"\\"
  CatalogueCodes divided in codes from the national bibliography and other codes
  \\"\\"\\"
  catalogueCodes: CatalogueCodes!

  \\"\\"\\"
  Classification codes for this manifestation from any classification system
  \\"\\"\\"
  classifications: [Classification!]!

  \\"\\"\\"Contributors to the manifestation, actors, illustrators etc\\"\\"\\"
  contributors: [CreatorInterface!]!

  \\"\\"\\"
  Additional contributors of this manifestation as described on the publication. E.g. 'på dansk ved Vivi Berendt'
  \\"\\"\\"
  contributorsFromDescription: [String!]!

  \\"\\"\\"Cover for this manifestation\\"\\"\\"
  cover: Cover!

  \\"\\"\\"
  Primary creators of the manifestation e.g. authors, directors, musicians etc
  \\"\\"\\"
  creators: [CreatorInterface!]!

  \\"\\"\\"
  Additional creators of this manifestation as described on the publication. E.g. 'tekst af William Warren'
  \\"\\"\\"
  creatorsFromDescription: [String!]!

  \\"\\"\\"The year for the publication of the first edition for this work \\"\\"\\"
  dateFirstEdition: PublicationYear

  \\"\\"\\"Edition details for this manifestation\\"\\"\\"
  edition: Edition

  \\"\\"\\"Details about the latest printing of this manifestation\\"\\"\\"
  latestPrinting: Printing

  \\"\\"\\"
  Overall literary category/genre of this manifestation. e.g. fiction or nonfiction. In Danish skønlitteratur/faglitteratur for literature, fiktion/nonfiktion for other types.
  \\"\\"\\"
  fictionNonfiction: FictionNonfiction

  \\"\\"\\"The genre, (literary) form, type etc. of this manifestation\\"\\"\\"
  genreAndForm: [String!]!

  \\"\\"\\"Details about the host publications of this manifestation\\"\\"\\"
  hostPublication: HostPublication

  \\"\\"\\"Identifiers for this manifestation - often used for search indexes\\"\\"\\"
  identifiers: [Identifier!]!

  \\"\\"\\"Languages in this manifestation\\"\\"\\"
  languages: Languages

  \\"\\"\\"
  Tracks on music album, sheet music content, or articles/short stories etc. in this manifestation
  \\"\\"\\"
  manifestationParts: ManifestationParts @deprecated(reason: \\"Use 'Manifestation.contents' instead expires: 01/11-2025\\")

  \\"\\"\\"
  Content title entries with possible creators, contributors and playing time for music tracks, sheet music titles, articles, poems, short stories etc.
  \\"\\"\\"
  contents: [ContentsEntity!]

  \\"\\"\\"The type of material of the manifestation based on bibliotek.dk types\\"\\"\\"
  materialTypes: [MaterialType!]!

  \\"\\"\\"Notes about the manifestation\\"\\"\\"
  notes: [Note!]!

  \\"\\"\\"The work that this manifestation is part of\\"\\"\\"
  ownerWork: Work!

  \\"\\"\\"
  Notes about relations to this book/periodical/journal, - like previous names or related journals
  \\"\\"\\"
  relatedPublications: [RelatedPublication!]!

  \\"\\"\\"
  Physical description  of this manifestation like extent (pages/minutes), illustrations etc.
  \\"\\"\\"
  physicalDescription: PhysicalUnitDescription

  \\"\\"\\"Publisher of this manifestion\\"\\"\\"
  publisher: [String!]!

  \\"\\"\\"
  The creation date of the record describing this manifestation in the format YYYYMMDD
  \\"\\"\\"
  recordCreationDate: String!

  \\"\\"\\"Series for this manifestation\\"\\"\\"
  series: [Series!]!

  \\"\\"\\"Universes for this manifestation\\"\\"\\"
  universes: [Universe!]!

  \\"\\"\\"
  Information about on which shelf in the library this manifestation can be found
  \\"\\"\\"
  shelfmark: Shelfmark

  \\"\\"\\"
  The source of the manifestation, e.g. own library catalogue (Bibliotekskatalog) or online source e.g. Filmstriben, Ebook Central, eReolen Global etc.
  \\"\\"\\"
  source: [String!]!

  \\"\\"\\"Subjects for this manifestation\\"\\"\\"
  subjects: SubjectContainer!

  \\"\\"\\"
  Information about on which volume this manifestation is in multi volume work
  \\"\\"\\"
  volume: String

  \\"\\"\\"
  Quotation of the manifestation's table of contents or a similar content list
  \\"\\"\\"
  tableOfContents: TableOfContent @deprecated(reason: \\"Use 'Manifestation.contents' instead expires: 01/11-2025\\")

  \\"\\"\\"Worktypes for this manifestations work\\"\\"\\"
  workTypes: [WorkTypeEnum!]!

  \\"\\"\\"The year this manifestation was originally published or produced\\"\\"\\"
  workYear: PublicationYear

  \\"\\"\\"id of the manifestaion unit\\"\\"\\"
  unit: Unit

  \\"\\"\\"Identification of the local id of this manifestation\\"\\"\\"
  localId: String

  \\"\\"\\"Material that can be identified as sheet music\\"\\"\\"
  sheetMusicCategories: SheetMusicCategory

  \\"\\"\\"The publication status of a catalogued manifestation.\\"\\"\\"
  cataloguedPublicationStatus: CataloguedPublicationStatus

  \\"\\"\\"Field for presenting bibliographic records in MARC format\\"\\"\\"
  marc: MarcRecord

  \\"\\"\\"Relations to other manifestations\\"\\"\\"
  relations: Relations!

  \\"\\"\\"Some review data, if this manifestation is a review\\"\\"\\"
  review: ManifestationReview
}

\\"\\"\\"Represents the publication status of a catalogued manifestation.\\"\\"\\"
enum CataloguedPublicationStatusEnum {
  \\"\\"\\"New title\\"\\"\\"
  NT

  \\"\\"\\"New edition\\"\\"\\"
  NU

  \\"\\"\\"New print run\\"\\"\\"
  OP
}

type CataloguedPublicationStatus {
  \\"\\"\\"The code representing the catalogued publication status.\\"\\"\\"
  code: CataloguedPublicationStatusEnum!

  \\"\\"\\"The display text corresponding to the publication status code.\\"\\"\\"
  display: String!
}

type SheetMusicCategory {
  \\"\\"\\"The types of instruments material covers\\"\\"\\"
  instruments: [String!]!

  \\"\\"\\"I this node for exercises\\"\\"\\"
  forMusicalExercise: Boolean

  \\"\\"\\"The types of choir material covers\\"\\"\\"
  choirTypes: [String!]!

  \\"\\"\\"The types of chamber music material covers\\"\\"\\"
  chamberMusicTypes: [String!]!

  \\"\\"\\"The types of orchestra material covers\\"\\"\\"
  orchestraTypes: [String!]!
}

type Unit {
  id: String!
  manifestations: [Manifestation!]!
}

type ManifestationTitles {
  \\"\\"\\"The main title(s) of the work\\"\\"\\"
  main: [String!]!

  \\"\\"\\"The full title(s) of the manifestation including subtitles etc\\"\\"\\"
  full: [String!]!

  \\"\\"\\"The sorted title of the entity\\"\\"\\"
  sort: String!

  \\"\\"\\"
  Alternative titles for this manifestation e.g. a title in a different language
  \\"\\"\\"
  alternative: [String!]!

  \\"\\"\\"
  Information that distinguishes this manifestation from a similar manifestation with same title, e.g. 'illustrated by Ted Kirby'
  \\"\\"\\"
  identifyingAddition: String

  \\"\\"\\"
  The title of the work that this expression/manifestation is translated from or based on. The original title(s) of a film which has a different distribution title.
  \\"\\"\\"
  original: [String!]

  \\"\\"\\"
  Titles (in other languages) parallel to the main 'title' of the manifestation
  \\"\\"\\"
  parallel: [String!]!

  \\"\\"\\"The standard title of the entity, used for music and movies\\"\\"\\"
  standard: String

  \\"\\"\\"
  The title of the entity with the language of the entity in parenthesis after. This field is only generated for non-danish titles.
  \\"\\"\\"
  titlePlusLanguage: String

  \\"\\"\\"Danish translation of the main title\\"\\"\\"
  translated: [String!]

  \\"\\"\\"detailed title for tv series \\"\\"\\"
  tvSeries: TvSeries
}

enum ContentsEntityEnum {
  ARTICLES
  CHAPTERS
  FICTION
  MUSIC_TRACKS
  SHEET_MUSIC
  NOT_SPECIFIED
}

type ContentEntryTitle {
  \\"\\"\\"Title of the content entry\\"\\"\\"
  display: String!
}

type ContentEntryCreators {
  \\"\\"\\"Details about a person, name, role etc.\\"\\"\\"
  persons: [Person!]

  \\"\\"\\"Details about a corporation or conference, name, role, etc.\\"\\"\\"
  corporations: [Corporation!]
}

type ContentEntry {
  \\"\\"\\"Top level title of the entry\\"\\"\\"
  title: ContentEntryTitle!

  \\"\\"\\"
  Main creator(s) of the entry i.e. composer (classical music), artist/band (rhythmic music), author (fiction, articles). For music and sheet music always only 1 creator, for articles and fiction possibly more than 1
  \\"\\"\\"
  creators: ContentEntryCreators

  \\"\\"\\"
  Additional 'authors' (lyricists, arrangers, performers/soloists etc.), quoted as strings (including possible author's statement) from the record
  \\"\\"\\"
  contributors: [String!]

  \\"\\"\\"Playing time for music tracks, quoted from the record\\"\\"\\"
  playingTime: String

  \\"\\"\\"
  Possible entry data (title, creators, contributors, playingtime) subordinate to the entry's top level
  \\"\\"\\"
  sublevel: [ContentSublevel!]
}

type ContentsEntity {
  \\"\\"\\"Heading for the contents of this entity\\"\\"\\"
  heading: String!

  \\"\\"\\"
  ENUM for type of content entries (music tracks, articles, fiction etc.) in this entity
  \\"\\"\\"
  type: ContentsEntityEnum!

  \\"\\"\\"
  Contents text note quoted as it is from the marc field. Used for non-machine-decipherable content notes (un)formatted in only 1 subfield)
  \\"\\"\\"
  raw: String

  \\"\\"\\"
  Content entry with title and possible creator(s), contributors and (for some music and movies) playing time
  \\"\\"\\"
  entries: [ContentEntry!]
}

type ContentSublevelLast {
  \\"\\"\\"Title subordinate to the title in the entry's top level\\"\\"\\"
  title: ContentEntryTitle!

  \\"\\"\\"
  Additional 'authors' (lyricists, arrangers, performers/soloists etc.) related to the title on sublevel 1, quoted as strings (including possible author's statement) from the record
  \\"\\"\\"
  contributors: [String!]

  \\"\\"\\"Playing time for music tracks\\"\\"\\"
  playingTime: String
}

type ContentSublevel {
  \\"\\"\\"Title subordinate to the title in the entry's top level\\"\\"\\"
  title: ContentEntryTitle!

  \\"\\"\\"
  Additional 'authors' (lyricists, arrangers, performers/soloists etc.) related to the title on sublevel 1, quoted as strings (including possible author's statement) from the record
  \\"\\"\\"
  contributors: [String!]

  \\"\\"\\"Playing time for music tracks\\"\\"\\"
  playingTime: String

  \\"\\"\\"
  Possible entry data (title, contributors, playingtime) subordinate to the entry's sublevel 1
  \\"\\"\\"
  sublevel: [ContentSublevelLast!]
}

type MarcRecord {
  \\"\\"\\"The marc record identifier\\"\\"\\"
  id: String!

  \\"\\"\\"The library agency\\"\\"\\"
  agencyId: String!

  \\"\\"\\"The bibliographic record identifier\\"\\"\\"
  bibliographicRecordId: String!

  \\"\\"\\"The MARC record collection content as marcXchange XML string\\"\\"\\"
  content: String!

  \\"\\"\\"
  The serialization format of the MARC record content. Defaults to 'marcXchange'
  \\"\\"\\"
  contentSerializationFormat: String!

  \\"\\"\\"Flag indicating whether or not the record is deleted\\"\\"\\"
  deleted: Boolean!
}

enum GeneralMaterialTypeCodeEnum {
  ARTICLES
  AUDIO_BOOKS
  BOARD_GAMES
  BOOKS
  COMICS
  COMPUTER_GAMES
  EBOOKS
  FILMS
  IMAGE_MATERIALS
  MUSIC
  NEWSPAPER_JOURNALS
  OTHER
  PODCASTS
  SHEET_MUSIC
  TV_SERIES
}

\\"\\"\\"Type of moodSuggest response\\"\\"\\"
enum MoodSuggestEnum {
  TITLE
  CREATOR
  TAG
}

\\"\\"\\"MoodSuggest item\\"\\"\\"
type MoodSuggestItem {
  \\"\\"\\"
  A unique identifier for tracking user interactions with this suggestion. 
  It is generated in the response and should be included in subsequent
  API calls when this manifestation is selected.
  \\"\\"\\"
  traceId: String!

  \\"\\"\\"Suggestion\\"\\"\\"
  term: String!

  \\"\\"\\"The type of suggestion title/creator/tag\\"\\"\\"
  type: MoodSuggestEnum!

  \\"\\"\\"A work associated with the suggestion\\"\\"\\"
  work: Work
}

\\"\\"\\"Response type for moodTagRecommend\\"\\"\\"
type MoodTagRecommendResponse {
  work: Work!
  similarity: Float
}

\\"\\"\\"The response type for moodSuggest\\"\\"\\"
type MoodSuggestResponse {
  \\"\\"\\"Response is an array of MoodSuggestResponse\\"\\"\\"
  response: [MoodSuggestItem!]!
}

\\"\\"\\"Supported fields for moodsearch request\\"\\"\\"
enum MoodSearchFieldValuesEnum {
  ALL
  TITLE
  CREATOR
  MOODTAGS
  ALLTAGS
}

input KidRecommenderTagsInput {
  tag: String
  weight: Int
}

input MoodKidsRecommendFiltersInput {
  difficulty: [Int!]
  illustrationsLevel: [Int!]
  length: [Int!]
  realisticVsFictional: [Int!]
  fictionNonfiction: FictionNonfictionCodeEnum
}

\\"\\"\\"The response from moodsearch\\"\\"\\"
type MoodSearchResponse {
  \\"\\"\\"
  The works matching the given search query. Use offset and limit for pagination.
  \\"\\"\\"
  works(offset: Int!, limit: PaginationLimitScalar!): [Work!]!
}

\\"\\"\\"The reponse from moodsearchkids\\"\\"\\"
type MoodSearchKidsResponse {
  works(offset: Int!, limit: PaginationLimitScalar!): [Work!]!
}

\\"\\"\\"The reponse from moodrecommenkids\\"\\"\\"
type MoodRecommendKidsResponse {
  works(offset: Int!, limit: PaginationLimitScalar!): [Work!]!
}

type MoodQueries {
  moodSearch(q: String!, field: MoodSearchFieldValuesEnum, offset: Int, limit: Int): MoodSearchResponse!
  moodSearchKids(q: String!, field: MoodSearchFieldValuesEnum, offset: Int, limit: Int): MoodSearchKidsResponse!
  moodSuggest(q: String!, limit: Int): MoodSuggestResponse!
  moodTagRecommend(tags: [String!]!, limit: Int, plus: [String!], minus: [String!], hasCover: Boolean): [MoodTagRecommendResponse]!
  moodWorkRecommend(likes: [String!]!, dislikes: [String!], limit: Int, offset: Int, maxAuthorRecommendations: Int, threshold: Float, hasCover: Boolean): [MoodTagRecommendResponse]!
  moodRecommendKids(tags: [KidRecommenderTagsInput!], work: String, filters: MoodKidsRecommendFiltersInput, dislikes: [String!], offset: Int, limit: Int): MoodRecommendKidsResponse!
}

type Recommendation {
  \\"\\"\\"The recommended work\\"\\"\\"
  work: Work!

  \\"\\"\\"The recommended manifestation\\"\\"\\"
  manifestation: Manifestation!

  \\"\\"\\"Info on how this recommendation was generated\\"\\"\\"
  reader: [String!]!
}

type RecommendationResponse {
  result: [Recommendation!]!
}

\\"\\"\\"Get different kinds of recommendations\\"\\"\\"
type Recommendations {
  \\"\\"\\"
  Retrieve subject-based recommendations based on a list of query strings and an optional limit.
  - q: An array of strings used to generate subject recommendations.
  - limit: The maximum number of recommendations to return.
  \\"\\"\\"
  subjects(q: [String!]!, limit: Int): [SubjectRecommendation!]
}

\\"\\"\\"Details about a single subject recommendation.\\"\\"\\"
type SubjectRecommendation {
  \\"\\"\\"The recommended subject.\\"\\"\\"
  subject: String!

  \\"\\"\\"
  A unique identifier for tracking user interactions with this subject recommendation. 
  It is generated in the response and should be included in subsequent
  API calls when this suggestion is selected.
  \\"\\"\\"
  traceId: String!
}

type Relations {
  \\"\\"\\"
  The story of this article is continued in this or these other article(s)
  \\"\\"\\"
  continuedIn: [Manifestation!]!

  \\"\\"\\"
  This story of this article actually started in this or these other article(s)
  \\"\\"\\"
  continues: [Manifestation!]!

  \\"\\"\\"The contents of this articles is also discussed in these articles\\"\\"\\"
  discussedIn: [Manifestation!]!

  \\"\\"\\"The article discusses the content of these articles\\"\\"\\"
  discusses: [Manifestation!]!

  \\"\\"\\"This story is adapted in this or these movie(s)\\"\\"\\"
  hasAdaptation: [Manifestation!]!

  \\"\\"\\"The contents of this manifestation is analysed in these manifestations\\"\\"\\"
  hasAnalysis: [Manifestation!]!

  \\"\\"\\"The creator of this manifestation is portrayed in these manifestations\\"\\"\\"
  hasCreatorDescription: [Manifestation!]!

  \\"\\"\\"
  The publisher of this manifestation has made a description of the content
  \\"\\"\\"
  hasDescriptionFromPublisher: [Manifestation!]!

  \\"\\"\\"This movie is based on this manuscript\\"\\"\\"
  hasManuscript: [Manifestation!]!

  \\"\\"\\"
  This manifestation has a 'materialevurdering' that was originally made for another manifestation, but it is still relevant (e.g. book/ebook)
  \\"\\"\\"
  hasReusedReview: [Manifestation!]!

  \\"\\"\\"This manifestation has these reviews\\"\\"\\"
  hasReview: [Manifestation!]!

  \\"\\"\\"This movie or game has this sound track\\"\\"\\"
  hasSoundtrack: [Manifestation!]!

  \\"\\"\\"This movie is based on this or these books\\"\\"\\"
  isAdaptationOf: [Manifestation!]!

  \\"\\"\\"This manifestation is an analysis of these manifestations\\"\\"\\"
  isAnalysisOf: [Manifestation!]!

  \\"\\"\\"
  This is a description from the original publisher of these manifestations
  \\"\\"\\"
  isDescriptionFromPublisherOf: [Manifestation!]!

  \\"\\"\\"This movie is based on this manuscript\\"\\"\\"
  isManuscriptOf: [Manifestation!]!

  \\"\\"\\"
  This 'materialevurdering' can also be used to review these relevant manifestations, even though it was originally made for another publication
  \\"\\"\\"
  isReusedReviewOf: [Manifestation!]!

  \\"\\"\\"This manifestation is a review of these manifestations\\"\\"\\"
  isReviewOf: [Manifestation!]!

  \\"\\"\\"This sound track for a game is related to these games\\"\\"\\"
  isSoundtrackOfGame: [Manifestation!]!

  \\"\\"\\"This sound track for a movie is related to these movies\\"\\"\\"
  isSoundtrackOfMovie: [Manifestation!]!

  \\"\\"\\"This album has these tracks\\"\\"\\"
  hasTrack: [Manifestation!]!

  \\"\\"\\"This music track is part of these albums\\"\\"\\"
  isPartOfAlbum: [Manifestation!]!

  \\"\\"\\"This article or book part can be found in these manifestations\\"\\"\\"
  isPartOfManifestation: [Manifestation!]!
}

enum ReviewElementTypeEnum {
  ABSTRACT
  ACQUISITION_RECOMMENDATIONS
  AUDIENCE
  CONCLUSION
  DESCRIPTION
  EVALUATION
  SIMILAR_MATERIALS
}

type ReviewElement {
  content: String

  \\"\\"\\"
  This is a paragraph containing markup where links to manifestations
  can be inserted. For instance '\\"Axel Steens nye job minder om [870970-basis:20307021] fra ...'.
  Relevant manifestations are located in the manifestations field. 
  \\"\\"\\"
  contentSubstitute: String
  heading: String

  \\"\\"\\"
  Manifestations that can be used to generate and insert links into 'contentSubsitute'.
  \\"\\"\\"
  manifestations: [Manifestation]
  type: ReviewElementTypeEnum
}

type ManifestationReview {
  rating: String
  reviewByLibrarians: [ReviewElement]
}

\\"\\"\\"An integer in the range from 1 to 100\\"\\"\\"
scalar PaginationLimitScalar

\\"\\"\\"The supported fields to query\\"\\"\\"
input SearchQueryInput {
  \\"\\"\\"
  Search for title, creator, subject or a combination.
  This is typically used where a single search box is desired.
  \\"\\"\\"
  all: String

  \\"\\"\\"Search for creator\\"\\"\\"
  creator: String

  \\"\\"\\"Search for specific subject\\"\\"\\"
  subject: String

  \\"\\"\\"Search for specific title\\"\\"\\"
  title: String
}

\\"\\"\\"The supported facet fields\\"\\"\\"
enum FacetFieldEnum {
  WORKTYPES
  MAINLANGUAGES
  MATERIALTYPESGENERAL
  MATERIALTYPESSPECIFIC
  FICTIONALCHARACTERS
  GENREANDFORM
  CHILDRENORADULTS
  ACCESSTYPES
  FICTIONNONFICTION
  SUBJECTS
  CREATORS
  CANALWAYSBELOANED
  YEAR
  DK5
  AGE
  LIX
  LET
  GENERALAUDIENCE
  LIBRARYRECOMMENDATION
  GAMEPLATFORM
}

\\"\\"\\"Search Filters\\"\\"\\"
input SearchFiltersInput {
  accessTypes: [String!]
  childrenOrAdults: [String!]
  creators: [String!]
  fictionNonfiction: [String!]
  fictionalCharacters: [String!]
  genreAndForm: [String!]
  mainLanguages: [String!]
  materialTypesGeneral: [String!]
  materialTypesSpecific: [String!]
  subjects: [String!]
  workTypes: [String!]
  year: [String!]
  dk5: [String!]
  gamePlatform: [String!]
  branchId: [String!]
  department: [String!]
  location: [String!]
  sublocation: [String!]
  status: [HoldingsStatusEnum!]
  canAlwaysBeLoaned: [String!]
  age: [String!]
  ageRange: [String!]
  lixRange: [String!]
  letRange: [String!]
  generalAudience: [String!]
  libraryRecommendation: [String!]
}

enum HoldingsStatusEnum {
  \\"\\"\\"Holding is physically available at the branch\\"\\"\\"
  ONSHELF

  \\"\\"\\"Holding is on loan\\"\\"\\"
  ONLOAN
}

\\"\\"\\"A facet value consists of a term and a count.\\"\\"\\"
type FacetValue {
  \\"\\"\\"Use the key when applying filters\\"\\"\\"
  key: String!

  \\"\\"\\"A value of a facet field\\"\\"\\"
  term: String!

  \\"\\"\\"A score indicating relevance\\"\\"\\"
  score: Int

  \\"\\"\\"
  A unique identifier for tracking user interactions with this facet value. 
  It is generated in the response and should be included in subsequent
  API calls when this manifestation is selected.
  \\"\\"\\"
  traceId: String!
}

\\"\\"\\"The result for a specific facet\\"\\"\\"
type FacetResult {
  \\"\\"\\"The name of the facet.\\"\\"\\"
  name: String!

  \\"\\"\\"The enum type of the facet.\\"\\"\\"
  type: FacetFieldEnum!

  \\"\\"\\"The values of thie facet result\\"\\"\\"
  values(limit: Int!): [FacetValue!]!
}

\\"\\"\\"The simple search response\\"\\"\\"
type SearchResponse {
  \\"\\"\\"Total number of works found. May be used for pagination.\\"\\"\\"
  hitcount: Int!

  \\"\\"\\"
  The works matching the given search query. Use offset and limit for pagination.
  \\"\\"\\"
  works(offset: Int!, limit: PaginationLimitScalar!): [Work!]!

  \\"\\"\\"
  Make sure only to fetch this when needed
  This may take seconds to complete
  \\"\\"\\"
  facets(facets: [FacetFieldEnum!]!): [FacetResult!]!

  \\"\\"\\"Will return the facets that best match the input query and filters\\"\\"\\"
  intelligentFacets(limit: Int): [FacetResult!]!

  \\"\\"\\"A list of alternative search queries\\"\\"\\"
  didYouMean(limit: Int): [DidYouMean!]!
}

type DidYouMean {
  \\"\\"\\"
  A unique identifier for tracking user interactions with this didYouMean value. 
  It is generated in the response and should be included in subsequent
  API calls when this manifestation is selected.
  \\"\\"\\"
  traceId: String!

  \\"\\"\\"An alternative query\\"\\"\\"
  query: String!

  \\"\\"\\"A probability score between 0-1 indicating how relevant the query is\\"\\"\\"
  score: Float!
}

type SerieWork {
  \\"\\"\\"The number of work in the series as a number (as text)\\"\\"\\"
  numberInSeries: String

  \\"\\"\\"Work of a serieWork\\"\\"\\"
  work: Work!

  \\"\\"\\"Information about whether this work in the series should be read first\\"\\"\\"
  readThisFirst: Boolean

  \\"\\"\\"
  Information about whether this work in the series can be read without considering the order of the series, it can be read at any time
  \\"\\"\\"
  readThisWhenever: Boolean
}

type Series {
  \\"\\"\\"The number of members in the series\\"\\"\\"
  hitcount: Int!

  \\"\\"\\"The title of the series\\"\\"\\"
  title: String!

  \\"\\"\\"Identifier for the series\\"\\"\\"
  seriesId: String

  \\"\\"\\"Traceid for tracking\\"\\"\\"
  traceId: String!

  \\"\\"\\"Additional information \\"\\"\\"
  identifyingAddition: String

  \\"\\"\\"Description of the series\\"\\"\\"
  description: String

  \\"\\"\\"A alternative title to the main 'title' of the series\\"\\"\\"
  alternativeTitles: [String!]!

  \\"\\"\\"
  A parallel title to the main 'title' of the series, in a different language
  \\"\\"\\"
  parallelTitles: [String!]!

  \\"\\"\\"The number in the series as text qoutation\\"\\"\\"
  numberInSeries: String

  \\"\\"\\"Information about whether this work in the series should be read first\\"\\"\\"
  readThisFirst: Boolean

  \\"\\"\\"
  Information about whether this work in the series can be read without considering the order of the series, it can be read at any time
  \\"\\"\\"
  readThisWhenever: Boolean

  \\"\\"\\"Whether this is a popular series or general series\\"\\"\\"
  isPopular: Boolean

  \\"\\"\\"WorkTypes for the series\\"\\"\\"
  workTypes: [String!]!

  \\"\\"\\"MainLanguages of the series\\"\\"\\"
  mainLanguages: [String!]!

  \\"\\"\\"Members of this serie. \\"\\"\\"
  members(limit: Int, offset: Int): [SerieWork!]!
}

interface SubjectInterface {
  display: String!

  \\"\\"\\"
  The type of subject - 'location', 'time period' etc., 'topic' if not specific kind of subject term
  \\"\\"\\"
  type: SubjectTypeEnum!

  \\"\\"\\"Language of the subject - contains display and isoCode \\"\\"\\"
  language: Language
  local: Boolean
}

type SubjectText implements SubjectInterface {
  type: SubjectTypeEnum!
  display: String!
  language: Language
  local: Boolean
}

type TimePeriod implements SubjectInterface {
  type: SubjectTypeEnum!
  period: Range!
  display: String!
  language: Language
  local: Boolean
}

type Mood implements SubjectInterface {
  type: SubjectTypeEnum!
  display: String!
  language: Language
  local: Boolean
}

type NarrativeTechnique implements SubjectInterface {
  type: SubjectTypeEnum!
  display: String!
  language: Language
  local: Boolean
}

type Setting implements SubjectInterface {
  type: SubjectTypeEnum!
  display: String!
  language: Language
  local: Boolean
}

type SubjectWithRating implements SubjectInterface {
  type: SubjectTypeEnum!
  display: String!
  language: Language
  local: Boolean

  \\"\\"\\"Expressed as integer on a scale from 1 to 5\\"\\"\\"
  rating: Int
}

enum SubjectTypeEnum {
  TOPIC
  LOCATION
  FICTIONAL_CHARACTER
  LAESEKOMPASSET
  MEDICAL_SUBJECT_HEADING
  MUSIC_COUNTRY_OF_ORIGIN
  MUSIC_TIME_PERIOD
  MUSICAL_INSTRUMENTATION
  NATIONAL_AGRICULTURAL_LIBRARY
  TIME_PERIOD
  TITLE
  FILM_NATIONALITY
  LIBRARY_OF_CONGRESS_SUBJECT_HEADING
  FICTIONAL_LOCATION

  \\"\\"\\"
  added for manifestation.parts.creators/person - they get a type from small-rye
  \\"\\"\\"
  PERSON
  CORPORATION
  MOOD
  MOOD_CHILDREN

  \\"\\"\\"Subject describing selected topics for children, and a rating.\\"\\"\\"
  TOPIC_CHILDREN
  PERSPECTIVE
  STYLE
  TEMPO
  REALITY
  ENVIRONMENT
}

type Range {
  begin: Int
  end: Int
  display: String!
}

type SubjectContainer {
  \\"\\"\\"All subjects\\"\\"\\"
  all: [SubjectInterface!]!

  \\"\\"\\"Only DBC verified subjects\\"\\"\\"
  dbcVerified: [SubjectInterface!]!
}

enum SuggestionTypeEnum {
  SUBJECT
  TITLE
  CREATOR
  COMPOSIT
}

enum ComplexSuggestionTypeEnum {
  HOSTPUBLICATION
  CONTRIBUTORFUNCTION
  CREATOR
  DEFAULT
  CREATORCONTRIBUTORFUNCTION
  CREATORFUNCTION
  SUBJECT
  FICTIONALCHARACTER
  TITLE
  CREATORCONTRIBUTOR
  SERIES
  PUBLISHER
}

type ComplexSearchSuggestion {
  \\"\\"\\"
  A unique identifier for tracking user interactions with this suggestion. 
  It is generated in the response and should be included in subsequent
  API calls when this suggestion is selected.
  \\"\\"\\"
  traceId: String!

  \\"\\"\\"The type of suggestion\\"\\"\\"
  type: String!

  \\"\\"\\"The suggested term which can be searched for\\"\\"\\"
  term: String!

  \\"\\"\\"A work related to the term\\"\\"\\"
  work: Work
}

type Suggestion {
  \\"\\"\\"
  A unique identifier for tracking user interactions with this suggestion. 
  It is generated in the response and should be included in subsequent
  API calls when this suggestion is selected.
  \\"\\"\\"
  traceId: String!

  \\"\\"\\"The type of suggestion: creator, subject or title\\"\\"\\"
  type: SuggestionTypeEnum!

  \\"\\"\\"The suggested term which can be searched for\\"\\"\\"
  term: String!

  \\"\\"\\"A work related to the term\\"\\"\\"
  work: Work
}

type ComplexSuggestResponse {
  result: [ComplexSearchSuggestion!]!
}

type SuggestResponse {
  result: [Suggestion!]!
}

type LocalSuggestResponse {
  result: [Suggestion!]!
}

union UniverseContentUnion = Work | Series

type Universe {
  \\"\\"\\"A key that identifies a universe.\\"\\"\\"
  key: String

  \\"\\"\\"An id that identifies a universe.\\"\\"\\"
  universeId: String

  \\"\\"\\"
  A unique identifier for tracking user interactions with this universe.
  It is generated in the response and should be included in subsequent
  API calls when this work is selected.
  \\"\\"\\"
  traceId: String!

  \\"\\"\\"
  Literary/movie universe this work is part of e.g. Wizarding World, Marvel Cinematic Universe
  \\"\\"\\"
  title: String!

  \\"\\"\\"A alternative title to the main 'title' of the universe\\"\\"\\"
  alternativeTitles: [String!]

  \\"\\"\\"Description of the universe\\"\\"\\"
  description: String

  \\"\\"\\"All series within the universe\\"\\"\\"
  series(limit: Int, offset: Int, workType: WorkTypeEnum): [Series!]!

  \\"\\"\\"All works within the universe but not in any series\\"\\"\\"
  works(limit: Int, offset: Int, workType: WorkTypeEnum): [Work!]!

  \\"\\"\\"work types that are in this universe\\"\\"\\"
  workTypes: [WorkTypeEnum!]!

  \\"\\"\\"both series and works in a list\\"\\"\\"
  content(limit: Int, offset: Int, workType: WorkTypeEnum): UniverseContentResult!
}

type UniverseContentResult {
  hitcount: Int!
  entries: [UniverseContentUnion!]!
}

type Language {
  \\"\\"\\"Language as displayable text\\"\\"\\"
  display: String!

  \\"\\"\\"ISO639-2 language code\\"\\"\\"
  isoCode: String!

  \\"\\"\\"ISO639-1 language code (2 letters)\\"\\"\\"
  iso639Set1: String!

  \\"\\"\\"ISO639-2 language code (3 letters)\\"\\"\\"
  iso639Set2: String!
}

type GeneralMaterialType {
  \\"\\"\\"
  code for materialType # @TODO - is this a finite list ?? - and where to get it
  \\"\\"\\"
  code: GeneralMaterialTypeCodeEnum!

  \\"\\"\\"Ths string to display\\"\\"\\"
  display: String!
}

type SpecificMaterialType {
  \\"\\"\\"code for materialType\\"\\"\\"
  code: String!

  \\"\\"\\"Ths string to display\\"\\"\\"
  display: String!
}

type MaterialType {
  \\"\\"\\"jed 1.1 - the general materialtype\\"\\"\\"
  materialTypeGeneral: GeneralMaterialType!

  \\"\\"\\"jed 1.1 - the specific materialtType\\"\\"\\"
  materialTypeSpecific: SpecificMaterialType!
}

enum FictionNonfictionCodeEnum {
  FICTION
  NONFICTION
  NOT_SPECIFIED
}

type FictionNonfiction {
  \\"\\"\\"
  Displayable overall category/genre. In Danish skønlitteratur/faglitteratur for literature, fiktion/nonfiktion for other types.
  \\"\\"\\"
  display: String!

  \\"\\"\\"Binary code fiction/nonfiction used for filtering\\"\\"\\"
  code: FictionNonfictionCodeEnum!
}

type DK5MainEntry {
  \\"\\"\\"Displayable main DK5 classification\\"\\"\\"
  display: String!

  \\"\\"\\"Main DK5 classification code\\"\\"\\"
  code: String!

  \\"\\"\\"The dk5Heading for the classification\\"\\"\\"
  dk5Heading: String!
}

enum WorkTypeEnum {
  ANALYSIS
  ARTICLE
  BOOKDESCRIPTION
  GAME
  LITERATURE
  MAP
  MOVIE
  MUSIC
  OTHER
  PERIODICA
  PORTRAIT
  REVIEW
  SHEETMUSIC
  TRACK
}

type WorkTitles {
  \\"\\"\\"The main title(s) of the work\\"\\"\\"
  main: [String!]!

  \\"\\"\\"The full title(s) of the work including subtitles etc\\"\\"\\"
  full: [String!]!

  \\"\\"\\"Titles (in other languages) parallel to the main 'title' of the work\\"\\"\\"
  parallel: [String!]!

  \\"\\"\\"The sorted title of the entity\\"\\"\\"
  sort: String!

  \\"\\"\\"
  The title of the work that this expression/manifestation is translated from or based on. The original title(s) of a film which has a different distribution title.
  \\"\\"\\"
  original: [String!]

  \\"\\"\\"The standard title of the entity, used for music and movies\\"\\"\\"
  standard: String

  \\"\\"\\"
  The title of the entity with the language of the entity in parenthesis after. This field is only generated for non-danish titles.
  \\"\\"\\"
  titlePlusLanguage: String

  \\"\\"\\"Danish translation of the main title\\"\\"\\"
  translated: [String!]

  \\"\\"\\"detailed title for tv series \\"\\"\\"
  tvSeries: TvSeries
}

type TvSeries {
  \\"\\"\\"Title of the tv serie\\"\\"\\"
  title: String

  \\"\\"\\"Dansih translated title of the tv serie\\"\\"\\"
  danishLaunchTitle: String

  \\"\\"\\"Detailed information about the episode\\"\\"\\"
  episode: TvSeriesDetails

  \\"\\"\\"Episode titles\\"\\"\\"
  episodeTitles: [String!]

  \\"\\"\\"Detailed information about the disc\\"\\"\\"
  disc: TvSeriesDetails

  \\"\\"\\"Detailed information about the season\\"\\"\\"
  season: TvSeriesDetails

  \\"\\"\\"Detailed information about the volume\\"\\"\\"
  volume: TvSeriesDetails
}

type TvSeriesDetails {
  display: String
  numbers: [Int!]
}
"
`;

exports[`limited access to root fields 1`] = `
"directive @fallback on ENUM_VALUE

\\"\\"\\"Complexity directive to evaluate query complexity \\"\\"\\"
directive @complexity(value: Int!, multipliers: [String!]) on FIELD_DEFINITION

type Query {
  help(q: String!, language: LanguageCodeEnum): HelpResponse
}

type HelpRow {
  nid: Int!
  group: String!
  orgTitle: String!
  title: String!
  body: String!
}

type HelpResponse {
  result: [HelpRow!]!
}

enum LanguageCodeEnum {
  DA
  EN
}
"
`;

exports[`remove all fields by type 1`] = `
"directive @fallback on ENUM_VALUE

\\"\\"\\"Complexity directive to evaluate query complexity \\"\\"\\"
directive @complexity(value: Int!, multipliers: [String!]) on FIELD_DEFINITION

enum AccessTypeCodeEnum {
  PHYSICAL
  ONLINE
  UNKNOWN
}

enum AccessUrlTypeEnum {
  IMAGE
  OTHER
  RESOURCE
  SAMPLE
  TABLE_OF_CONTENTS
  THUMBNAIL
}

enum LinkStatusEnum {
  BROKEN
  GONE
  INVALID
  OK
}

type AccessType {
  display: String!
  code: AccessTypeCodeEnum!
}

type Ereol {
  \\"\\"\\"
  The origin, e.g. \\"Ereolen\\" or \\"Ereolen Go\\"
  \\"\\"\\"
  origin: String!

  \\"\\"\\"The url where manifestation is located\\"\\"\\"
  url: String!

  \\"\\"\\"
  Is this a manifestation that always can be loaned on ereolen.dk even if you've run out of loans this month
  \\"\\"\\"
  canAlwaysBeLoaned: Boolean!

  \\"\\"\\"Notes for the resource\\"\\"\\"
  note: String
}

type AccessUrl {
  \\"\\"\\"
  The origin, e.g. \\"DBC Webarkiv\\"
  \\"\\"\\"
  origin: String!

  \\"\\"\\"Description/type of URL\\"\\"\\"
  urlText: String

  \\"\\"\\"The url where manifestation is located\\"\\"\\"
  url: String!

  \\"\\"\\"Notes for the resource\\"\\"\\"
  note: String

  \\"\\"\\"If the resource requires login\\"\\"\\"
  loginRequired: Boolean!

  \\"\\"\\"The type of content that can be found at this URL\\"\\"\\"
  type: AccessUrlTypeEnum

  \\"\\"\\"Status from linkcheck\\"\\"\\"
  status: LinkStatusEnum!
}

type InterLibraryLoan {
  \\"\\"\\"Is true when manifestation can be borrowed via ill\\"\\"\\"
  loanIsPossible: Boolean!

  \\"\\"\\"Is newly added - nice to know if there are no localizations\\"\\"\\"
  accessNew: Boolean!
}

type InfomediaService {
  \\"\\"\\"
  Infomedia ID which can be used to fetch article through Infomedia Service
  \\"\\"\\"
  id: String!
}

type DigitalArticleService {
  \\"\\"\\"
  Issn which can be used to order article through Digital Article Service
  \\"\\"\\"
  issn: String!
}

union AccessUnion = AccessUrl | Ereol | InterLibraryLoan | InfomediaService | DigitalArticleService

type Query {
  manifestation(pid: String, faust: String): Manifestation
}

type Translation {
  \\"\\"\\"
  Translation in plural form, e.g. forfattere, komponister, instruktører etc.
  \\"\\"\\"
  plural: String!

  \\"\\"\\"Translation in singular form, e.g. forfatter, komponist, instruktør\\"\\"\\"
  singular: String!
}

type Role {
  \\"\\"\\"
  The code for the type of creator or contributor, e.g. 'aut' for author, 'ill' for illustrator etc
  \\"\\"\\"
  functionCode: String!

  \\"\\"\\"
  The type of creator/contributor as text in singular and plural in Danish, e.g. forfatter/forfattere, komponist/komponister etc
  \\"\\"\\"
  function: Translation!
}

type Person implements SubjectInterface & CreatorInterface {
  \\"\\"\\"The person's whole name in normal order\\"\\"\\"
  display: String!

  \\"\\"\\"The person's full name inverted\\"\\"\\"
  nameSort: String!

  \\"\\"\\"First name of the person\\"\\"\\"
  firstName: String

  \\"\\"\\"Last name of the person\\"\\"\\"
  lastName: String

  \\"\\"\\"Birth year of the person\\"\\"\\"
  birthYear: String

  \\"\\"\\"A roman numeral added to the person, like Christian IV\\"\\"\\"
  romanNumeral: String

  \\"\\"\\"Added information about the person, like Henri, konge af Frankrig\\"\\"\\"
  attributeToName: String

  \\"\\"\\"Creator aliases, creators behind used pseudonym\\"\\"\\"
  aliases: [Person!]!

  \\"\\"\\"
  A list of which kinds of contributions this person made to this creation
  \\"\\"\\"
  roles: [Role!]!
  type: SubjectTypeEnum!
  language: Language
  local: Boolean
}

type Corporation implements SubjectInterface & CreatorInterface {
  \\"\\"\\"The full corporation or conference name\\"\\"\\"
  display: String!

  \\"\\"\\"The full corporation or conference name to sort after\\"\\"\\"
  nameSort: String!

  \\"\\"\\"Main corporation or conference\\"\\"\\"
  main: String

  \\"\\"\\"Sub corporation or conference/meeting\\"\\"\\"
  sub: String

  \\"\\"\\"
  Location or jurisdiction of the corporation or conference, like Københavns Kommune, Statistisk Kontor
  \\"\\"\\"
  location: String

  \\"\\"\\"Year of the conference\\"\\"\\"
  year: String

  \\"\\"\\"Number of the conference\\"\\"\\"
  number: String

  \\"\\"\\"
  Added information about the corporation, like M. Folmer Andersen (firma)
  \\"\\"\\"
  attributeToName: String

  \\"\\"\\"
  A list of which kinds of contributions this corporation made to this creation
  \\"\\"\\"
  roles: [Role!]!
  type: SubjectTypeEnum!
  language: Language
  local: Boolean
}

interface CreatorInterface {
  \\"\\"\\"Name of the creator\\"\\"\\"
  display: String!

  \\"\\"\\"Name of the creator which can be used to sort after \\"\\"\\"
  nameSort: String!

  \\"\\"\\"
  A list of which kinds of contributions this creator made to this creation
  \\"\\"\\"
  roles: [Role!]!
}

\\"\\"\\"A periodica that contains all its issues and subjects\\"\\"\\"
type Periodical {
  \\"\\"\\"Info about articles in this periodical\\"\\"\\"
  articles: PeriodicalArticlesResponse!

  \\"\\"\\"All issues in this periodical\\"\\"\\"
  issues(filters: PeriodicalIssueFilterInput): PeriodicalEntriesResponse!
}

type PeriodicalFacetResponse {
  \\"\\"\\"Total number of matching items\\"\\"\\"
  hitcount: Int!

  \\"\\"\\"Facet entries\\"\\"\\"
  entries(offset: Int, limit: Int): [FacetValue!]
}

\\"\\"\\"Metadata about articles in a periodical\\"\\"\\"
type PeriodicalArticlesResponse {
  \\"\\"\\"Total number of articles in the periodical\\"\\"\\"
  hitcount: Int!

  \\"\\"\\"First article (e.g. chronologically)\\"\\"\\"
  first: Work

  \\"\\"\\"Last article (e.g. most recent)\\"\\"\\"
  last: Work
}

\\"\\"\\"Response containing all issues of a periodical\\"\\"\\"
type PeriodicalEntriesResponse {
  \\"\\"\\"Total number of issues in periodical\\"\\"\\"
  hitcount: Int!

  \\"\\"\\"List of issues\\"\\"\\"
  entries(offset: Int, limit: Int): [PeriodicalIssue!]!

  \\"\\"\\"Subjects aggregated from articles in the issues\\"\\"\\"
  subjects: PeriodicalFacetResponse!

  \\"\\"\\"Publication years aggregated from articles in the issues\\"\\"\\"
  publicationYears: PeriodicalFacetResponse!

  \\"\\"\\"Publication years aggregated from articles in the issues\\"\\"\\"
  publicationMonths: PeriodicalFacetResponse!
}

\\"\\"\\"A single issue of a periodical\\"\\"\\"
type PeriodicalIssue {
  \\"\\"\\"Display name of the issue (e.g. \\"2023, nr. 2\\")\\"\\"\\"
  display: String!

  \\"\\"\\"Number of works/articles in the issue\\"\\"\\"
  hitcount: Int!

  \\"\\"\\"List of works/articles in this issue\\"\\"\\"
  works(offset: Int, limit: Int): [Work!]!
}

\\"\\"\\"An article similar to another, with shared subjects\\"\\"\\"
type SimilarPeriodicalArticleEntry {
  \\"\\"\\"Subjects shared with the reference article\\"\\"\\"
  sharedSubjects: [String!]!

  \\"\\"\\"The similar article\\"\\"\\"
  work: Work!
}

type PeriodicalArticle {
  \\"\\"\\"Is set when this is work is the actual periodica\\"\\"\\"
  parentPeriodical: Work

  \\"\\"\\"is set when this work is an article in an issue of a periodica\\"\\"\\"
  parentIssue: PeriodicalIssue

  \\"\\"\\"Articles in same periodica that are similar in terms of subjects\\"\\"\\"
  similarArticles: [SimilarPeriodicalArticleEntry!]
}

input PeriodicalIssueFilterInput {
  subjects: [String!]
  publicationYears: [String!]
  publicationMonths: [String!]
}

union WorkExtensionUnion = Periodical | PeriodicalArticle

type Work {
  \\"\\"\\"Contains either a Periodical or a PeriodicalArticle\\"\\"\\"
  extendedWork: WorkExtensionUnion

  \\"\\"\\"Field for presenting bibliographic records in MARC format\\"\\"\\"
  marc: MarcRecord

  \\"\\"\\"Relations to other manifestations\\"\\"\\"
  relations: Relations!

  \\"\\"\\"
  A unique identifier for tracking user interactions with this work.
  It is generated in the response and should be included in subsequent
  API calls when this work is selected.
  \\"\\"\\"
  traceId: String!

  \\"\\"\\"
  Unique identification of the work based on work-presentation id e.g work-of:870970-basis:54029519
  \\"\\"\\"
  workId: String!
  titles: WorkTitles!

  \\"\\"\\"Abstract of the entity\\"\\"\\"
  abstract: [String!]

  \\"\\"\\"Creators\\"\\"\\"
  creators: [CreatorInterface!]!

  \\"\\"\\"DK5 main entry for this work\\"\\"\\"
  dk5MainEntry: DK5MainEntry

  \\"\\"\\"
  Overall literary category/genre of this work. e.g. fiction or nonfiction. In Danish skønlitteratur/faglitteratur for literature, fiktion/nonfiktion for other types.
  \\"\\"\\"
  fictionNonfiction: FictionNonfiction

  \\"\\"\\"Date of latest publication\\"\\"\\"
  latestPublicationDate: String

  \\"\\"\\"The type of material of the manifestation based on bibliotek.dk types\\"\\"\\"
  materialTypes: [MaterialType!]!

  \\"\\"\\"Series for this work\\"\\"\\"
  series: [Series!]!

  \\"\\"\\"
  Literary/movie universes this work is part of, e.g. Wizarding World, Marvel Universe
  \\"\\"\\"
  universes: [Universe!]!

  \\"\\"\\"Subjects for this work\\"\\"\\"
  subjects: SubjectContainer!

  \\"\\"\\"The genre, (literary) form, type etc. of this work\\"\\"\\"
  genreAndForm: [String!]!

  \\"\\"\\"Worktypes for this work - 'none' replaced by 'other'\\"\\"\\"
  workTypes: [WorkTypeEnum!]!

  \\"\\"\\"The year this work was originally published or produced\\"\\"\\"
  workYear: PublicationYear

  \\"\\"\\"The main language(s) of the work's content\\"\\"\\"
  mainLanguages: [Language!]!

  \\"\\"\\"Details about the manifestations of this work\\"\\"\\"
  manifestations: Manifestations!
}

type CatalogueCodes {
  \\"\\"\\"CatalogueCodes from the national registers\\"\\"\\"
  nationalBibliography: [String!]!

  \\"\\"\\"
  CatalogueCodes from local bibliographies or catalogues that the manifestation belongs to
  \\"\\"\\"
  otherCatalogues: [String!]!
}

type TableOfContent {
  heading: String
  content: String
  listOfContent: [TableOfContent!]
}

type Shelfmark {
  \\"\\"\\"A postfix to the shelfmark, eg. 99.4 Christensen, Inger. f. 1935\\"\\"\\"
  postfix: String

  \\"\\"\\"
  The actual shelfmark - e.g. information about on which shelf in the library this manifestation can be found, e.g. 99.4
  \\"\\"\\"
  shelfmark: String!
}

type UnitDescription {
  \\"\\"\\"
  Assemblance of the data from all the other properties, separated by a comma
  \\"\\"\\"
  summary: String!

  \\"\\"\\"Technical formats, e.g. Playstation 4, blu-ray\\"\\"\\"
  numberAndType: String

  \\"\\"\\"
  Number of pages, tab (books, articles etc.) or playingtime (cd, dvd etc.)
  \\"\\"\\"
  extent: String

  \\"\\"\\"
  Other physical description, eg. illustrations, color or b/w, mono/stereo, rpm
  \\"\\"\\"
  additionalDescription: String

  \\"\\"\\"Size of the material unit\\"\\"\\"
  size: String

  \\"\\"\\"Technical formats, e.g. Playstation 4, blu-ray\\"\\"\\"
  technicalInformation: String
}

type PhysicalUnitDescription {
  \\"\\"\\"
  A summary of the physical description of this manifestation like extent (pages/minutes), illustrations etc.
  \\"\\"\\"
  summaryFull: String

  \\"\\"\\"List of units contained within the material\\"\\"\\"
  materialUnits: [UnitDescription!]

  \\"\\"\\"Number of pages of the manifestation as number\\"\\"\\"
  numberOfPages: Int

  \\"\\"\\"Material that comes with the manifestation (bilag)\\"\\"\\"
  accompanyingMaterial: String
}

type RelatedPublication {
  \\"\\"\\"
  Notes describing the relation of the related periodical/journal/publication
  \\"\\"\\"
  heading: String!

  \\"\\"\\"Title of the related periodical/journal\\"\\"\\"
  title: [String!]!

  \\"\\"\\"Faust of the related publication\\"\\"\\"
  faust: String

  \\"\\"\\"ISSN of the related periodical/journal/publication\\"\\"\\"
  issn: String

  \\"\\"\\"ISBN of the related publication\\"\\"\\"
  isbn: String

  \\"\\"\\"Alle urls of the related publication\\"\\"\\"
  urls: [String]!

  \\"\\"\\"Note regarding the URL of the related publication\\"\\"\\"
  urlText: String

  \\"\\"\\"The first URL of the urls in related publications\\"\\"\\"
  url: String
}

enum NoteTypeEnum {
  CONNECTION_TO_OTHER_WORKS
  DESCRIPTION_OF_MATERIAL
  DISSERTATION
  MUSICAL_ENSEMBLE_OR_CAST
  NOT_SPECIFIED
  OCCASION_FOR_PUBLICATION
  ORIGINAL_TITLE
  ORIGINAL_VERSION
  REFERENCES
  RESTRICTIONS_ON_USE
  TYPE_OF_SCORE
  FREQUENCY
  EDITION
  TECHNICAL_REQUIREMENTS
  ESTIMATED_PLAYING_TIME_FOR_GAMES
  EXPECTED_PUBLICATION_DATE
  WITHDRAWN_PUBLICATION
  CONTAINS_AI_GENERATED_CONTENT
}

enum ChildOrAdultCodeEnum {
  FOR_CHILDREN
  FOR_ADULTS
}

type ChildOrAdult {
  display: String!
  code: ChildOrAdultCodeEnum!
}

enum SchoolUseCodeEnum {
  FOR_SCHOOL_USE
  FOR_TEACHER
}

type SchoolUse {
  display: String!
  code: SchoolUseCodeEnum!
}

type Note {
  \\"\\"\\"
  The type of note - e.g. note about language, genre etc, NOT_SPECIFIED if not known. 
  \\"\\"\\"
  type: NoteTypeEnum!

  \\"\\"\\"Heading before note\\"\\"\\"
  heading: String

  \\"\\"\\"The actual notes\\"\\"\\"
  display: [String!]!

  \\"\\"\\"A link and possible link text\\"\\"\\"
  urls: [AccessUrl]
}

enum ManifestationPartTypeEnum {
  MUSIC_TRACKS
  SHEET_MUSIC_CONTENT
  PARTS_OF_BOOK
  NOT_SPECIFIED
}

type ManifestationPart {
  \\"\\"\\"The title of the entry (music track or title of a literary analysis)\\"\\"\\"
  title: String!

  \\"\\"\\"The creator of the music track or literary analysis\\"\\"\\"
  creators: [CreatorInterface!]!

  \\"\\"\\"Classification of this entry (music track or literary analysis)\\"\\"\\"
  classifications: [Classification!]!

  \\"\\"\\"Subjects of this entry (music track or literary analysis)\\"\\"\\"
  subjects: [SubjectInterface!]

  \\"\\"\\"
  Additional creator or contributor to this entry (music track or literary analysis) as described on the publication. E.g. 'arr.: H. Cornell'
  \\"\\"\\"
  creatorsFromDescription: [String!]!

  \\"\\"\\"Contributors from description - additional contributor to this entry\\"\\"\\"
  contributorsFromDescription: [String!]!

  \\"\\"\\"
  The playing time for this specific part (i.e. the duration of a music track) 
  \\"\\"\\"
  playingTime: String
}

type ManifestationParts {
  \\"\\"\\"Heading for the music content note\\"\\"\\"
  heading: String

  \\"\\"\\"The creator and title etc of the individual parts\\"\\"\\"
  parts: [ManifestationPart!]!

  \\"\\"\\"The type of manifestation parts, is this music tracks, book parts etc.\\"\\"\\"
  type: ManifestationPartTypeEnum!
}

type Languages {
  \\"\\"\\"
  Notes of the languages that describe subtitles, spoken/written (original, dubbed/synchonized), visual interpretation, parallel (notes are written in Danish)
  \\"\\"\\"
  notes: [String!]

  \\"\\"\\"Main language of this manifestation\\"\\"\\"
  main: [Language!]

  \\"\\"\\"Original language of this manifestation\\"\\"\\"
  original: [Language!]

  \\"\\"\\"
  Parallel languages of this manifestation, if more languages are printed in the same book
  \\"\\"\\"
  parallel: [Language!]

  \\"\\"\\"
  Spoken language in this manifestation e.g. dubbed/syncronized language in movie
  \\"\\"\\"
  spoken: [Language!]

  \\"\\"\\"Subtitles in this manifestation\\"\\"\\"
  subtitles: [Language!]

  \\"\\"\\"
  Summary/abstract languages of this manifestation, if the manifestation contains short summaries of the content in another language
  \\"\\"\\"
  abstract: [Language!]
}

enum IdentifierTypeEnum {
  UPC
  URI
  DOI
  ISBN
  ISSN
  ISMN
  MUSIC
  MOVIE
  PUBLIZON
  NOT_SPECIFIED
  ORDER_NUMBER
  BARCODE
}

type Identifier {
  \\"\\"\\"The type of identifier\\"\\"\\"
  type: IdentifierTypeEnum!

  \\"\\"\\"The actual identifier\\"\\"\\"
  value: String!
}

type HostPublication {
  \\"\\"\\"Publication this manifestation can be found in\\"\\"\\"
  title: String!

  \\"\\"\\"Creator of the host publication if host publication is book\\"\\"\\"
  creator: String

  \\"\\"\\"Edition statement for the host publication\\"\\"\\"
  edition: String

  \\"\\"\\"ISSN of the publication this manifestation can be found in\\"\\"\\"
  issn: String

  \\"\\"\\"ISBN of the publication this manifestation can be found in\\"\\"\\"
  isbn: String

  \\"\\"\\"The issue of the publication this manifestation can be found in\\"\\"\\"
  issue: String

  \\"\\"\\"Notes about the publication where this manifestation can be found in\\"\\"\\"
  notes: [String!]

  \\"\\"\\"The pages in the publication where this manifestation can be found in\\"\\"\\"
  pages: String

  \\"\\"\\"
  The publisher of the publication where this manifestation can be found in
  \\"\\"\\"
  publisher: String

  \\"\\"\\"Series of the publication this manifestation can be found in\\"\\"\\"
  series: Series

  \\"\\"\\"
  The publication year of the publication this manifestation can be found in
  \\"\\"\\"
  year: PublicationYear

  \\"\\"\\"All details about the publication this manifestation can be found in\\"\\"\\"
  summary: String!
}

type Printing {
  \\"\\"\\"
  Properties 'printing' and 'publicationYear' as one string, e.g.: '11. oplag, 2020'
  \\"\\"\\"
  summary: String!

  \\"\\"\\"The printing number and name\\"\\"\\"
  printing: String!

  \\"\\"\\"
  Publisher of printing when other than the original publisher of the edition (260*b)
  \\"\\"\\"
  publisher: String

  \\"\\"\\"A year as displayable text and as number\\"\\"\\"
  publicationYear: PublicationYear
}

type PublicationYear {
  display: String!
  year: Int
  endYear: Int
  frequency: String
}

type Edition {
  \\"\\"\\"
  Properties 'edition', 'contributorsToEdition' and 'publicationYear' as one string, e.g.: '3. udgave, revideret af Hugin Eide, 2005'
  \\"\\"\\"
  summary: String!

  \\"\\"\\"A note about this specific edition\\"\\"\\"
  note: String

  \\"\\"\\"The edition number and name\\"\\"\\"
  edition: String

  \\"\\"\\"Quotation of contributor statements related to the edition\\"\\"\\"
  contributors: [String!]!

  \\"\\"\\"A year as displayable text and as number\\"\\"\\"
  publicationYear: PublicationYear
}

enum EntryTypeEnum {
  ADDITIONAL_ENTRY
  MAIN_ENTRY
  NATIONAL_BIBLIOGRAPHY_ENTRY
  NATIONAL_BIBLIOGRAPHY_ADDITIONAL_ENTRY
}

type Classification {
  \\"\\"\\"The classification code\\"\\"\\"
  code: String!

  \\"\\"\\"The dk5Heading for the classification (DK5 only)\\"\\"\\"
  dk5Heading: String

  \\"\\"\\"Descriptive text for the classification code (DK5 only)\\"\\"\\"
  display: String!

  \\"\\"\\"
  For DK5 only. The DK5 entry type: main entry, national entry, or additional entry
  \\"\\"\\"
  entryType: EntryTypeEnum

  \\"\\"\\"Name of the classification system\\"\\"\\"
  system: String!
}

type Players {
  \\"\\"\\"Number of players interval begin.\\"\\"\\"
  begin: Int

  \\"\\"\\"Number of players interval end.\\"\\"\\"
  end: Int

  \\"\\"\\"Display name for the number of players.\\"\\"\\"
  display: String
}

type PEGI {
  \\"\\"\\"Minimum age to play the game. PEGI rating\\"\\"\\"
  minimumAge: Int

  \\"\\"\\"Display string for PEGI minimum age\\"\\"\\"
  display: String
}

type MediaCouncilAgeRestriction {
  \\"\\"\\"Minimum age\\"\\"\\"
  minimumAge: Int

  \\"\\"\\"Display string for minimum age\\"\\"\\"
  display: String
}

type Audience {
  \\"\\"\\"Appropriate audience for this manifestation\\"\\"\\"
  generalAudience: [String!]!

  \\"\\"\\"
  Range of numbers with either beginning of range or end of range or both e.g. 6-10, 1980-1999
  \\"\\"\\"
  ages: [Range!]!

  \\"\\"\\"Appropriate audience as recommended by the library\\"\\"\\"
  libraryRecommendation: String

  \\"\\"\\"
  Level of difficulty, illustrations, length, and realism in children's literature
  \\"\\"\\"
  levelForChildren8to12: LevelForAudience

  \\"\\"\\"Is this material for children or adults\\"\\"\\"
  childrenOrAdults: [ChildOrAdult!]!

  \\"\\"\\"
  Is this material for use in schools (folkeskole/ungdomsuddannelse) or is this material for use in schools by the teacher (folkeskole only)
  \\"\\"\\"
  schoolUse: [SchoolUse!]!

  \\"\\"\\"Primary target audience for this manifestation\\"\\"\\"
  primaryTarget: [String!]!

  \\"\\"\\"
  LET number of this manifestion, defines the reability level, LET stands for læseegnethedstal
  \\"\\"\\"
  let: String

  \\"\\"\\"
  Lix number of this manifestion, defines the reability level, Lix stands for læsbarhedsindex
  \\"\\"\\"
  lix: String

  \\"\\"\\"Number of players in the game.\\"\\"\\"
  players: Players

  \\"\\"\\"PEGI age rating for games \\"\\"\\"
  PEGI: PEGI @deprecated(reason: \\"Use 'Audience.pegi' instead expires: 01/06-2025\\")

  \\"\\"\\"PEGI age rating for games \\"\\"\\"
  pegi: PEGI

  \\"\\"\\"Media council age recommendation\\"\\"\\"
  mediaCouncilAgeRestriction: MediaCouncilAgeRestriction
}

type LevelForAudience {
  \\"\\"\\"Level expressed as integer on a scale from 1 to 5\\"\\"\\"
  difficulty: Int

  \\"\\"\\"Level expressed as integer on a scale from 1 to 5\\"\\"\\"
  illustrationsLevel: Int

  \\"\\"\\"Level expressed as integer on a scale from 1 to 5\\"\\"\\"
  length: Int

  \\"\\"\\"Level expressed as integer on a scale from 1 to 5\\"\\"\\"
  realisticVsFictional: Int
}

\\"\\"\\"
A search hit that encapsulates a matched manifestation from a search query.
\\"\\"\\"
type SearchHit {
  \\"\\"\\"The manifestation that was matched during the search.\\"\\"\\"
  match: Manifestation
}

type Manifestations {
  first: Manifestation!
  latest: Manifestation!
  all: [Manifestation!]!
  bestRepresentation: Manifestation!
  bestRepresentations: [Manifestation!]!
  mostRelevant: [Manifestation!]!

  \\"\\"\\"
  A list of manifestations that matched the search query.
  
  This field is populated only when a work is retrieved within a search context.
  Each entry is a SearchHit object representing a manifestation that matched the search criteria.
  Only one manifestation per unit is returned.
  \\"\\"\\"
  searchHits: [SearchHit!]
}

type Manifestation {
  \\"\\"\\"
  A unique identifier for tracking user interactions with this manifestation. 
  It is generated in the response and should be included in subsequent
  API calls when this manifestation is selected.
  \\"\\"\\"
  traceId: String!

  \\"\\"\\"Unique identification of the manifestation e.g 870970-basis:54029519\\"\\"\\"
  pid: String!

  \\"\\"\\"Different kinds of titles for this work\\"\\"\\"
  titles: ManifestationTitles!

  \\"\\"\\"Abstract of the entity\\"\\"\\"
  abstract: [String!]!

  \\"\\"\\"Access type of this manifestation\\"\\"\\"
  accessTypes: [AccessType!]!

  \\"\\"\\"Different options to access manifestation\\"\\"\\"
  access: [AccessUnion!]!

  \\"\\"\\"
  Different kinds of definitions of appropriate audience for this manifestation
  \\"\\"\\"
  audience: Audience

  \\"\\"\\"
  CatalogueCodes divided in codes from the national bibliography and other codes
  \\"\\"\\"
  catalogueCodes: CatalogueCodes!

  \\"\\"\\"
  Classification codes for this manifestation from any classification system
  \\"\\"\\"
  classifications: [Classification!]!

  \\"\\"\\"Contributors to the manifestation, actors, illustrators etc\\"\\"\\"
  contributors: [CreatorInterface!]!

  \\"\\"\\"
  Additional contributors of this manifestation as described on the publication. E.g. 'på dansk ved Vivi Berendt'
  \\"\\"\\"
  contributorsFromDescription: [String!]!

  \\"\\"\\"
  Primary creators of the manifestation e.g. authors, directors, musicians etc
  \\"\\"\\"
  creators: [CreatorInterface!]!

  \\"\\"\\"
  Additional creators of this manifestation as described on the publication. E.g. 'tekst af William Warren'
  \\"\\"\\"
  creatorsFromDescription: [String!]!

  \\"\\"\\"The year for the publication of the first edition for this work \\"\\"\\"
  dateFirstEdition: PublicationYear

  \\"\\"\\"Edition details for this manifestation\\"\\"\\"
  edition: Edition

  \\"\\"\\"Details about the latest printing of this manifestation\\"\\"\\"
  latestPrinting: Printing

  \\"\\"\\"
  Overall literary category/genre of this manifestation. e.g. fiction or nonfiction. In Danish skønlitteratur/faglitteratur for literature, fiktion/nonfiktion for other types.
  \\"\\"\\"
  fictionNonfiction: FictionNonfiction

  \\"\\"\\"The genre, (literary) form, type etc. of this manifestation\\"\\"\\"
  genreAndForm: [String!]!

  \\"\\"\\"Details about the host publications of this manifestation\\"\\"\\"
  hostPublication: HostPublication

  \\"\\"\\"Identifiers for this manifestation - often used for search indexes\\"\\"\\"
  identifiers: [Identifier!]!

  \\"\\"\\"Languages in this manifestation\\"\\"\\"
  languages: Languages

  \\"\\"\\"
  Tracks on music album, sheet music content, or articles/short stories etc. in this manifestation
  \\"\\"\\"
  manifestationParts: ManifestationParts @deprecated(reason: \\"Use 'Manifestation.contents' instead expires: 01/11-2025\\")

  \\"\\"\\"
  Content title entries with possible creators, contributors and playing time for music tracks, sheet music titles, articles, poems, short stories etc.
  \\"\\"\\"
  contents: [ContentsEntity!]

  \\"\\"\\"The type of material of the manifestation based on bibliotek.dk types\\"\\"\\"
  materialTypes: [MaterialType!]!

  \\"\\"\\"Notes about the manifestation\\"\\"\\"
  notes: [Note!]!

  \\"\\"\\"The work that this manifestation is part of\\"\\"\\"
  ownerWork: Work!

  \\"\\"\\"
  Notes about relations to this book/periodical/journal, - like previous names or related journals
  \\"\\"\\"
  relatedPublications: [RelatedPublication!]!

  \\"\\"\\"
  Physical description  of this manifestation like extent (pages/minutes), illustrations etc.
  \\"\\"\\"
  physicalDescription: PhysicalUnitDescription

  \\"\\"\\"Publisher of this manifestion\\"\\"\\"
  publisher: [String!]!

  \\"\\"\\"
  The creation date of the record describing this manifestation in the format YYYYMMDD
  \\"\\"\\"
  recordCreationDate: String!

  \\"\\"\\"Series for this manifestation\\"\\"\\"
  series: [Series!]!

  \\"\\"\\"Universes for this manifestation\\"\\"\\"
  universes: [Universe!]!

  \\"\\"\\"
  Information about on which shelf in the library this manifestation can be found
  \\"\\"\\"
  shelfmark: Shelfmark

  \\"\\"\\"
  The source of the manifestation, e.g. own library catalogue (Bibliotekskatalog) or online source e.g. Filmstriben, Ebook Central, eReolen Global etc.
  \\"\\"\\"
  source: [String!]!

  \\"\\"\\"Subjects for this manifestation\\"\\"\\"
  subjects: SubjectContainer!

  \\"\\"\\"
  Information about on which volume this manifestation is in multi volume work
  \\"\\"\\"
  volume: String

  \\"\\"\\"
  Quotation of the manifestation's table of contents or a similar content list
  \\"\\"\\"
  tableOfContents: TableOfContent @deprecated(reason: \\"Use 'Manifestation.contents' instead expires: 01/11-2025\\")

  \\"\\"\\"Worktypes for this manifestations work\\"\\"\\"
  workTypes: [WorkTypeEnum!]!

  \\"\\"\\"The year this manifestation was originally published or produced\\"\\"\\"
  workYear: PublicationYear

  \\"\\"\\"id of the manifestaion unit\\"\\"\\"
  unit: Unit

  \\"\\"\\"Identification of the local id of this manifestation\\"\\"\\"
  localId: String

  \\"\\"\\"Material that can be identified as sheet music\\"\\"\\"
  sheetMusicCategories: SheetMusicCategory

  \\"\\"\\"The publication status of a catalogued manifestation.\\"\\"\\"
  cataloguedPublicationStatus: CataloguedPublicationStatus

  \\"\\"\\"Field for presenting bibliographic records in MARC format\\"\\"\\"
  marc: MarcRecord

  \\"\\"\\"Relations to other manifestations\\"\\"\\"
  relations: Relations!

  \\"\\"\\"Some review data, if this manifestation is a review\\"\\"\\"
  review: ManifestationReview
}

\\"\\"\\"Represents the publication status of a catalogued manifestation.\\"\\"\\"
enum CataloguedPublicationStatusEnum {
  \\"\\"\\"New title\\"\\"\\"
  NT

  \\"\\"\\"New edition\\"\\"\\"
  NU

  \\"\\"\\"New print run\\"\\"\\"
  OP
}

type CataloguedPublicationStatus {
  \\"\\"\\"The code representing the catalogued publication status.\\"\\"\\"
  code: CataloguedPublicationStatusEnum!

  \\"\\"\\"The display text corresponding to the publication status code.\\"\\"\\"
  display: String!
}

type SheetMusicCategory {
  \\"\\"\\"The types of instruments material covers\\"\\"\\"
  instruments: [String!]!

  \\"\\"\\"I this node for exercises\\"\\"\\"
  forMusicalExercise: Boolean

  \\"\\"\\"The types of choir material covers\\"\\"\\"
  choirTypes: [String!]!

  \\"\\"\\"The types of chamber music material covers\\"\\"\\"
  chamberMusicTypes: [String!]!

  \\"\\"\\"The types of orchestra material covers\\"\\"\\"
  orchestraTypes: [String!]!
}

type Unit {
  id: String!
  manifestations: [Manifestation!]!
}

type ManifestationTitles {
  \\"\\"\\"The main title(s) of the work\\"\\"\\"
  main: [String!]!

  \\"\\"\\"The full title(s) of the manifestation including subtitles etc\\"\\"\\"
  full: [String!]!

  \\"\\"\\"The sorted title of the entity\\"\\"\\"
  sort: String!

  \\"\\"\\"
  Alternative titles for this manifestation e.g. a title in a different language
  \\"\\"\\"
  alternative: [String!]!

  \\"\\"\\"
  Information that distinguishes this manifestation from a similar manifestation with same title, e.g. 'illustrated by Ted Kirby'
  \\"\\"\\"
  identifyingAddition: String

  \\"\\"\\"
  The title of the work that this expression/manifestation is translated from or based on. The original title(s) of a film which has a different distribution title.
  \\"\\"\\"
  original: [String!]

  \\"\\"\\"
  Titles (in other languages) parallel to the main 'title' of the manifestation
  \\"\\"\\"
  parallel: [String!]!

  \\"\\"\\"The standard title of the entity, used for music and movies\\"\\"\\"
  standard: String

  \\"\\"\\"
  The title of the entity with the language of the entity in parenthesis after. This field is only generated for non-danish titles.
  \\"\\"\\"
  titlePlusLanguage: String

  \\"\\"\\"Danish translation of the main title\\"\\"\\"
  translated: [String!]

  \\"\\"\\"detailed title for tv series \\"\\"\\"
  tvSeries: TvSeries
}

enum ContentsEntityEnum {
  ARTICLES
  CHAPTERS
  FICTION
  MUSIC_TRACKS
  SHEET_MUSIC
  NOT_SPECIFIED
}

type ContentEntryTitle {
  \\"\\"\\"Title of the content entry\\"\\"\\"
  display: String!
}

type ContentEntryCreators {
  \\"\\"\\"Details about a person, name, role etc.\\"\\"\\"
  persons: [Person!]

  \\"\\"\\"Details about a corporation or conference, name, role, etc.\\"\\"\\"
  corporations: [Corporation!]
}

type ContentEntry {
  \\"\\"\\"Top level title of the entry\\"\\"\\"
  title: ContentEntryTitle!

  \\"\\"\\"
  Main creator(s) of the entry i.e. composer (classical music), artist/band (rhythmic music), author (fiction, articles). For music and sheet music always only 1 creator, for articles and fiction possibly more than 1
  \\"\\"\\"
  creators: ContentEntryCreators

  \\"\\"\\"
  Additional 'authors' (lyricists, arrangers, performers/soloists etc.), quoted as strings (including possible author's statement) from the record
  \\"\\"\\"
  contributors: [String!]

  \\"\\"\\"Playing time for music tracks, quoted from the record\\"\\"\\"
  playingTime: String

  \\"\\"\\"
  Possible entry data (title, creators, contributors, playingtime) subordinate to the entry's top level
  \\"\\"\\"
  sublevel: [ContentSublevel!]
}

type ContentsEntity {
  \\"\\"\\"Heading for the contents of this entity\\"\\"\\"
  heading: String!

  \\"\\"\\"
  ENUM for type of content entries (music tracks, articles, fiction etc.) in this entity
  \\"\\"\\"
  type: ContentsEntityEnum!

  \\"\\"\\"
  Contents text note quoted as it is from the marc field. Used for non-machine-decipherable content notes (un)formatted in only 1 subfield)
  \\"\\"\\"
  raw: String

  \\"\\"\\"
  Content entry with title and possible creator(s), contributors and (for some music and movies) playing time
  \\"\\"\\"
  entries: [ContentEntry!]
}

type ContentSublevelLast {
  \\"\\"\\"Title subordinate to the title in the entry's top level\\"\\"\\"
  title: ContentEntryTitle!

  \\"\\"\\"
  Additional 'authors' (lyricists, arrangers, performers/soloists etc.) related to the title on sublevel 1, quoted as strings (including possible author's statement) from the record
  \\"\\"\\"
  contributors: [String!]

  \\"\\"\\"Playing time for music tracks\\"\\"\\"
  playingTime: String
}

type ContentSublevel {
  \\"\\"\\"Title subordinate to the title in the entry's top level\\"\\"\\"
  title: ContentEntryTitle!

  \\"\\"\\"
  Additional 'authors' (lyricists, arrangers, performers/soloists etc.) related to the title on sublevel 1, quoted as strings (including possible author's statement) from the record
  \\"\\"\\"
  contributors: [String!]

  \\"\\"\\"Playing time for music tracks\\"\\"\\"
  playingTime: String

  \\"\\"\\"
  Possible entry data (title, contributors, playingtime) subordinate to the entry's sublevel 1
  \\"\\"\\"
  sublevel: [ContentSublevelLast!]
}

type MarcRecord {
  \\"\\"\\"The marc record identifier\\"\\"\\"
  id: String!

  \\"\\"\\"The library agency\\"\\"\\"
  agencyId: String!

  \\"\\"\\"The bibliographic record identifier\\"\\"\\"
  bibliographicRecordId: String!

  \\"\\"\\"The MARC record collection content as marcXchange XML string\\"\\"\\"
  content: String!

  \\"\\"\\"
  The serialization format of the MARC record content. Defaults to 'marcXchange'
  \\"\\"\\"
  contentSerializationFormat: String!

  \\"\\"\\"Flag indicating whether or not the record is deleted\\"\\"\\"
  deleted: Boolean!
}

enum GeneralMaterialTypeCodeEnum {
  ARTICLES
  AUDIO_BOOKS
  BOARD_GAMES
  BOOKS
  COMICS
  COMPUTER_GAMES
  EBOOKS
  FILMS
  IMAGE_MATERIALS
  MUSIC
  NEWSPAPER_JOURNALS
  OTHER
  PODCASTS
  SHEET_MUSIC
  TV_SERIES
}

type Relations {
  \\"\\"\\"
  The story of this article is continued in this or these other article(s)
  \\"\\"\\"
  continuedIn: [Manifestation!]!

  \\"\\"\\"
  This story of this article actually started in this or these other article(s)
  \\"\\"\\"
  continues: [Manifestation!]!

  \\"\\"\\"The contents of this articles is also discussed in these articles\\"\\"\\"
  discussedIn: [Manifestation!]!

  \\"\\"\\"The article discusses the content of these articles\\"\\"\\"
  discusses: [Manifestation!]!

  \\"\\"\\"This story is adapted in this or these movie(s)\\"\\"\\"
  hasAdaptation: [Manifestation!]!

  \\"\\"\\"The contents of this manifestation is analysed in these manifestations\\"\\"\\"
  hasAnalysis: [Manifestation!]!

  \\"\\"\\"The creator of this manifestation is portrayed in these manifestations\\"\\"\\"
  hasCreatorDescription: [Manifestation!]!

  \\"\\"\\"
  The publisher of this manifestation has made a description of the content
  \\"\\"\\"
  hasDescriptionFromPublisher: [Manifestation!]!

  \\"\\"\\"This movie is based on this manuscript\\"\\"\\"
  hasManuscript: [Manifestation!]!

  \\"\\"\\"
  This manifestation has a 'materialevurdering' that was originally made for another manifestation, but it is still relevant (e.g. book/ebook)
  \\"\\"\\"
  hasReusedReview: [Manifestation!]!

  \\"\\"\\"This manifestation has these reviews\\"\\"\\"
  hasReview: [Manifestation!]!

  \\"\\"\\"This movie or game has this sound track\\"\\"\\"
  hasSoundtrack: [Manifestation!]!

  \\"\\"\\"This movie is based on this or these books\\"\\"\\"
  isAdaptationOf: [Manifestation!]!

  \\"\\"\\"This manifestation is an analysis of these manifestations\\"\\"\\"
  isAnalysisOf: [Manifestation!]!

  \\"\\"\\"
  This is a description from the original publisher of these manifestations
  \\"\\"\\"
  isDescriptionFromPublisherOf: [Manifestation!]!

  \\"\\"\\"This movie is based on this manuscript\\"\\"\\"
  isManuscriptOf: [Manifestation!]!

  \\"\\"\\"
  This 'materialevurdering' can also be used to review these relevant manifestations, even though it was originally made for another publication
  \\"\\"\\"
  isReusedReviewOf: [Manifestation!]!

  \\"\\"\\"This manifestation is a review of these manifestations\\"\\"\\"
  isReviewOf: [Manifestation!]!

  \\"\\"\\"This sound track for a game is related to these games\\"\\"\\"
  isSoundtrackOfGame: [Manifestation!]!

  \\"\\"\\"This sound track for a movie is related to these movies\\"\\"\\"
  isSoundtrackOfMovie: [Manifestation!]!

  \\"\\"\\"This album has these tracks\\"\\"\\"
  hasTrack: [Manifestation!]!

  \\"\\"\\"This music track is part of these albums\\"\\"\\"
  isPartOfAlbum: [Manifestation!]!

  \\"\\"\\"This article or book part can be found in these manifestations\\"\\"\\"
  isPartOfManifestation: [Manifestation!]!
}

enum ReviewElementTypeEnum {
  ABSTRACT
  ACQUISITION_RECOMMENDATIONS
  AUDIENCE
  CONCLUSION
  DESCRIPTION
  EVALUATION
  SIMILAR_MATERIALS
}

type ReviewElement {
  content: String

  \\"\\"\\"
  This is a paragraph containing markup where links to manifestations
  can be inserted. For instance '\\"Axel Steens nye job minder om [870970-basis:20307021] fra ...'.
  Relevant manifestations are located in the manifestations field. 
  \\"\\"\\"
  contentSubstitute: String
  heading: String

  \\"\\"\\"
  Manifestations that can be used to generate and insert links into 'contentSubsitute'.
  \\"\\"\\"
  manifestations: [Manifestation]
  type: ReviewElementTypeEnum
}

type ManifestationReview {
  rating: String
  reviewByLibrarians: [ReviewElement]
}

\\"\\"\\"A facet value consists of a term and a count.\\"\\"\\"
type FacetValue {
  \\"\\"\\"Use the key when applying filters\\"\\"\\"
  key: String!

  \\"\\"\\"A value of a facet field\\"\\"\\"
  term: String!

  \\"\\"\\"A score indicating relevance\\"\\"\\"
  score: Int

  \\"\\"\\"
  A unique identifier for tracking user interactions with this facet value. 
  It is generated in the response and should be included in subsequent
  API calls when this manifestation is selected.
  \\"\\"\\"
  traceId: String!
}

type SerieWork {
  \\"\\"\\"The number of work in the series as a number (as text)\\"\\"\\"
  numberInSeries: String

  \\"\\"\\"Work of a serieWork\\"\\"\\"
  work: Work!

  \\"\\"\\"Information about whether this work in the series should be read first\\"\\"\\"
  readThisFirst: Boolean

  \\"\\"\\"
  Information about whether this work in the series can be read without considering the order of the series, it can be read at any time
  \\"\\"\\"
  readThisWhenever: Boolean
}

type Series {
  \\"\\"\\"The number of members in the series\\"\\"\\"
  hitcount: Int!

  \\"\\"\\"The title of the series\\"\\"\\"
  title: String!

  \\"\\"\\"Identifier for the series\\"\\"\\"
  seriesId: String

  \\"\\"\\"Traceid for tracking\\"\\"\\"
  traceId: String!

  \\"\\"\\"Additional information \\"\\"\\"
  identifyingAddition: String

  \\"\\"\\"Description of the series\\"\\"\\"
  description: String

  \\"\\"\\"A alternative title to the main 'title' of the series\\"\\"\\"
  alternativeTitles: [String!]!

  \\"\\"\\"
  A parallel title to the main 'title' of the series, in a different language
  \\"\\"\\"
  parallelTitles: [String!]!

  \\"\\"\\"The number in the series as text qoutation\\"\\"\\"
  numberInSeries: String

  \\"\\"\\"Information about whether this work in the series should be read first\\"\\"\\"
  readThisFirst: Boolean

  \\"\\"\\"
  Information about whether this work in the series can be read without considering the order of the series, it can be read at any time
  \\"\\"\\"
  readThisWhenever: Boolean

  \\"\\"\\"Whether this is a popular series or general series\\"\\"\\"
  isPopular: Boolean

  \\"\\"\\"WorkTypes for the series\\"\\"\\"
  workTypes: [String!]!

  \\"\\"\\"MainLanguages of the series\\"\\"\\"
  mainLanguages: [String!]!

  \\"\\"\\"Members of this serie. \\"\\"\\"
  members(limit: Int, offset: Int): [SerieWork!]!
}

interface SubjectInterface {
  display: String!

  \\"\\"\\"
  The type of subject - 'location', 'time period' etc., 'topic' if not specific kind of subject term
  \\"\\"\\"
  type: SubjectTypeEnum!

  \\"\\"\\"Language of the subject - contains display and isoCode \\"\\"\\"
  language: Language
  local: Boolean
}

type SubjectText implements SubjectInterface {
  type: SubjectTypeEnum!
  display: String!
  language: Language
  local: Boolean
}

type TimePeriod implements SubjectInterface {
  type: SubjectTypeEnum!
  period: Range!
  display: String!
  language: Language
  local: Boolean
}

type Mood implements SubjectInterface {
  type: SubjectTypeEnum!
  display: String!
  language: Language
  local: Boolean
}

type NarrativeTechnique implements SubjectInterface {
  type: SubjectTypeEnum!
  display: String!
  language: Language
  local: Boolean
}

type Setting implements SubjectInterface {
  type: SubjectTypeEnum!
  display: String!
  language: Language
  local: Boolean
}

type SubjectWithRating implements SubjectInterface {
  type: SubjectTypeEnum!
  display: String!
  language: Language
  local: Boolean

  \\"\\"\\"Expressed as integer on a scale from 1 to 5\\"\\"\\"
  rating: Int
}

enum SubjectTypeEnum {
  TOPIC
  LOCATION
  FICTIONAL_CHARACTER
  LAESEKOMPASSET
  MEDICAL_SUBJECT_HEADING
  MUSIC_COUNTRY_OF_ORIGIN
  MUSIC_TIME_PERIOD
  MUSICAL_INSTRUMENTATION
  NATIONAL_AGRICULTURAL_LIBRARY
  TIME_PERIOD
  TITLE
  FILM_NATIONALITY
  LIBRARY_OF_CONGRESS_SUBJECT_HEADING
  FICTIONAL_LOCATION

  \\"\\"\\"
  added for manifestation.parts.creators/person - they get a type from small-rye
  \\"\\"\\"
  PERSON
  CORPORATION
  MOOD
  MOOD_CHILDREN

  \\"\\"\\"Subject describing selected topics for children, and a rating.\\"\\"\\"
  TOPIC_CHILDREN
  PERSPECTIVE
  STYLE
  TEMPO
  REALITY
  ENVIRONMENT
}

type Range {
  begin: Int
  end: Int
  display: String!
}

type SubjectContainer {
  \\"\\"\\"All subjects\\"\\"\\"
  all: [SubjectInterface!]!

  \\"\\"\\"Only DBC verified subjects\\"\\"\\"
  dbcVerified: [SubjectInterface!]!
}

union UniverseContentUnion = Work | Series

type Universe {
  \\"\\"\\"A key that identifies a universe.\\"\\"\\"
  key: String

  \\"\\"\\"An id that identifies a universe.\\"\\"\\"
  universeId: String

  \\"\\"\\"
  A unique identifier for tracking user interactions with this universe.
  It is generated in the response and should be included in subsequent
  API calls when this work is selected.
  \\"\\"\\"
  traceId: String!

  \\"\\"\\"
  Literary/movie universe this work is part of e.g. Wizarding World, Marvel Cinematic Universe
  \\"\\"\\"
  title: String!

  \\"\\"\\"A alternative title to the main 'title' of the universe\\"\\"\\"
  alternativeTitles: [String!]

  \\"\\"\\"Description of the universe\\"\\"\\"
  description: String

  \\"\\"\\"All series within the universe\\"\\"\\"
  series(limit: Int, offset: Int, workType: WorkTypeEnum): [Series!]!

  \\"\\"\\"All works within the universe but not in any series\\"\\"\\"
  works(limit: Int, offset: Int, workType: WorkTypeEnum): [Work!]!

  \\"\\"\\"work types that are in this universe\\"\\"\\"
  workTypes: [WorkTypeEnum!]!

  \\"\\"\\"both series and works in a list\\"\\"\\"
  content(limit: Int, offset: Int, workType: WorkTypeEnum): UniverseContentResult!
}

type UniverseContentResult {
  hitcount: Int!
  entries: [UniverseContentUnion!]!
}

type Language {
  \\"\\"\\"Language as displayable text\\"\\"\\"
  display: String!

  \\"\\"\\"ISO639-2 language code\\"\\"\\"
  isoCode: String!

  \\"\\"\\"ISO639-1 language code (2 letters)\\"\\"\\"
  iso639Set1: String!

  \\"\\"\\"ISO639-2 language code (3 letters)\\"\\"\\"
  iso639Set2: String!
}

type GeneralMaterialType {
  \\"\\"\\"
  code for materialType # @TODO - is this a finite list ?? - and where to get it
  \\"\\"\\"
  code: GeneralMaterialTypeCodeEnum!

  \\"\\"\\"Ths string to display\\"\\"\\"
  display: String!
}

type SpecificMaterialType {
  \\"\\"\\"code for materialType\\"\\"\\"
  code: String!

  \\"\\"\\"Ths string to display\\"\\"\\"
  display: String!
}

type MaterialType {
  \\"\\"\\"jed 1.1 - the general materialtype\\"\\"\\"
  materialTypeGeneral: GeneralMaterialType!

  \\"\\"\\"jed 1.1 - the specific materialtType\\"\\"\\"
  materialTypeSpecific: SpecificMaterialType!
}

enum FictionNonfictionCodeEnum {
  FICTION
  NONFICTION
  NOT_SPECIFIED
}

type FictionNonfiction {
  \\"\\"\\"
  Displayable overall category/genre. In Danish skønlitteratur/faglitteratur for literature, fiktion/nonfiktion for other types.
  \\"\\"\\"
  display: String!

  \\"\\"\\"Binary code fiction/nonfiction used for filtering\\"\\"\\"
  code: FictionNonfictionCodeEnum!
}

type DK5MainEntry {
  \\"\\"\\"Displayable main DK5 classification\\"\\"\\"
  display: String!

  \\"\\"\\"Main DK5 classification code\\"\\"\\"
  code: String!

  \\"\\"\\"The dk5Heading for the classification\\"\\"\\"
  dk5Heading: String!
}

enum WorkTypeEnum {
  ANALYSIS
  ARTICLE
  BOOKDESCRIPTION
  GAME
  LITERATURE
  MAP
  MOVIE
  MUSIC
  OTHER
  PERIODICA
  PORTRAIT
  REVIEW
  SHEETMUSIC
  TRACK
}

type WorkTitles {
  \\"\\"\\"The main title(s) of the work\\"\\"\\"
  main: [String!]!

  \\"\\"\\"The full title(s) of the work including subtitles etc\\"\\"\\"
  full: [String!]!

  \\"\\"\\"Titles (in other languages) parallel to the main 'title' of the work\\"\\"\\"
  parallel: [String!]!

  \\"\\"\\"The sorted title of the entity\\"\\"\\"
  sort: String!

  \\"\\"\\"
  The title of the work that this expression/manifestation is translated from or based on. The original title(s) of a film which has a different distribution title.
  \\"\\"\\"
  original: [String!]

  \\"\\"\\"The standard title of the entity, used for music and movies\\"\\"\\"
  standard: String

  \\"\\"\\"
  The title of the entity with the language of the entity in parenthesis after. This field is only generated for non-danish titles.
  \\"\\"\\"
  titlePlusLanguage: String

  \\"\\"\\"Danish translation of the main title\\"\\"\\"
  translated: [String!]

  \\"\\"\\"detailed title for tv series \\"\\"\\"
  tvSeries: TvSeries
}

type TvSeries {
  \\"\\"\\"Title of the tv serie\\"\\"\\"
  title: String

  \\"\\"\\"Dansih translated title of the tv serie\\"\\"\\"
  danishLaunchTitle: String

  \\"\\"\\"Detailed information about the episode\\"\\"\\"
  episode: TvSeriesDetails

  \\"\\"\\"Episode titles\\"\\"\\"
  episodeTitles: [String!]

  \\"\\"\\"Detailed information about the disc\\"\\"\\"
  disc: TvSeriesDetails

  \\"\\"\\"Detailed information about the season\\"\\"\\"
  season: TvSeriesDetails

  \\"\\"\\"Detailed information about the volume\\"\\"\\"
  volume: TvSeriesDetails
}

type TvSeriesDetails {
  display: String
  numbers: [Int!]
}
"
`;
