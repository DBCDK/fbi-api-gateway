// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`default schema transform 1`] = `
"\\"\\"\\"Search Filters\\"\\"\\"
input ComplexSearchFilters {
  branchId: [String!]
  department: [String!]
  location: [String!]
  sublocation: [String!]
  status: [HoldingsStatus!]
}

\\"\\"\\"The search response\\"\\"\\"
type ComplexSearchResponse {
  \\"\\"\\"Total number of works found. May be used for pagination.\\"\\"\\"
  hitcount: Int!

  \\"\\"\\"
  The works matching the given search query. Use offset and limit for pagination.
  \\"\\"\\"
  works(offset: Int!, limit: PaginationLimit!): [Work!]!
}

type Cover {
  detail_117: String
  detail_207: String
  detail_42: String
  detail_500: String
  thumbnail: String
  detail: String
}

enum AccessTypeCode {
  PHYSICAL
  ONLINE
  NOT_SPECIFIED
}

type AccessType {
  display: String!
  code: AccessTypeCode!
}

type Ereol {
  \\"\\"\\"
  The origin, e.g. \\"Ereolen\\" or \\"Ereolen Go\\"
  \\"\\"\\"
  origin: String!

  \\"\\"\\"The url where manifestation is located\\"\\"\\"
  url: String!

  \\"\\"\\"
  Is this a manifestation that always can be loaned on ereolen.dk even if you've run out of loans this month
  \\"\\"\\"
  canAlwaysBeLoaned: Boolean!
}

type AccessUrl {
  \\"\\"\\"
  The origin, e.g. \\"DBC Webarkiv\\"
  \\"\\"\\"
  origin: String!

  \\"\\"\\"The url where manifestation is located\\"\\"\\"
  url: String!

  \\"\\"\\"Notes for the resource\\"\\"\\"
  note: String

  \\"\\"\\"If the resource requires login\\"\\"\\"
  loginRequired: Boolean!
}

type InterLibraryLoan {
  \\"\\"\\"Is true when manifestation can be borrowed via ill\\"\\"\\"
  loanIsPossible: Boolean!
}

type InfomediaService {
  \\"\\"\\"
  Infomedia ID which can be used to fetch article through Infomedia Service
  \\"\\"\\"
  id: String!
}

type DigitalArticleService {
  \\"\\"\\"
  Issn which can be used to order article through Digital Article Service
  \\"\\"\\"
  issn: String!
}

union Access = AccessUrl | Ereol | InterLibraryLoan | InfomediaService | DigitalArticleService

type Translation {
  \\"\\"\\"
  Translation in plural form, e.g. forfattere, komponister, instruktører etc.
  \\"\\"\\"
  plural: String!

  \\"\\"\\"Translation in singular form, e.g. forfatter, komponist, instruktør\\"\\"\\"
  singular: String!
}

type Role {
  \\"\\"\\"
  The code for the type of creator or contributor, e.g. 'aut' for author, 'ill' for illustrator etc
  \\"\\"\\"
  functionCode: String!

  \\"\\"\\"
  The type of creator/contributor as text in singular and plural in Danish, e.g. forfatter/forfattere, komponist/komponister etc
  \\"\\"\\"
  function: Translation!
}

type Person implements Subject & Creator {
  \\"\\"\\"The person's whole name in normal order\\"\\"\\"
  display: String!

  \\"\\"\\"The person's full name inverted\\"\\"\\"
  nameSort: String!

  \\"\\"\\"First name of the person\\"\\"\\"
  firstName: String

  \\"\\"\\"Last name of the person\\"\\"\\"
  lastName: String

  \\"\\"\\"Birth year of the person\\"\\"\\"
  birthYear: String

  \\"\\"\\"A roman numeral added to the person, like Christian IV\\"\\"\\"
  romanNumeral: String

  \\"\\"\\"Added information about the person, like Henri, konge af Frankrig\\"\\"\\"
  attributeToName: String

  \\"\\"\\"Creator aliases, creators behind used pseudonym\\"\\"\\"
  aliases: [Person!]!

  \\"\\"\\"
  A list of which kinds of contributions this person made to this creation
  \\"\\"\\"
  roles: [Role!]!
}

type Corporation implements Subject & Creator {
  \\"\\"\\"The full corporation or conference name\\"\\"\\"
  display: String!

  \\"\\"\\"The full corporation or conference name to sort after\\"\\"\\"
  nameSort: String!

  \\"\\"\\"Main corporation or conference\\"\\"\\"
  main: String

  \\"\\"\\"Sub corporation or conference/meeting\\"\\"\\"
  sub: String

  \\"\\"\\"
  Location or jurisdiction of the corporation or conference, like Københavns Kommune, Statistisk Kontor
  \\"\\"\\"
  location: String

  \\"\\"\\"Year of the conference\\"\\"\\"
  year: String

  \\"\\"\\"Number of the conference\\"\\"\\"
  number: String

  \\"\\"\\"
  Added information about the corporation, like M. Folmer Andersen (firma)
  \\"\\"\\"
  attributeToName: String

  \\"\\"\\"
  A list of which kinds of contributions this corporation made to this creation
  \\"\\"\\"
  roles: [Role!]!
}

interface Creator {
  \\"\\"\\"Name of the creator\\"\\"\\"
  display: String!

  \\"\\"\\"Name of the creator which can be used to sort after \\"\\"\\"
  nameSort: String!

  \\"\\"\\"
  A list of which kinds of contributions this creator made to this creation
  \\"\\"\\"
  roles: [Role!]!
}

enum InfomediaError {
  SERVICE_NOT_LICENSED
  SERVICE_UNAVAILABLE
  LIBRARY_NOT_FOUND
  ERROR_IN_REQUEST
  BORROWER_NOT_LOGGED_IN
  BORROWER_NOT_FOUND
  BORROWERCHECK_NOT_ALLOWED
  INTERNAL_SERVER_ERROR
  BORROWER_NOT_IN_MUNICIPALITY
  NO_MUNICIPALITY
}

type InfomediaResponse {
  \\"\\"\\"Infomedia error\\"\\"\\"
  error: InfomediaError
  article: InfomediaArticle
}

type InfomediaArticle {
  id: String!
  headLine: String
  subHeadLine: String
  byLine: String
  dateLine: String
  paper: String
  text: String
  hedLine: String
  logo: String
  html: String
}

type TableOfContent {
  heading: String
  content: String
  listOfContent: [TableOfContent!]
}

type Shelfmark {
  \\"\\"\\"A postfix to the shelfmark, eg. 99.4 Christensen, Inger. f. 1935\\"\\"\\"
  postfix: String!

  \\"\\"\\"
  The actual shelfmark - e.g. information about on which shelf in the library this manifestation can be found, e.g. 99.4
  \\"\\"\\"
  shelfmark: String!
}

type PhysicalDescription {
  \\"\\"\\"
  A summary of the physical description of this manifestation like extent (pages/minutes), illustrations etc.
  \\"\\"\\"
  summary: String!

  \\"\\"\\"Material that comes with the manifestation (bilag)\\"\\"\\"
  accompanyingMaterial: String

  \\"\\"\\"
  Additional physical description of the manifestation (e.g illustrations etc)
  \\"\\"\\"
  additionalDescription: String

  \\"\\"\\"Extent of the manifestation like pages and number of items\\"\\"\\"
  extent: String

  \\"\\"\\"Number of pages of the manifestation as number\\"\\"\\"
  numberOfPages: Int

  \\"\\"\\"Number of units, like 3 cassettes, or 1 score etc.\\"\\"\\"
  numberOfUnits: Int

  \\"\\"\\"The playing time of the manifestation (e.g 2 hours 5 minutes)\\"\\"\\"
  playingTime: String

  \\"\\"\\"The necessary equipment to use the material\\"\\"\\"
  requirements: String

  \\"\\"\\"Size of the manifestation\\"\\"\\"
  size: String

  \\"\\"\\"Technical information about the manifestation (e.g blu-ray disc)\\"\\"\\"
  technicalInformation: String

  \\"\\"\\"
  Ratio of text vs. illustration from 1-5 as a number, where 1 means no illustrations and 5 means illustrations on all pages
  \\"\\"\\"
  textVsIllustrations: Int
}

type RelatedPublication {
  \\"\\"\\"
  Notes describing the relation of the related periodical/journal/publication
  \\"\\"\\"
  heading: String!

  \\"\\"\\"Title of the related periodical/journal\\"\\"\\"
  title: [String!]!

  \\"\\"\\"ISSN of the related periodical/journal/publication\\"\\"\\"
  issn: String

  \\"\\"\\"ISBN of the related publication\\"\\"\\"
  isbn: String

  \\"\\"\\"Note regarding the URL of the related publication\\"\\"\\"
  urlText: String

  \\"\\"\\"URL of the related publication\\"\\"\\"
  url: String
}

enum NoteType {
  CONNECTION_TO_OTHER_WORKS
  DESCRIPTION_OF_MATERIAL
  DISSERTATION
  LANGUAGE
  MUSICAL_ENSEMBLE_OR_CAST
  NOT_SPECIFIED
  OCCASION_FOR_PUBLICATION
  ORIGINAL_TITLE
  ORIGINAL_VERSION
  REFERENCES
  RESTRICTIONS_ON_USE
}

enum ChildOrAdultCode {
  FOR_CHILDREN
  FOR_ADULTS
}

type ChildOrAdult {
  display: String!
  code: ChildOrAdultCode!
}

enum SchoolUseCode {
  FOR_SCHOOL_USE
  FOR_TEACHER
}

type SchoolUse {
  display: String!
  code: SchoolUseCode!
}

type Note {
  \\"\\"\\"
  The type of note - e.g. note about language, genre etc, NOT_SPECIFIED if not known. 
  \\"\\"\\"
  type: NoteType!

  \\"\\"\\"Heading before note\\"\\"\\"
  heading: String

  \\"\\"\\"The actual notes\\"\\"\\"
  display: [String!]!
}

enum ManifestationPartType {
  MUSIC_TRACKS
  SHEET_MUSIC_CONTENT
  PARTS_OF_BOOK
  NOT_SPECIFIED
}

type ManifestationPart {
  \\"\\"\\"The title of the entry (music track or title of a literary analysis)\\"\\"\\"
  title: String!

  \\"\\"\\"The creator of the music track or literary analysis\\"\\"\\"
  creators: [Creator!]!

  \\"\\"\\"Classification of this entry (music track or literary analysis)\\"\\"\\"
  classifications: [Classification!]!

  \\"\\"\\"Subjects of this entry (music track or literary analysis)\\"\\"\\"
  subjects: [Subject!]

  \\"\\"\\"
  Additional creator or contributor to this entry (music track or literary analysis) as described on the publication. E.g. 'arr.: H. Cornell'
  \\"\\"\\"
  creatorsFromDescription: [String!]!
}

type ManifestationParts {
  \\"\\"\\"Heading for the music content note\\"\\"\\"
  heading: String

  \\"\\"\\"The creator and title etc of the individual parts\\"\\"\\"
  parts: [ManifestationPart!]!

  \\"\\"\\"The type of manifestation parts, is this music tracks, book parts etc.\\"\\"\\"
  type: ManifestationPartType!
}

type Languages {
  \\"\\"\\"Main language of this manifestation\\"\\"\\"
  main: [Language!]

  \\"\\"\\"Original language of this manifestation\\"\\"\\"
  original: [Language!]

  \\"\\"\\"
  Parallel languages of this manifestation, if more languages are printed in the same book
  \\"\\"\\"
  parallel: [Language!]

  \\"\\"\\"
  Spoken language in this manifestation e.g. dubbed/syncronized language in movie
  \\"\\"\\"
  spoken: [Language!]

  \\"\\"\\"Subtitles in this manifestation\\"\\"\\"
  subtitles: [Language!]

  \\"\\"\\"
  Summary/abstract languages of this manifestation, if the manifestation contains short summaries of the content in another language
  \\"\\"\\"
  abstract: [Language!]
}

enum IdentifierType {
  DOI
  ISBN
  ISSN
  ISMN
  MUSIC
  MOVIE
  PUBLIZON
  NOT_SPECIFIED
  ORDER_NUMBER
  BARCODE
}

type Identifier {
  \\"\\"\\"The type of identifier\\"\\"\\"
  type: IdentifierType!

  \\"\\"\\"The actual identifier\\"\\"\\"
  value: String!
}

type HostPublication {
  \\"\\"\\"Publication this manifestation can be found in\\"\\"\\"
  title: String!

  \\"\\"\\"Creator of the host publication if host publication is book\\"\\"\\"
  creator: String

  \\"\\"\\"ISSN of the publication this manifestation can be found in\\"\\"\\"
  issn: String

  \\"\\"\\"ISBN of the publication this manifestation can be found in\\"\\"\\"
  isbn: String

  \\"\\"\\"The issue of the publication this manifestation can be found in\\"\\"\\"
  issue: String

  \\"\\"\\"Notes about the publication where this manifestation can be found in\\"\\"\\"
  notes: [String!]

  \\"\\"\\"The pages in the publication where this manifestation can be found in\\"\\"\\"
  pages: String

  \\"\\"\\"
  The publisher of the publication where this manifestation can be found in
  \\"\\"\\"
  publisher: String

  \\"\\"\\"Series of the publication this manifestation can be found in\\"\\"\\"
  series: Series

  \\"\\"\\"
  The publication year of the publication this manifestation can be found in
  \\"\\"\\"
  year: PublicationYear

  \\"\\"\\"All details about the publication this manifestation can be found in\\"\\"\\"
  summary: String!
}

type Printing {
  \\"\\"\\"
  Properties 'printing' and 'publicationYear' as one string, e.g.: '11. oplag, 2020'
  \\"\\"\\"
  summary: String!

  \\"\\"\\"The printing number and name\\"\\"\\"
  printing: String!

  \\"\\"\\"A year as displayable text and as number\\"\\"\\"
  publicationYear: PublicationYear
}

type PublicationYear {
  display: String!
  year: Int
  endYear: Int
  frequency: String
}

type Edition {
  \\"\\"\\"
  Properties 'edition', 'contributorsToEdition' and 'publicationYear' as one string, e.g.: '3. udgave, revideret af Hugin Eide, 2005'
  \\"\\"\\"
  summary: String!

  \\"\\"\\"The edition number and name\\"\\"\\"
  edition: String

  \\"\\"\\"Quotation of contributor statements related to the edition\\"\\"\\"
  contributors: [String!]!

  \\"\\"\\"A year as displayable text and as number\\"\\"\\"
  publicationYear: PublicationYear
}

enum EntryType {
  MAIN_ENTRY
  NATIONAL_BIBLIOGRAPHY_ENTRY
  ADDITIONAL_ENTRY
}

type Classification {
  \\"\\"\\"The classification code\\"\\"\\"
  code: String!

  \\"\\"\\"Descriptive text for the classification code (DK5 only)\\"\\"\\"
  display: String!

  \\"\\"\\"
  For DK5 only. The DK5 entry type: main entry, national entry, or additional entry
  \\"\\"\\"
  entryType: EntryType

  \\"\\"\\"Name of the classification system\\"\\"\\"
  system: String!
}

type Audience {
  \\"\\"\\"Appropriate audience for this manifestation\\"\\"\\"
  generalAudience: [String!]!

  \\"\\"\\"
  Range of numbers with either beginning of range or end of range or both e.g. 6-10, 1980-1999
  \\"\\"\\"
  ages: [Range!]!

  \\"\\"\\"Appropriate audience as recommended by the library\\"\\"\\"
  libraryRecommendation: String

  \\"\\"\\"Is this material for children or adults\\"\\"\\"
  childrenOrAdults: [ChildOrAdult!]!

  \\"\\"\\"
  Is this material for use in schools (folkeskole/ungdomsuddannelse) or is this material for use in schools by the teacher (folkeskole only)
  \\"\\"\\"
  schoolUse: [SchoolUse!]!

  \\"\\"\\"Primary target audience for this manifestation\\"\\"\\"
  primaryTarget: [String!]!

  \\"\\"\\"
  LET number of this manifestion, defines the reability level, LET stands for læseegnethedstal
  \\"\\"\\"
  let: String

  \\"\\"\\"
  Lix number of this manifestion, defines the reability level, Lix stands for læsbarhedsindex
  \\"\\"\\"
  lix: String
}

type CatalogueCodes {
  \\"\\"\\"Catalogue codes for the national bibliography \\"\\"\\"
  nationalBibliography: [String]!

  \\"\\"\\"other catalogue codes \\"\\"\\"
  otherCatalogues: [String]!
}

type Manifestations {
  first: Manifestation!
  latest: Manifestation!
  all: [Manifestation!]!
  bestRepresentation: Manifestation!
}

type Manifestation {
  \\"\\"\\"Unique identification of the manifestation e.g 870970-basis:54029519\\"\\"\\"
  pid: String!

  \\"\\"\\"Different kinds of titles for this work\\"\\"\\"
  titles: ManifestationTitles!

  \\"\\"\\"Abstract of the entity\\"\\"\\"
  abstract: [String!]!

  \\"\\"\\"Access type of this manifestation\\"\\"\\"
  accessTypes: [AccessType!]!

  \\"\\"\\"Different options to access manifestation\\"\\"\\"
  access: [Access!]!

  \\"\\"\\"
  Different kinds of definitions of appropriate audience for this manifestation
  \\"\\"\\"
  audience: Audience

  \\"\\"\\"CatalogueCodes for nationalBibliography and others\\"\\"\\"
  catalogueCodes: CatalogueCodes

  \\"\\"\\"Contributors to the manifestation, actors, illustrators etc\\"\\"\\"
  contributors: [Creator!]!

  \\"\\"\\"
  Additional contributors of this manifestation as described on the publication. E.g. 'på dansk ved Vivi Berendt'
  \\"\\"\\"
  contributorsFromDescription: [String!]!

  \\"\\"\\"Cover for this manifestation\\"\\"\\"
  cover: Cover!

  \\"\\"\\"
  Primary creators of the manifestation e.g. authors, directors, musicians etc
  \\"\\"\\"
  creators: [Creator!]!

  \\"\\"\\"
  Additional creators of this manifestation as described on the publication. E.g. 'tekst af William Warren'
  \\"\\"\\"
  creatorsFromDescription: [String!]!

  \\"\\"\\"
  Classification codes for this manifestation from any classification system
  \\"\\"\\"
  classifications: [Classification!]!

  \\"\\"\\"Edition details for this manifestation\\"\\"\\"
  edition: Edition

  \\"\\"\\"Details about the latest printing of this manifestation\\"\\"\\"
  latestPrinting: Printing

  \\"\\"\\"
  Overall literary category/genre of this manifestation. e.g. fiction or nonfiction. In Danish skønlitteratur/faglitteratur for literature, fiktion/nonfiktion for other types.
  \\"\\"\\"
  fictionNonfiction: FictionNonfiction

  \\"\\"\\"The genre, (literary) form, type etc. of this manifestation\\"\\"\\"
  genreAndForm: [String!]!

  \\"\\"\\"Details about the host publications of this manifestation\\"\\"\\"
  hostPublication: HostPublication

  \\"\\"\\"Identifiers for this manifestation - often used for search indexes\\"\\"\\"
  identifiers: [Identifier!]!

  \\"\\"\\"Languages in this manifestation\\"\\"\\"
  languages: Languages

  \\"\\"\\"
  Tracks on music album, sheet music content, or articles/short stories etc. in this manifestation
  \\"\\"\\"
  manifestationParts: ManifestationParts

  \\"\\"\\"The type of material of the manifestation based on bibliotek.dk types\\"\\"\\"
  materialTypes: [MaterialType!]!

  \\"\\"\\"Notes about the manifestation\\"\\"\\"
  notes: [Note!]!

  \\"\\"\\"
  Notes about relations to this book/periodical/journal, - like previous names or related journals
  \\"\\"\\"
  relatedPublications: [RelatedPublication!]!

  \\"\\"\\"
  Physical description of this manifestation like extent (pages/minutes), illustrations etc.
  \\"\\"\\"
  physicalDescriptions: [PhysicalDescription!]!

  \\"\\"\\"The publication year of the manifestation - OBS! was datePublished\\"\\"\\"
  publicationYear: PublicationYear!

  \\"\\"\\"Publisher of this manifestion\\"\\"\\"
  publisher: [String!]!

  \\"\\"\\"
  The creation date of the record describing this manifestation in the format YYYYMMDD
  \\"\\"\\"
  recordCreationDate: String!

  \\"\\"\\"Series for this work\\"\\"\\"
  series: [Series!]!

  \\"\\"\\"
  Information about on which shelf in the library this manifestation can be found
  \\"\\"\\"
  shelfmark: Shelfmark

  \\"\\"\\"
  The source of the manifestation, e.g. own library catalogue (Bibliotekskatalog) or online source e.g. Filmstriben, Ebook Central, eReolen Global etc.
  \\"\\"\\"
  source: [String!]!

  \\"\\"\\"Subjects for this manifestation\\"\\"\\"
  subjects: SubjectContainer!

  \\"\\"\\"
  Information about on which volume this manifestation is in multi volume work
  \\"\\"\\"
  volume: String

  \\"\\"\\"
  Quotation of the manifestation's table of contents or a similar content list
  \\"\\"\\"
  tableOfContents: TableOfContent
}

type ManifestationTitles {
  \\"\\"\\"The main title(s) of the work\\"\\"\\"
  main: [String!]!

  \\"\\"\\"The full title(s) of the work including subtitles etc\\"\\"\\"
  full: [String!]!

  \\"\\"\\"The sorted title of the entity\\"\\"\\"
  sort: String!

  \\"\\"\\"
  Alternative titles for this manifestation e.g. a title in a different language
  \\"\\"\\"
  alternative: [String!]!

  \\"\\"\\"
  Information that distinguishes this manifestation from a similar manifestation with same title, e.g. 'illustrated by Ted Kirby'
  \\"\\"\\"
  identifyingAddition: String

  \\"\\"\\"
  The title of the work that this expression/manifestation is translated from or based on. The original title(s) of a film which has a different distribution title.
  \\"\\"\\"
  original: [String!]

  \\"\\"\\"Titles (in other languages) parallel to the main 'title' of the work\\"\\"\\"
  parallel: [String!]!

  \\"\\"\\"The standard title of the entity, used for music and movies\\"\\"\\"
  standard: String

  \\"\\"\\"Danish translation of the main title\\"\\"\\"
  translated: [String!]
}

type Mutation {
  submitPeriodicaArticleOrder(input: PeriodicaArticleOrder!): PeriodicaArticleOrderResponse!
}

type Recommendation {
  \\"\\"\\"The recommended work\\"\\"\\"
  work: Work!

  \\"\\"\\"The recommended manifestation\\"\\"\\"
  manifestation: Manifestation!

  \\"\\"\\"Info on how this recommendation was generated\\"\\"\\"
  reader: [String!]!
}

type RecommendationResponse {
  result: [Recommendation!]!
}

enum LibrariansReviewSectionCode {
  ALL
  ABOUT
  DESCRIPTION
  EVALUATION
  OTHER
  LIBRARY
  USE
  OLDDESCRIPTION
  COMPARE
  CONCLUSION
}

type LibrariansReviewSection {
  \\"\\"\\"a code indicating the content type of the section\\"\\"\\"
  code: LibrariansReviewSectionCode!

  \\"\\"\\"The heading of the section\\"\\"\\"
  heading: String

  \\"\\"\\"A piece of text, maybe mentioning a work at the end.\\"\\"\\"
  text: String!

  \\"\\"\\"
  The work the text is refering to. When work is null, the text does not refer to a work.
  \\"\\"\\"
  work: Work
}

interface Review {
  author: String
  date: String
}

type ExternalReview implements Review {
  author: String
  date: String
  rating: String
  urls: [AccessUrl!]!
}

type InfomediaReview implements Review {
  author: String
  date: String
  origin: String
  rating: String
  id: String!
}

type LibrariansReview implements Review {
  author: String
  date: String
  sections: [LibrariansReviewSection!]!

  \\"\\"\\" This is a pid \\"\\"\\"
  id: String!
}

type Work {
  reviews: [Review!]!

  \\"\\"\\"
  Unique identification of the work based on work-presentation id e.g work-of:870970-basis:54029519
  \\"\\"\\"
  workId: String!
  titles: WorkTitles!

  \\"\\"\\"Abstract of the entity\\"\\"\\"
  abstract: [String!]

  \\"\\"\\"Creators\\"\\"\\"
  creators: [Creator!]!

  \\"\\"\\"DK5 main entry for this work\\"\\"\\"
  dk5MainEntry: DK5MainEntry

  \\"\\"\\"
  Overall literary category/genre of this work. e.g. fiction or nonfiction. In Danish skønlitteratur/faglitteratur for literature, fiktion/nonfiktion for other types.
  \\"\\"\\"
  fictionNonfiction: FictionNonfiction

  \\"\\"\\"The type of material of the manifestation based on bibliotek.dk types\\"\\"\\"
  materialTypes: [MaterialType!]!

  \\"\\"\\"Series for this work\\"\\"\\"
  series: [Series!]!

  \\"\\"\\"Members of a series that this work is part of\\"\\"\\"
  seriesMembers: [Work!]!

  \\"\\"\\"
  Literary/movie universe this work is part of, e.g. Wizarding World, Marvel Universe
  \\"\\"\\"
  universe: Universe

  \\"\\"\\"Subjects for this work\\"\\"\\"
  subjects: SubjectContainer!

  \\"\\"\\"The genre, (literary) form, type etc. of this work\\"\\"\\"
  genreAndForm: [String!]!

  \\"\\"\\"Worktypes for this work - 'none' replaced by 'other'\\"\\"\\"
  workTypes: [WorkType!]!

  \\"\\"\\"The year this work was originally published or produced\\"\\"\\"
  workYear: String

  \\"\\"\\"The main language(s) of the work's content\\"\\"\\"
  mainLanguages: [Language!]!

  \\"\\"\\"Details about the manifestations of this work\\"\\"\\"
  manifestations: Manifestations!
}

type Universe {
  \\"\\"\\"
  Literary/movie universe this work is part of e.g. Wizarding World, Marvel Universe
  \\"\\"\\"
  title: String!
}

type NumberInSeries {
  \\"\\"\\"
  The number in the series as text, quoted form the publication, e.g. 'Vol. IX'
  \\"\\"\\"
  display: String!

  \\"\\"\\"The number in the series as integer\\"\\"\\"
  number: [Int!]
}

type Series {
  \\"\\"\\"The title of the series\\"\\"\\"
  title: String!

  \\"\\"\\"A alternative title to the main 'title' of the series\\"\\"\\"
  alternativeTitles: [String!]!

  \\"\\"\\"
  A parallel title to the main 'title' of the series, in a different language
  \\"\\"\\"
  parallelTitles: [String!]!

  \\"\\"\\"The number in the series as text qoutation and a number\\"\\"\\"
  numberInSeries: NumberInSeries

  \\"\\"\\"Information about whether this work in the series should be read first\\"\\"\\"
  readThisFirst: Boolean

  \\"\\"\\"
  Information about whether this work in the series can be read without considering the order of the series, it can be read at any time
  \\"\\"\\"
  readThisWhenever: Boolean

  \\"\\"\\"Whether this is a popular series or general series\\"\\"\\"
  isPopular: Boolean
}

interface Subject {
  display: String!
}

type SubjectText implements Subject {
  type: SubjectType!
  display: String!
}

type TimePeriod implements Subject {
  period: Range!
  display: String!
}

enum SubjectType {
  TOPIC
  LOCATION
  FICTIONAL_CHARACTER
  MUSIC_COUNTRY_OF_ORIGIN
  MUSIC_TIME_PERIOD
  MUSICAL_INSTRUMENTATION
  TIME_PERIOD
  FILM_NATIONALITY
  LIBRARY_OF_CONGRESS_SUBJECT_HEADING
}

type Range {
  begin: Int
  end: Int
  display: String!
}

type SubjectContainer {
  \\"\\"\\"All subjects\\"\\"\\"
  all: [Subject!]!

  \\"\\"\\"Only DBC verified subjects\\"\\"\\"
  dbcVerified: [Subject!]!
}

enum SuggestionType {
  SUBJECT
  TITLE
  CREATOR
  COMPOSIT
}

type Suggestion {
  \\"\\"\\"The type of suggestion: creator, subject or title\\"\\"\\"
  type: SuggestionType!

  \\"\\"\\"The suggested term which can be searched for\\"\\"\\"
  term: String!

  \\"\\"\\"A work related to the term\\"\\"\\"
  work: Work
}

type SuggestResponse {
  result: [Suggestion!]!
}

type localSuggestResponse {
  result: [Suggestion!]!
}

type Language {
  \\"\\"\\"Language as displayable text\\"\\"\\"
  display: String!

  \\"\\"\\"ISO639-2 language code\\"\\"\\"
  isoCode: String!
}

type MaterialType {
  \\"\\"\\"
  The general type of material of the manifestation based on a grouping of bibliotek.dk material types, e.g. bøger, lydbøger etc. 
  \\"\\"\\"
  general: String!

  \\"\\"\\"The type of material of the manifestation based on bibliotek.dk types\\"\\"\\"
  specific: String!
}

enum FictionNonfictionCode {
  FICTION
  NONFICTION
  NOT_SPECIFIED
}

type FictionNonfiction {
  \\"\\"\\"
  Displayable overall category/genre. In Danish skønlitteratur/faglitteratur for literature, fiktion/nonfiktion for other types.
  \\"\\"\\"
  display: String!

  \\"\\"\\"Binary code fiction/nonfiction used for filtering\\"\\"\\"
  code: FictionNonfictionCode!
}

type DK5MainEntry {
  \\"\\"\\"Displayable main DK5 classification\\"\\"\\"
  display: String!

  \\"\\"\\"Main DK5 classification code\\"\\"\\"
  code: String!
}

enum WorkType {
  ANALYSIS
  ARTICLE
  BOOKDESCRIPTION
  GAME
  LITERATURE
  MAP
  MOVIE
  MUSIC
  OTHER
  PERIODICA
  PORTRAIT
  REVIEW
  SHEETMUSIC
  TRACK
}

type WorkTitles {
  \\"\\"\\"The main title(s) of the work\\"\\"\\"
  main: [String!]!

  \\"\\"\\"The full title(s) of the work including subtitles etc\\"\\"\\"
  full: [String!]!

  \\"\\"\\"Titles (in other languages) parallel to the main 'title' of the work\\"\\"\\"
  parallel: [String!]!

  \\"\\"\\"The sorted title of the entity\\"\\"\\"
  sort: String!

  \\"\\"\\"
  The title of the work that this expression/manifestation is translated from or based on. The original title(s) of a film which has a different distribution title.
  \\"\\"\\"
  original: [String!]

  \\"\\"\\"The standard title of the entity, used for music and movies\\"\\"\\"
  standard: String

  \\"\\"\\"Danish translation of the main title\\"\\"\\"
  translated: [String!]
}

enum LanguageCode {
  da
  en
}

input PeriodicaArticleOrder {
  \\"\\"\\"The pid of an article or periodica\\"\\"\\"
  pid: String!
  pickUpBranch: String!
  userName: String
  userMail: String
  publicationDateOfComponent: String
  volume: String
  authorOfComponent: String
  titleOfComponent: String
  pagination: String
}

enum PeriodicaArticleOrderStatus {
  OK
  ERROR_UNAUTHORIZED_USER
  ERROR_AGENCY_NOT_SUBSCRIBED
  ERROR_INVALID_PICKUP_BRANCH
  ERROR_PID_NOT_RESERVABLE
}

type PeriodicaArticleOrderResponse {
  status: PeriodicaArticleOrderStatus!
}

type Query {
  manifestation(pid: String, faust: String): Manifestation
  manifestations(faust: [String!], pid: [String!]): [Manifestation]!
  work(id: String, faust: String, pid: String, language: LanguageCode): Work
  works(id: [String!], faust: [String!], pid: [String!], language: LanguageCode): [Work]!
  search(q: SearchQuery!, filters: SearchFilters): SearchResponse!
  complexSearch(cql: String!, filters: ComplexSearchFilters): ComplexSearchResponse!
  localSuggest(
    \\"\\"\\"The query to get suggestions from\\"\\"\\"
    q: String!

    \\"\\"\\"suggest type to include in result\\"\\"\\"
    suggestType: [SuggestionType!]

    \\"\\"\\"Number of items to return\\"\\"\\"
    limit: Int

    \\"\\"\\"Name of branch to filter by\\"\\"\\"
    branch: String
  ): localSuggestResponse!
  suggest(
    workType: WorkType

    \\"\\"\\"The query to get suggestions from\\"\\"\\"
    q: String!

    \\"\\"\\"suggest type to include in result\\"\\"\\"
    suggestType: SuggestionType

    \\"\\"\\"Number of items to return\\"\\"\\"
    limit: Int
  ): SuggestResponse!

  \\"\\"\\"Get recommendations\\"\\"\\"
  recommend(id: String, pid: String, faust: String, limit: Int): RecommendationResponse!
  infomedia(id: String!): InfomediaResponse!
  refWorks(pid: String!): String!
  ris(pid: String!): String!
  relatedSubjects(q: [String!]!, limit: Int): [String!]
}

\\"\\"\\"An integer in the range from 1 to 100\\"\\"\\"
scalar PaginationLimit

\\"\\"\\"The supported fields to query\\"\\"\\"
input SearchQuery {
  \\"\\"\\"
  Search for title, creator, subject or a combination.
  This is typically used where a single search box is desired.
  \\"\\"\\"
  all: String

  \\"\\"\\"Search for creator\\"\\"\\"
  creator: String

  \\"\\"\\"Search for specific subject\\"\\"\\"
  subject: String

  \\"\\"\\"Search for specific title\\"\\"\\"
  title: String
}

\\"\\"\\"The supported facet fields\\"\\"\\"
enum FacetField {
  workTypes
  mainLanguages
  materialTypes
  fictionalCharacter
  genreAndForm
  childrenOrAdults
  accessTypes
  fictionNonfiction
  subjects
  creators
}

\\"\\"\\"Search Filters\\"\\"\\"
input SearchFilters {
  accessTypes: [String!]
  childrenOrAdults: [String!]
  creators: [String!]
  fictionNonfiction: [String!]
  fictionalCharacter: [String!]
  genreAndForm: [String!]
  mainLanguages: [String!]
  materialTypes: [String!]
  subjects: [String!]
  workTypes: [String!]
  branchId: [String!]
  department: [String!]
  location: [String!]
  sublocation: [String!]
  status: [HoldingsStatus!]
}

enum HoldingsStatus {
  \\"\\"\\"Holding is physically available at the branch\\"\\"\\"
  OnShelf

  \\"\\"\\"Holding is on loan\\"\\"\\"
  OnLoan
}

\\"\\"\\"A facet value consists of a term and a count.\\"\\"\\"
type FacetValue {
  \\"\\"\\"Use the key when applying filters\\"\\"\\"
  key: String!

  \\"\\"\\"A value of a facet field\\"\\"\\"
  term: String!

  \\"\\"\\"A score indicating relevance\\"\\"\\"
  score: Int
}

\\"\\"\\"The result for a specific facet\\"\\"\\"
type FacetResult {
  \\"\\"\\"The name of the facet.\\"\\"\\"
  name: String!

  \\"\\"\\"The values of thie facet result\\"\\"\\"
  values(limit: Int!): [FacetValue!]!
}

\\"\\"\\"The simple search response\\"\\"\\"
type SearchResponse {
  \\"\\"\\"Total number of works found. May be used for pagination.\\"\\"\\"
  hitcount: Int!

  \\"\\"\\"
  The works matching the given search query. Use offset and limit for pagination.
  \\"\\"\\"
  works(offset: Int!, limit: PaginationLimit!): [Work!]!

  \\"\\"\\"
  Make sure only to fetch this when needed
  This may take seconds to complete
  \\"\\"\\"
  facets(facets: [FacetField!]!): [FacetResult!]!

  \\"\\"\\"A list of alternative search queries\\"\\"\\"
  didYouMean: [DidYouMean!]!
}

type DidYouMean {
  \\"\\"\\"An alternative query\\"\\"\\"
  query: String!

  \\"\\"\\"A probability score between 0-1 indicating how relevant the query is\\"\\"\\"
  score: Float!
}
"
`;

exports[`limited access to root fields 1`] = `
"type HelpRow {
  nid: Int!
  group: String!
  orgTitle: String!
  title: String!
  body: String!
}

type HelpResponse {
  result: [HelpRow!]!
}

enum LanguageCode {
  da
  en
}

type Query {
  help(q: String!, language: LanguageCode): HelpResponse
}
"
`;

exports[`remove all fields by type 1`] = `
"enum AccessTypeCode {
  PHYSICAL
  ONLINE
  NOT_SPECIFIED
}

type AccessType {
  display: String!
  code: AccessTypeCode!
}

type Ereol {
  \\"\\"\\"
  The origin, e.g. \\"Ereolen\\" or \\"Ereolen Go\\"
  \\"\\"\\"
  origin: String!

  \\"\\"\\"The url where manifestation is located\\"\\"\\"
  url: String!

  \\"\\"\\"
  Is this a manifestation that always can be loaned on ereolen.dk even if you've run out of loans this month
  \\"\\"\\"
  canAlwaysBeLoaned: Boolean!
}

type AccessUrl {
  \\"\\"\\"
  The origin, e.g. \\"DBC Webarkiv\\"
  \\"\\"\\"
  origin: String!

  \\"\\"\\"The url where manifestation is located\\"\\"\\"
  url: String!

  \\"\\"\\"Notes for the resource\\"\\"\\"
  note: String

  \\"\\"\\"If the resource requires login\\"\\"\\"
  loginRequired: Boolean!
}

type InterLibraryLoan {
  \\"\\"\\"Is true when manifestation can be borrowed via ill\\"\\"\\"
  loanIsPossible: Boolean!
}

type InfomediaService {
  \\"\\"\\"
  Infomedia ID which can be used to fetch article through Infomedia Service
  \\"\\"\\"
  id: String!
}

type DigitalArticleService {
  \\"\\"\\"
  Issn which can be used to order article through Digital Article Service
  \\"\\"\\"
  issn: String!
}

union Access = AccessUrl | Ereol | InterLibraryLoan | InfomediaService | DigitalArticleService

type Translation {
  \\"\\"\\"
  Translation in plural form, e.g. forfattere, komponister, instruktører etc.
  \\"\\"\\"
  plural: String!

  \\"\\"\\"Translation in singular form, e.g. forfatter, komponist, instruktør\\"\\"\\"
  singular: String!
}

type Role {
  \\"\\"\\"
  The code for the type of creator or contributor, e.g. 'aut' for author, 'ill' for illustrator etc
  \\"\\"\\"
  functionCode: String!

  \\"\\"\\"
  The type of creator/contributor as text in singular and plural in Danish, e.g. forfatter/forfattere, komponist/komponister etc
  \\"\\"\\"
  function: Translation!
}

type Person implements Subject & Creator {
  \\"\\"\\"The person's whole name in normal order\\"\\"\\"
  display: String!

  \\"\\"\\"The person's full name inverted\\"\\"\\"
  nameSort: String!

  \\"\\"\\"First name of the person\\"\\"\\"
  firstName: String

  \\"\\"\\"Last name of the person\\"\\"\\"
  lastName: String

  \\"\\"\\"Birth year of the person\\"\\"\\"
  birthYear: String

  \\"\\"\\"A roman numeral added to the person, like Christian IV\\"\\"\\"
  romanNumeral: String

  \\"\\"\\"Added information about the person, like Henri, konge af Frankrig\\"\\"\\"
  attributeToName: String

  \\"\\"\\"Creator aliases, creators behind used pseudonym\\"\\"\\"
  aliases: [Person!]!

  \\"\\"\\"
  A list of which kinds of contributions this person made to this creation
  \\"\\"\\"
  roles: [Role!]!
}

type Corporation implements Subject & Creator {
  \\"\\"\\"The full corporation or conference name\\"\\"\\"
  display: String!

  \\"\\"\\"The full corporation or conference name to sort after\\"\\"\\"
  nameSort: String!

  \\"\\"\\"Main corporation or conference\\"\\"\\"
  main: String

  \\"\\"\\"Sub corporation or conference/meeting\\"\\"\\"
  sub: String

  \\"\\"\\"
  Location or jurisdiction of the corporation or conference, like Københavns Kommune, Statistisk Kontor
  \\"\\"\\"
  location: String

  \\"\\"\\"Year of the conference\\"\\"\\"
  year: String

  \\"\\"\\"Number of the conference\\"\\"\\"
  number: String

  \\"\\"\\"
  Added information about the corporation, like M. Folmer Andersen (firma)
  \\"\\"\\"
  attributeToName: String

  \\"\\"\\"
  A list of which kinds of contributions this corporation made to this creation
  \\"\\"\\"
  roles: [Role!]!
}

interface Creator {
  \\"\\"\\"Name of the creator\\"\\"\\"
  display: String!

  \\"\\"\\"Name of the creator which can be used to sort after \\"\\"\\"
  nameSort: String!

  \\"\\"\\"
  A list of which kinds of contributions this creator made to this creation
  \\"\\"\\"
  roles: [Role!]!
}

type TableOfContent {
  heading: String
  content: String
  listOfContent: [TableOfContent!]
}

type Shelfmark {
  \\"\\"\\"A postfix to the shelfmark, eg. 99.4 Christensen, Inger. f. 1935\\"\\"\\"
  postfix: String!

  \\"\\"\\"
  The actual shelfmark - e.g. information about on which shelf in the library this manifestation can be found, e.g. 99.4
  \\"\\"\\"
  shelfmark: String!
}

type PhysicalDescription {
  \\"\\"\\"
  A summary of the physical description of this manifestation like extent (pages/minutes), illustrations etc.
  \\"\\"\\"
  summary: String!

  \\"\\"\\"Material that comes with the manifestation (bilag)\\"\\"\\"
  accompanyingMaterial: String

  \\"\\"\\"
  Additional physical description of the manifestation (e.g illustrations etc)
  \\"\\"\\"
  additionalDescription: String

  \\"\\"\\"Extent of the manifestation like pages and number of items\\"\\"\\"
  extent: String

  \\"\\"\\"Number of pages of the manifestation as number\\"\\"\\"
  numberOfPages: Int

  \\"\\"\\"Number of units, like 3 cassettes, or 1 score etc.\\"\\"\\"
  numberOfUnits: Int

  \\"\\"\\"The playing time of the manifestation (e.g 2 hours 5 minutes)\\"\\"\\"
  playingTime: String

  \\"\\"\\"The necessary equipment to use the material\\"\\"\\"
  requirements: String

  \\"\\"\\"Size of the manifestation\\"\\"\\"
  size: String

  \\"\\"\\"Technical information about the manifestation (e.g blu-ray disc)\\"\\"\\"
  technicalInformation: String

  \\"\\"\\"
  Ratio of text vs. illustration from 1-5 as a number, where 1 means no illustrations and 5 means illustrations on all pages
  \\"\\"\\"
  textVsIllustrations: Int
}

type RelatedPublication {
  \\"\\"\\"
  Notes describing the relation of the related periodical/journal/publication
  \\"\\"\\"
  heading: String!

  \\"\\"\\"Title of the related periodical/journal\\"\\"\\"
  title: [String!]!

  \\"\\"\\"ISSN of the related periodical/journal/publication\\"\\"\\"
  issn: String

  \\"\\"\\"ISBN of the related publication\\"\\"\\"
  isbn: String

  \\"\\"\\"Note regarding the URL of the related publication\\"\\"\\"
  urlText: String

  \\"\\"\\"URL of the related publication\\"\\"\\"
  url: String
}

enum NoteType {
  CONNECTION_TO_OTHER_WORKS
  DESCRIPTION_OF_MATERIAL
  DISSERTATION
  LANGUAGE
  MUSICAL_ENSEMBLE_OR_CAST
  NOT_SPECIFIED
  OCCASION_FOR_PUBLICATION
  ORIGINAL_TITLE
  ORIGINAL_VERSION
  REFERENCES
  RESTRICTIONS_ON_USE
}

enum ChildOrAdultCode {
  FOR_CHILDREN
  FOR_ADULTS
}

type ChildOrAdult {
  display: String!
  code: ChildOrAdultCode!
}

enum SchoolUseCode {
  FOR_SCHOOL_USE
  FOR_TEACHER
}

type SchoolUse {
  display: String!
  code: SchoolUseCode!
}

type Note {
  \\"\\"\\"
  The type of note - e.g. note about language, genre etc, NOT_SPECIFIED if not known. 
  \\"\\"\\"
  type: NoteType!

  \\"\\"\\"Heading before note\\"\\"\\"
  heading: String

  \\"\\"\\"The actual notes\\"\\"\\"
  display: [String!]!
}

enum ManifestationPartType {
  MUSIC_TRACKS
  SHEET_MUSIC_CONTENT
  PARTS_OF_BOOK
  NOT_SPECIFIED
}

type ManifestationPart {
  \\"\\"\\"The title of the entry (music track or title of a literary analysis)\\"\\"\\"
  title: String!

  \\"\\"\\"The creator of the music track or literary analysis\\"\\"\\"
  creators: [Creator!]!

  \\"\\"\\"Classification of this entry (music track or literary analysis)\\"\\"\\"
  classifications: [Classification!]!

  \\"\\"\\"Subjects of this entry (music track or literary analysis)\\"\\"\\"
  subjects: [Subject!]

  \\"\\"\\"
  Additional creator or contributor to this entry (music track or literary analysis) as described on the publication. E.g. 'arr.: H. Cornell'
  \\"\\"\\"
  creatorsFromDescription: [String!]!
}

type ManifestationParts {
  \\"\\"\\"Heading for the music content note\\"\\"\\"
  heading: String

  \\"\\"\\"The creator and title etc of the individual parts\\"\\"\\"
  parts: [ManifestationPart!]!

  \\"\\"\\"The type of manifestation parts, is this music tracks, book parts etc.\\"\\"\\"
  type: ManifestationPartType!
}

type Languages {
  \\"\\"\\"Main language of this manifestation\\"\\"\\"
  main: [Language!]

  \\"\\"\\"Original language of this manifestation\\"\\"\\"
  original: [Language!]

  \\"\\"\\"
  Parallel languages of this manifestation, if more languages are printed in the same book
  \\"\\"\\"
  parallel: [Language!]

  \\"\\"\\"
  Spoken language in this manifestation e.g. dubbed/syncronized language in movie
  \\"\\"\\"
  spoken: [Language!]

  \\"\\"\\"Subtitles in this manifestation\\"\\"\\"
  subtitles: [Language!]

  \\"\\"\\"
  Summary/abstract languages of this manifestation, if the manifestation contains short summaries of the content in another language
  \\"\\"\\"
  abstract: [Language!]
}

enum IdentifierType {
  DOI
  ISBN
  ISSN
  ISMN
  MUSIC
  MOVIE
  PUBLIZON
  NOT_SPECIFIED
  ORDER_NUMBER
  BARCODE
}

type Identifier {
  \\"\\"\\"The type of identifier\\"\\"\\"
  type: IdentifierType!

  \\"\\"\\"The actual identifier\\"\\"\\"
  value: String!
}

type HostPublication {
  \\"\\"\\"Publication this manifestation can be found in\\"\\"\\"
  title: String!

  \\"\\"\\"Creator of the host publication if host publication is book\\"\\"\\"
  creator: String

  \\"\\"\\"ISSN of the publication this manifestation can be found in\\"\\"\\"
  issn: String

  \\"\\"\\"ISBN of the publication this manifestation can be found in\\"\\"\\"
  isbn: String

  \\"\\"\\"The issue of the publication this manifestation can be found in\\"\\"\\"
  issue: String

  \\"\\"\\"Notes about the publication where this manifestation can be found in\\"\\"\\"
  notes: [String!]

  \\"\\"\\"The pages in the publication where this manifestation can be found in\\"\\"\\"
  pages: String

  \\"\\"\\"
  The publisher of the publication where this manifestation can be found in
  \\"\\"\\"
  publisher: String

  \\"\\"\\"Series of the publication this manifestation can be found in\\"\\"\\"
  series: Series

  \\"\\"\\"
  The publication year of the publication this manifestation can be found in
  \\"\\"\\"
  year: PublicationYear

  \\"\\"\\"All details about the publication this manifestation can be found in\\"\\"\\"
  summary: String!
}

type Printing {
  \\"\\"\\"
  Properties 'printing' and 'publicationYear' as one string, e.g.: '11. oplag, 2020'
  \\"\\"\\"
  summary: String!

  \\"\\"\\"The printing number and name\\"\\"\\"
  printing: String!

  \\"\\"\\"A year as displayable text and as number\\"\\"\\"
  publicationYear: PublicationYear
}

type PublicationYear {
  display: String!
  year: Int
  endYear: Int
  frequency: String
}

type Edition {
  \\"\\"\\"
  Properties 'edition', 'contributorsToEdition' and 'publicationYear' as one string, e.g.: '3. udgave, revideret af Hugin Eide, 2005'
  \\"\\"\\"
  summary: String!

  \\"\\"\\"The edition number and name\\"\\"\\"
  edition: String

  \\"\\"\\"Quotation of contributor statements related to the edition\\"\\"\\"
  contributors: [String!]!

  \\"\\"\\"A year as displayable text and as number\\"\\"\\"
  publicationYear: PublicationYear
}

enum EntryType {
  MAIN_ENTRY
  NATIONAL_BIBLIOGRAPHY_ENTRY
  ADDITIONAL_ENTRY
}

type Classification {
  \\"\\"\\"The classification code\\"\\"\\"
  code: String!

  \\"\\"\\"Descriptive text for the classification code (DK5 only)\\"\\"\\"
  display: String!

  \\"\\"\\"
  For DK5 only. The DK5 entry type: main entry, national entry, or additional entry
  \\"\\"\\"
  entryType: EntryType

  \\"\\"\\"Name of the classification system\\"\\"\\"
  system: String!
}

type Audience {
  \\"\\"\\"Appropriate audience for this manifestation\\"\\"\\"
  generalAudience: [String!]!

  \\"\\"\\"
  Range of numbers with either beginning of range or end of range or both e.g. 6-10, 1980-1999
  \\"\\"\\"
  ages: [Range!]!

  \\"\\"\\"Appropriate audience as recommended by the library\\"\\"\\"
  libraryRecommendation: String

  \\"\\"\\"Is this material for children or adults\\"\\"\\"
  childrenOrAdults: [ChildOrAdult!]!

  \\"\\"\\"
  Is this material for use in schools (folkeskole/ungdomsuddannelse) or is this material for use in schools by the teacher (folkeskole only)
  \\"\\"\\"
  schoolUse: [SchoolUse!]!

  \\"\\"\\"Primary target audience for this manifestation\\"\\"\\"
  primaryTarget: [String!]!

  \\"\\"\\"
  LET number of this manifestion, defines the reability level, LET stands for læseegnethedstal
  \\"\\"\\"
  let: String

  \\"\\"\\"
  Lix number of this manifestion, defines the reability level, Lix stands for læsbarhedsindex
  \\"\\"\\"
  lix: String
}

type CatalogueCodes {
  \\"\\"\\"Catalogue codes for the national bibliography \\"\\"\\"
  nationalBibliography: [String]!

  \\"\\"\\"other catalogue codes \\"\\"\\"
  otherCatalogues: [String]!
}

type Manifestation {
  \\"\\"\\"Unique identification of the manifestation e.g 870970-basis:54029519\\"\\"\\"
  pid: String!

  \\"\\"\\"Different kinds of titles for this work\\"\\"\\"
  titles: ManifestationTitles!

  \\"\\"\\"Abstract of the entity\\"\\"\\"
  abstract: [String!]!

  \\"\\"\\"Access type of this manifestation\\"\\"\\"
  accessTypes: [AccessType!]!

  \\"\\"\\"Different options to access manifestation\\"\\"\\"
  access: [Access!]!

  \\"\\"\\"
  Different kinds of definitions of appropriate audience for this manifestation
  \\"\\"\\"
  audience: Audience

  \\"\\"\\"CatalogueCodes for nationalBibliography and others\\"\\"\\"
  catalogueCodes: CatalogueCodes

  \\"\\"\\"Contributors to the manifestation, actors, illustrators etc\\"\\"\\"
  contributors: [Creator!]!

  \\"\\"\\"
  Additional contributors of this manifestation as described on the publication. E.g. 'på dansk ved Vivi Berendt'
  \\"\\"\\"
  contributorsFromDescription: [String!]!

  \\"\\"\\"
  Primary creators of the manifestation e.g. authors, directors, musicians etc
  \\"\\"\\"
  creators: [Creator!]!

  \\"\\"\\"
  Additional creators of this manifestation as described on the publication. E.g. 'tekst af William Warren'
  \\"\\"\\"
  creatorsFromDescription: [String!]!

  \\"\\"\\"
  Classification codes for this manifestation from any classification system
  \\"\\"\\"
  classifications: [Classification!]!

  \\"\\"\\"Edition details for this manifestation\\"\\"\\"
  edition: Edition

  \\"\\"\\"Details about the latest printing of this manifestation\\"\\"\\"
  latestPrinting: Printing

  \\"\\"\\"
  Overall literary category/genre of this manifestation. e.g. fiction or nonfiction. In Danish skønlitteratur/faglitteratur for literature, fiktion/nonfiktion for other types.
  \\"\\"\\"
  fictionNonfiction: FictionNonfiction

  \\"\\"\\"The genre, (literary) form, type etc. of this manifestation\\"\\"\\"
  genreAndForm: [String!]!

  \\"\\"\\"Details about the host publications of this manifestation\\"\\"\\"
  hostPublication: HostPublication

  \\"\\"\\"Identifiers for this manifestation - often used for search indexes\\"\\"\\"
  identifiers: [Identifier!]!

  \\"\\"\\"Languages in this manifestation\\"\\"\\"
  languages: Languages

  \\"\\"\\"
  Tracks on music album, sheet music content, or articles/short stories etc. in this manifestation
  \\"\\"\\"
  manifestationParts: ManifestationParts

  \\"\\"\\"The type of material of the manifestation based on bibliotek.dk types\\"\\"\\"
  materialTypes: [MaterialType!]!

  \\"\\"\\"Notes about the manifestation\\"\\"\\"
  notes: [Note!]!

  \\"\\"\\"
  Notes about relations to this book/periodical/journal, - like previous names or related journals
  \\"\\"\\"
  relatedPublications: [RelatedPublication!]!

  \\"\\"\\"
  Physical description of this manifestation like extent (pages/minutes), illustrations etc.
  \\"\\"\\"
  physicalDescriptions: [PhysicalDescription!]!

  \\"\\"\\"The publication year of the manifestation - OBS! was datePublished\\"\\"\\"
  publicationYear: PublicationYear!

  \\"\\"\\"Publisher of this manifestion\\"\\"\\"
  publisher: [String!]!

  \\"\\"\\"
  The creation date of the record describing this manifestation in the format YYYYMMDD
  \\"\\"\\"
  recordCreationDate: String!

  \\"\\"\\"Series for this work\\"\\"\\"
  series: [Series!]!

  \\"\\"\\"
  Information about on which shelf in the library this manifestation can be found
  \\"\\"\\"
  shelfmark: Shelfmark

  \\"\\"\\"
  The source of the manifestation, e.g. own library catalogue (Bibliotekskatalog) or online source e.g. Filmstriben, Ebook Central, eReolen Global etc.
  \\"\\"\\"
  source: [String!]!

  \\"\\"\\"Subjects for this manifestation\\"\\"\\"
  subjects: SubjectContainer!

  \\"\\"\\"
  Information about on which volume this manifestation is in multi volume work
  \\"\\"\\"
  volume: String

  \\"\\"\\"
  Quotation of the manifestation's table of contents or a similar content list
  \\"\\"\\"
  tableOfContents: TableOfContent
}

type ManifestationTitles {
  \\"\\"\\"The main title(s) of the work\\"\\"\\"
  main: [String!]!

  \\"\\"\\"The full title(s) of the work including subtitles etc\\"\\"\\"
  full: [String!]!

  \\"\\"\\"The sorted title of the entity\\"\\"\\"
  sort: String!

  \\"\\"\\"
  Alternative titles for this manifestation e.g. a title in a different language
  \\"\\"\\"
  alternative: [String!]!

  \\"\\"\\"
  Information that distinguishes this manifestation from a similar manifestation with same title, e.g. 'illustrated by Ted Kirby'
  \\"\\"\\"
  identifyingAddition: String

  \\"\\"\\"
  The title of the work that this expression/manifestation is translated from or based on. The original title(s) of a film which has a different distribution title.
  \\"\\"\\"
  original: [String!]

  \\"\\"\\"Titles (in other languages) parallel to the main 'title' of the work\\"\\"\\"
  parallel: [String!]!

  \\"\\"\\"The standard title of the entity, used for music and movies\\"\\"\\"
  standard: String

  \\"\\"\\"Danish translation of the main title\\"\\"\\"
  translated: [String!]
}

type NumberInSeries {
  \\"\\"\\"
  The number in the series as text, quoted form the publication, e.g. 'Vol. IX'
  \\"\\"\\"
  display: String!

  \\"\\"\\"The number in the series as integer\\"\\"\\"
  number: [Int!]
}

type Series {
  \\"\\"\\"The title of the series\\"\\"\\"
  title: String!

  \\"\\"\\"A alternative title to the main 'title' of the series\\"\\"\\"
  alternativeTitles: [String!]!

  \\"\\"\\"
  A parallel title to the main 'title' of the series, in a different language
  \\"\\"\\"
  parallelTitles: [String!]!

  \\"\\"\\"The number in the series as text qoutation and a number\\"\\"\\"
  numberInSeries: NumberInSeries

  \\"\\"\\"Information about whether this work in the series should be read first\\"\\"\\"
  readThisFirst: Boolean

  \\"\\"\\"
  Information about whether this work in the series can be read without considering the order of the series, it can be read at any time
  \\"\\"\\"
  readThisWhenever: Boolean

  \\"\\"\\"Whether this is a popular series or general series\\"\\"\\"
  isPopular: Boolean
}

interface Subject {
  display: String!
}

type SubjectText implements Subject {
  type: SubjectType!
  display: String!
}

type TimePeriod implements Subject {
  period: Range!
  display: String!
}

enum SubjectType {
  TOPIC
  LOCATION
  FICTIONAL_CHARACTER
  MUSIC_COUNTRY_OF_ORIGIN
  MUSIC_TIME_PERIOD
  MUSICAL_INSTRUMENTATION
  TIME_PERIOD
  FILM_NATIONALITY
  LIBRARY_OF_CONGRESS_SUBJECT_HEADING
}

type Range {
  begin: Int
  end: Int
  display: String!
}

type SubjectContainer {
  \\"\\"\\"All subjects\\"\\"\\"
  all: [Subject!]!

  \\"\\"\\"Only DBC verified subjects\\"\\"\\"
  dbcVerified: [Subject!]!
}

type Language {
  \\"\\"\\"Language as displayable text\\"\\"\\"
  display: String!

  \\"\\"\\"ISO639-2 language code\\"\\"\\"
  isoCode: String!
}

type MaterialType {
  \\"\\"\\"
  The general type of material of the manifestation based on a grouping of bibliotek.dk material types, e.g. bøger, lydbøger etc. 
  \\"\\"\\"
  general: String!

  \\"\\"\\"The type of material of the manifestation based on bibliotek.dk types\\"\\"\\"
  specific: String!
}

enum FictionNonfictionCode {
  FICTION
  NONFICTION
  NOT_SPECIFIED
}

type FictionNonfiction {
  \\"\\"\\"
  Displayable overall category/genre. In Danish skønlitteratur/faglitteratur for literature, fiktion/nonfiktion for other types.
  \\"\\"\\"
  display: String!

  \\"\\"\\"Binary code fiction/nonfiction used for filtering\\"\\"\\"
  code: FictionNonfictionCode!
}

type Query {
  manifestation(pid: String, faust: String): Manifestation
}
"
`;
