.form {
  width: 450px;
}

/* wrap */

.wrap {
  position: relative;
  width: 450px;
  height: var(--pt6);
  overflow: hidden;

  border-radius: calc(var(--pt6) / 2);

  background-color: var(--white);

  display: flex;
  justify-content: flex-end;
  align-items: center;
}

.wrap.inActive.value {
  background-color: var(--divider);
  cursor: pointer;
}

.wrap.inActive.value:hover .clear {
  transform: translateX(0);
}

.wrap:focus-within {
  outline: 2px solid var(--text-dark);
}

.wrap.inActive.value:hover .input {
  padding-right: var(--pt7);
}

.wrap:focus-within .input {
  cursor: unset !important;
  flex-shrink: 0;
}

.wrap.inActive.value.display .input {
  padding: 0 var(--pt1) 0 var(--pt2);
  cursor: pointer;
}

.wrap.isLoading {
}

.spinner {
  margin: 0 var(--pt2);
}

/* input */

.input {
  width: 100%;
  min-width: 75px;
  height: var(--pt6);
  padding: 0 var(--pt3);
  border: none;
  transition-duration: 0.25s;

  /* half height */
  border-radius: calc(var(--pt6) / 2);

  /* default text */
  font-size: 16px;
  font-family: var(--font-mono-regular);
  /* background-color: transparent; */
  flex-shrink: 1;
}

.clientId {
  text-align: left;
}

/* display */

.display {
  display: flex;
  max-width: calc(450px);
}

.display p {
  padding: 0 var(--pt2);
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  color: var(--text-dark);
}

.display i {
  margin-left: calc(var(--pt05) * -1);
  font-style: normal;
}

/* clear button */

.clear {
  position: absolute;
  top: 0;
  right: 0;

  transform: translateX(100%);
  border: var(--pt05) solid var(--white);
  background-color: var(--divider) !important;

  padding: 0;
  min-width: var(--pt6) !important;
  max-width: var(--pt6) !important;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 0;
}

.clear p {
  padding: 0;
}

.clear:focus-visible,
.clear:hover {
  background-color: var(--primary-dark) !important;
  color: var(--white) !important;
}

.clear:focus-visible {
  transform: translateX(0);
  color: var(--white) !important;
  background-color: var(--text-dark) !important;
}

/* compact */

.form.compact {
  /* 40 * 8 = 320 */
  width: 320px;

  /* width: unset;
  min-width: 250px;
  max-width: 320px; */
}

.form.compact .wrap {
  height: var(--pt5);
  border-radius: calc(var(--pt5) / 2);
  /* 44 * 8 = 320 */
  width: 320px;

  /* width:unset;
  min-width: 250px;
  max-width: 320px; */
}

.form.compact .wrap .display p {
  max-width: calc(320px - 100px);
  /* max-width:320px; */
}

.form.compact .input {
  min-width: 75px;
  height: var(--pt5);
  /* half height */
  border-radius: calc(var(--pt5) / 2);
  /* text 1 */
  font-size: 14px;

  padding: 0 var(--pt3);
}

.form.compact .wrap.inActive.value.display .input {
  /* padding: 0; */
}

.form.compact .clear {
  height: 100%;
  min-width: var(--pt5) !important;
}

.overlay {
  background-color: var(--primary-light) !important;
}

@media screen and (max-width: 576px) {
  .form,
  .form .wrap {
    width: 320px;
  }

  .wrap.inActive.value .clear {
    transform: translateX(0);
    background-color: var(--primary-dark) !important;
    color: var(--text-dark) !important;
  }
}

/* 
* Dark theme
*/

/* selected dark theme */
:global(body.graphiql-dark) .display p {
  color: var(--dark);
}
:global(body.graphiql-dark) .input {
  background-color: var(--dark);
  color: var(--text-dark);
}
:global(body.graphiql-dark) .clear {
  background-color: var(--dark) !important;
  border: var(--pt05) solid var(--dark-light);
}
:global(body.graphiql-dark) .clear p {
  color: var(--text-dark);
}
:global(body.graphiql-dark) .clear:focus-visible,
:global(body.graphiql-dark) .clear:hover {
  background-color: var(--text-dark) !important;
}
:global(body.graphiql-dark) .clear:focus-visible p,
:global(body.graphiql-dark) .clear:hover p {
  color: var(--dark-light) !important;
}

/* system dark theme */
@media (prefers-color-scheme: dark) {
  :global(body:not(.graphiql-light)) .display p {
    color: var(--dark);
  }
  :global(body:not(.graphiql-light)) .input {
    background-color: var(--dark);
    color: var(--text-dark);
  }
  :global(body:not(.graphiql-light)) .clear {
    background-color: var(--dark) !important;
    border: var(--pt05) solid var(--dark-light);
  }
  :global(body:not(.graphiql-light)) .clear p {
    color: var(--text-dark);
  }
  :global(body:not(.graphiql-light)) .clear:focus-visible,
  :global(body:not(.graphiql-light)) .clear:hover {
    background-color: var(--text-dark) !important;
  }
  :global(body:not(.graphiql-light)) .clear:focus-visible p,
  :global(body:not(.graphiql-light)) .clear:hover p {
    color: var(--dark-light) !important;
  }
}
